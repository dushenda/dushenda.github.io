<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DHCP协议分析</title>
    <url>/2024/01/14/DHCP%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="协议流程">协议流程</h2>
<h2 id="仿真">仿真</h2>
<h3 id="组网">组网</h3>
<p><img src="Pastedimage20231215004144.png" /></p>
<h3 id="路由设置">路由设置</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;sys</span><br><span class="line">[Huawei]sysname AR1</span><br><span class="line">[AR1]int g0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]ip adderss 1.1.1.200 24</span><br><span class="line">[AR1]dhcp enable</span><br><span class="line">[AR1]ip pool ip_pool1</span><br><span class="line">[AR1-ip-pool-ip_pool1]network 1.1.1.0 24</span><br><span class="line">[AR1-ip-pool-ip_pool1]gateway-list 1.1.1.200</span><br><span class="line">[AR1-ip-pool-ip_pool1]lease day 3</span><br><span class="line">[AR1]int g0/0/0</span><br><span class="line">[AR1-GigabitEthernet0/0/0]dhcp select global</span><br></pre></td></tr></table></figure>
<p><img src="Pastedimage20231215004416.png" /></p>
<h2 id="抓包">抓包</h2>
<p><img src="Pastedimage20231215005008.png" /></p>
<h3 id="dhcp-discover">dhcp discover</h3>
<p><img src="Pastedimage20231215010535.png" /></p>
<p><img src="Pastedimage20231215010615.png" /></p>
<h3 id="dhcp-offer">dhcp offer</h3>
]]></content>
      <tags>
        <tag>计算机网络</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>SSD学习（一）</title>
    <url>/2024/01/14/SSD%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[
]]></content>
      <tags>
        <tag>SSD</tag>
        <tag>RAID</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows性能分析</title>
    <url>/2020/10/20/Windows%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="windows运行参数分析">Windows运行参数分析</h1>
<p>这篇文章较为简单，主要是使用 Windows Performance Record 和 Windows Performance Analysis 来分析在运行一段时间内的各个参数的变化，记录详细的信息。</p>
<p>一般大家都是从任务管理器上面来看机器当前的运行状态，但是，如果我想要了解的更详细一些，并且需要一段特定时间的运行参数，任务管理器仿佛就无能为力了，这时候，可以使用 Windows 测试框架里面的两个小工具来记录分析机器的运行状态。</p>
<img src="/2020/10/20/Windows%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86.png" class="">
<span id="more"></span>
<blockquote>
<p>Windows Hardware Lab Kit (Windows HLK) 是一个测试框架，用于测试 Windows 10 以及从 Windows Server 2016 开始的所有 Windows Server 版本的硬件设备。 你的产品必须通过使用 Windows HLK 进行的某些测试，才有资格加入 <a href="https://docs.microsoft.com/en-us/windows-hardware/design/compatibility/">Windows 硬件兼容性计划</a>。</p>
<p>Windows 性能工具包位于 <a href="https://aka.ms/adk">Windows 评估和部署工具包</a>中，其中包含各种性能监控工具，这些工具可生成有关 Windows 操作系统和应用程序的详细性能概况。 本文档同时讨论了 Windows Performance Recorder (WPR) 和 Windows Performance Analyzer (WPA)。</p>
<p>包含在<a href="https://go.microsoft.com/fwlink/p/?LinkId=526740">Windows 评估和部署工具包 (Windows ADK)</a>，Windows 性能记录器 (WPR) 是一种性能录制工具为基础上事件跟踪 Windows (ETW)。 它记录系统事件，然后可以通过使用 Windows Performance Analyzer (WPA) 进行分析。</p>
<p>包含在<a href="https://go.microsoft.com/fwlink/p/?LinkId=526740">Windows 评估和部署工具包 (Windows ADK)</a>，Windows Performance Analyzer (WPA) 是一种工具，创建的事件跟踪 Windows (ETW) 事件所记录的 Windows 性能的关系图和数据表记录器 (WPR)、 Xperf 或评估运行评估平台中。 WPA 可以打开任何事件跟踪日志 (ETL) 文件进行分析。</p>
</blockquote>
<h2 id="windows-performance-record">Windows Performance Record</h2>
<ol type="1">
<li><p>在程序中搜索到 Windows Performance Record 并且打开， <img src="/2020/10/20/Windows%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/wpr_start.png" class=""></p></li>
<li><p>从当前时刻开始记录，记录完成后保存文件 <img src="wpr_save.png" /> <img src="wpr_save_finish.png" /></p></li>
<li><p>记下文件保存位置</p></li>
</ol>
<h2 id="windows-performance-analysis">Windows Performance Analysis</h2>
<ol type="1">
<li><p>在程序中找到 Windows Performance Analysis 并且打开 <img src="wpa_open.png" /></p></li>
<li><p>File-&gt;Open，打开前面保存的文件 <img src="wpa_file_in1.png" /> <img src="/2020/10/20/Windows%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/wpafileincpu.png" class=""> <img src="/2020/10/20/Windows%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/wpafileincpumem.png" class=""></p></li>
</ol>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>操作系统</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>bcc初体验</title>
    <url>/2024/01/14/bcc%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<h3 id="ubuntu">Ubuntu</h3>
<p>BCC已经打包到Ubuntu的multiverse仓库，名字<code>bpfcc-tools</code>，使用如下命令安装 <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential bpfcc-tools linux-header-$(uname -r) bpftrace</span><br></pre></td></tr></table></figure></p>
<h2 id="使用">使用</h2>
<p>funccount</p>
<p>stackcount</p>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>bpf</tag>
        <tag>trace</tag>
      </tags>
  </entry>
  <entry>
    <title>判断磁盘是ssd还是hdd</title>
    <url>/2024/01/21/%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AFssd%E8%BF%98%E6%98%AFhdd/</url>
    <content><![CDATA[<h2 id="linux">Linux</h2>
<h3 id="通过文件系统">通过文件系统</h3>
<p><code>rotational</code>为1代表可以旋转，为hdd，为0代表不能旋转，为ssd 位置在<code>/sys/block/sd*/queue/rotational</code> <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@dushenda home]# grep ^ /sys/block/sd*/queue/rotational  </span><br><span class="line">/sys/block/sda/queue/rotational:1  </span><br><span class="line">/sys/block/sdb/queue/rotational:1  </span><br><span class="line">/sys/block/sdc/queue/rotational:1</span><br></pre></td></tr></table></figure></p>
<h3 id="lsblk">lsblk</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[root@dushenda home]# lsblk -o name,rota,VENDOR  </span><br><span class="line">NAME ROTA VENDOR  </span><br><span class="line">sda 1 Msft  </span><br><span class="line">sdb 1 Msft  </span><br><span class="line">sdc 1 Msft</span><br></pre></td></tr></table></figure>
<p><code>lsblk</code>可选行信息如下等，通过<code>lsblk --help</code>查看 <img src="/2024/01/21/%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AFssd%E8%BF%98%E6%98%AFhdd/%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AFssd%E8%BF%98%E6%98%AFhdd_20240121.png" class=""> ### fdisk</p>
<h2 id="windows">Windows</h2>
]]></content>
      <tags>
        <tag>存储</tag>
        <tag>磁盘</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式(一)</title>
    <url>/2020/03/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="正则表达式一">正则表达式(一)</h1>
<h2 id="元字符">元字符</h2>
<p>元字符（metacharacters）是按照一定规则限制表示的字符。</p>
<ol type="1">
<li><p><code>.</code>匹配所有字符</p></li>
<li><p><code>[]</code>匹配方括号内的所有字符,这个字符按照原样,即使是具有特殊意义的字符,如',$,&gt;,+'等都是保持字符本意<code>\-</code>除外</p></li>
<li><p><code>[^c1c2]c3c4</code>不匹配'c1,c2',即不带有c1,c2的c3c4字符串</p></li>
<li><p><code>[c1-c2]</code>匹配c1到c2之间的所有字符</p></li>
<li><p><code>\w</code>匹配任意单个数字，字符串或者下划线，等价于<code>[a-zA-Z_1-9]</code>，<code>\w*</code>匹配多个连续字符<code>\w&#123;N&#125;</code>匹配N个连续字符</p></li>
</ol>
<p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">OriginStr = <span class="string">&#x27;spain remain contain aint retain &#x27;</span>;</span><br><span class="line">AnsStr = regexp(OriginStr,<span class="string">&#x27;\w*&#x27;</span>,<span class="string">&#x27;match&#x27;</span>);</span><br><span class="line">PosStr = regexp(OriginStr,<span class="string">&#x27;\w*&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">PosStr =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">7</span>    <span class="number">14</span>    <span class="number">22</span>    <span class="number">27</span>    <span class="number">33</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; AnsStr</span><br><span class="line"></span><br><span class="line">AnsStr =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">5</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;spain&#x27;</span>&#125;    &#123;<span class="string">&#x27;remain&#x27;</span>&#125;    &#123;<span class="string">&#x27;contain&#x27;</span>&#125;    &#123;<span class="string">&#x27;aint&#x27;</span>&#125;    &#123;<span class="string">&#x27;retain&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，这个得到的是所有的匹配。而且对于语句<code>regexp(OriginStr,MatchStr,'option')</code>，如果不加<code>option</code>的话，就是得到匹配的一个字符的位置，如果加上<code>option</code>为<code>match</code>的话，就是得到匹配的值。</p>
<p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">OriginStr = <span class="string">&#x27;spain remain contain aint retain &#x27;</span>;</span><br><span class="line">AnsStr = regexp(OriginStr,<span class="string">&#x27;\w* ain&#x27;</span>,<span class="string">&#x27;match&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; AnsStr</span><br><span class="line"></span><br><span class="line">AnsStr =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">1</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;contain ain&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，AnsStr输出的<code>contain ain</code>，即匹配<code>ain</code>的前缀都包括的一串字符串。</p>
<ol start="6" type="1">
<li><code>\W</code>是匹配<code>\w</code>的补集，<code>\W*</code>跟<code>\w*</code>含义一致<code>\W&#123;N&#125;</code>和<code>\w&#123;N&#125;</code>含义一致。</li>
<li><code>\s</code>等价于<code>[ \f\t\r\n\v]</code>，匹配空白字符</li>
<li><code>\S</code>等价于<code>[^\f\t\r\n\v]</code>匹配非空白字符 tips：小写字母和大写字母的含义往往是补集的关系</li>
<li><code>\d</code>匹配单个十进制数<code>\d*</code>匹配多个 tips<code>*</code>匹配多个</li>
<li><code>D</code>是<code>\d</code>的补集，即匹配除了数字以外的所有字符，等价于<code>[^\d]</code></li>
<li><code>\oN</code> 和<code>\o&#123;N&#125;</code>匹配八进制数N</li>
<li><code>\xN</code>匹配<code>\x&#123;N&#125;</code>匹配十六进制数N</li>
</ol>
<h2 id="表达式">表达式</h2>
<p><code>expr</code>，表达式，这个也就是对于一串字符串，即<code>xp</code>=<code>x&amp;p</code>，<code>[xp]</code>=<code>x|p</code>，即不加<code>[]</code>是且关系，加了<code>[]</code>是或关系，表达式是限定符前面构成的所有字符构成的匹配字符串。</p>
<h2 id="转义字符">转义字符</h2>
<p><code>char(10)</code>=<code>\n</code>，即回车。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">str = [<span class="string">&#x27;some&#x27;</span>,char(<span class="number">10</span>),<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">regexp(str,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">regexp(str,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;match&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">str =</span><br><span class="line"> <span class="string">&#x27;some</span></span><br><span class="line"><span class="string">  text&#x27;</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line">  <span class="number">1</span>×<span class="number">1</span> cell 数组</span><br><span class="line"> &#123;<span class="string">&#x27;?&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">转义字符</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>\a</code></td>
<td style="text-align: center;">警告</td>
<td style="text-align: center;"><code>char(7)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>\b</code></td>
<td style="text-align: center;">退格</td>
<td style="text-align: center;"><code>char(8)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>\f</code></td>
<td style="text-align: center;">换页符</td>
<td style="text-align: center;"><code>char(12)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>\n</code></td>
<td style="text-align: center;">换行符</td>
<td style="text-align: center;"><code>char(10)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>\r</code></td>
<td style="text-align: center;">回车</td>
<td style="text-align: center;"><code>char(13)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>\t</code></td>
<td style="text-align: center;">水平制表符</td>
<td style="text-align: center;"><code>char(9)</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>\v</code></td>
<td style="text-align: center;">垂直制表符</td>
<td style="text-align: center;"><code>char(11)</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>\char</code></td>
<td style="text-align: center;">任意特殊字符</td>
<td style="text-align: center;">-</td>
</tr>
</tbody>
</table>
<h2 id="限定符">限定符</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">限定符</th>
<th style="text-align: center;">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">expr *</td>
<td style="text-align: center;">多次expr：0~∞</td>
</tr>
<tr class="even">
<td style="text-align: center;">expr ?</td>
<td style="text-align: center;">一次expr：0~1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">expr +</td>
<td style="text-align: center;">一次到多次expr：1~∞</td>
</tr>
<tr class="even">
<td style="text-align: center;">expr{m,n}</td>
<td style="text-align: center;">m到n次expr：m~n</td>
</tr>
<tr class="odd">
<td style="text-align: center;">expr{m,}</td>
<td style="text-align: center;">大于等于m次expr：m~∞</td>
</tr>
<tr class="even">
<td style="text-align: center;">expr{m}</td>
<td style="text-align: center;">m次expr：=m</td>
</tr>
</tbody>
</table>
<ul>
<li><p><code>expr*</code>代表匹配0次或者多次，与任意多个字符匹配</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;12--asdf--45dfg&#x27;</span>,<span class="string">&#x27;\w*&#x27;</span>,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">3</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;12&#x27;</span>&#125;    &#123;<span class="string">&#x27;asdf&#x27;</span>&#125;    &#123;<span class="string">&#x27;45dfg&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>expr?</code>代表至多匹配1次</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;12--asdf--45dfg&#x27;</span>,<span class="string">&#x27;\w?&#x27;</span>,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">11</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;1&#x27;</span>&#125;    &#123;<span class="string">&#x27;2&#x27;</span>&#125;    &#123;<span class="string">&#x27;a&#x27;</span>&#125;    &#123;<span class="string">&#x27;s&#x27;</span>&#125;    &#123;<span class="string">&#x27;d&#x27;</span>&#125;    &#123;<span class="string">&#x27;f&#x27;</span>&#125;    &#123;<span class="string">&#x27;4&#x27;</span>&#125;    &#123;<span class="string">&#x27;5&#x27;</span>&#125;    &#123;<span class="string">&#x27;d&#x27;</span>&#125;    &#123;<span class="string">&#x27;f&#x27;</span>&#125;    &#123;<span class="string">&#x27;g&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>expr+</code>匹配一次或者连续多次</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;12--asdf--45dfg&#x27;</span>,<span class="string">&#x27;\w+&#x27;</span>,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">3</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;12&#x27;</span>&#125;    &#123;<span class="string">&#x27;asdf&#x27;</span>&#125;    &#123;<span class="string">&#x27;45dfg&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>expr&#123;m,n&#125;</code>匹配m~n次，<code>&#123;0,1&#125;</code>=<code>'?'</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;12--asdf--45dfg&#x27;</span>,<span class="string">&#x27;\w&#123;1,3&#125;&#x27;</span>,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">5</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;12&#x27;</span>&#125;    &#123;<span class="string">&#x27;asd&#x27;</span>&#125;    &#123;<span class="string">&#x27;f&#x27;</span>&#125;    &#123;<span class="string">&#x27;45d&#x27;</span>&#125;    &#123;<span class="string">&#x27;fg&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>expr&#123;m,&#125;</code>匹配≥m次，<code>&#123;0,&#125;</code>=<code>'*'</code>;<code>&#123;1,&#125;</code>=<code>'+'</code></p></li>
<li><p><code>expr&#123;n&#125;</code>匹配n次，<code>n</code>=<code>&#123;n,n&#125;</code></p></li>
</ul>
<h2 id="模式">模式</h2>
<p>表达式+限定词=模式</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 33%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">表达式+限定词</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">示例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">expr q</td>
<td style="text-align: center;">积极表达式：与尽可能多的expr匹配</td>
<td style="text-align: center;">给定文本 <code>&lt;tr&gt;&lt;td&gt;&lt;p&gt;text&lt;/p&gt;&lt;/td&gt;</code>，表达式 <code>&lt;/?t.*&gt;</code>与介于 <code>&lt;tr</code> 和 <code>/td&gt;</code> 之间的所有字符匹配：</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;tr&gt;&lt;td&gt;&lt;p&gt;text&lt;/p&gt;&lt;/td&gt;</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">expr q？</td>
<td style="text-align: center;">消极表达式：与所需尽可能少的expr匹配</td>
<td style="text-align: center;">给定文本<code>&lt;tr&gt;&lt;td&gt;&lt;p&gt;text&lt;/p&gt;&lt;/td&gt;</code>，表达式 <code>&lt;/?t.*?&gt;</code> 在第一次出现右尖括号 (&gt;) 时结束每个匹配项：</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code> <code>&lt;/td&gt;</code></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">expr q+</td>
<td style="text-align: center;">主动表达式：最大程度的匹配</td>
<td style="text-align: center;">给定文本 <code>&lt;tr&gt;&lt;td&gt;&lt;p&gt;text&lt;/p&gt;&lt;/td&gt;</code>，表达式 <code>&lt;/?t.*+&gt;</code> 不返回任何匹配项，这是因为右尖括号是使用 <code>.*</code> 捕获的且不进行重新扫描。<br />空<code>&#123;&#125;</code></td>
</tr>
</tbody>
</table>
<ul>
<li><p>积极表达式：碰到符合条件的，就从开始处匹配到结尾，格式为<code>expr q</code>，q为任意限定符。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;&lt;txr&gt;&lt;txd&gt;&lt;p&gt;text&lt;/p&gt;&lt;/tpd&gt;&#x27;</span>, <span class="string">&#x27;&lt;/?t.*&gt;&#x27;</span> ,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">1</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;&lt;txr&gt;&lt;txd&gt;&lt;p&gt;text&lt;/p&gt;&lt;/tpd&gt;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>消极模式：只要匹配就立即停止搜索，进行下一次匹配，格式为<code>expr q?</code>如</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;&lt;txr&gt;&lt;txd&gt;&lt;p&gt;text&lt;/p&gt;&lt;/tpd&gt;&#x27;</span>, <span class="string">&#x27;&lt;/?t.*?&gt;&#x27;</span> ,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">3</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;&lt;txr&gt;&#x27;</span>&#125;    &#123;<span class="string">&#x27;&lt;txd&gt;&#x27;</span>&#125;    &#123;<span class="string">&#x27;&lt;/tpd&gt;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>主动模式：最大程度的匹配，格式为<code>expr q+</code>，如</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; regexp(<span class="string">&#x27;&lt;txr&gt;&lt;txd&gt;&lt;p&gt;text&lt;/p&gt;&lt;/tpd&gt;&#x27;</span>, <span class="string">&#x27;&lt;/?t.*+&gt;&#x27;</span> ,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  空的 <span class="number">0</span>×<span class="number">0</span> cell 数组</span><br><span class="line">  </span><br><span class="line">&gt;&gt; regexp(<span class="string">&#x27;&lt;txr&gt;&lt;txd&gt;&lt;p&gt;text&lt;/p&gt;&lt;/tpd&gt;&#x27;</span>, <span class="string">&#x27;&lt;t.*+&#x27;</span> ,<span class="string">&#x27;match&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>×<span class="number">1</span> cell 数组</span><br><span class="line"></span><br><span class="line">    &#123;<span class="string">&#x27;&lt;txr&gt;&lt;txd&gt;&lt;p&gt;text&lt;/p&gt;&lt;/tpd&gt;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>主动模式较难理解，我觉得可以这样看，他就就是直接把检测到开头的<code>&lt;</code>字符就开始匹配，知道匹配到无可匹配也就是<code>&gt;</code>为止，这时候才到达匹配模式里面的<code>?</code>部分，所以如果<code>?</code>后面有任何的字符，这个匹配出来的都是空字符串。</p>
<p>这个匹配模式跟匹配出来的结果就是两个，一个是最后一位是<code>？</code>,这时候等价于<code>expr *</code>，最后一位不是<code>?</code>，这时候结果是空字符串。</p>
<h2 id="操作符的优先级">操作符的优先级</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">操作符</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">\</td>
<td style="text-align: center;">转义符</td>
</tr>
<tr class="even">
<td style="text-align: center;">(), (?:), (?=), []</td>
<td style="text-align: center;">圆括号和方括号</td>
</tr>
<tr class="odd">
<td style="text-align: center;">*, +, ?, {n}, {n,}, {n,m}</td>
<td style="text-align: center;">限定符</td>
</tr>
<tr class="even">
<td style="text-align: center;">^, $, </td>
<td style="text-align: center;">位置和顺序</td>
</tr>
<tr class="odd">
<td style="text-align: center;">|</td>
<td style="text-align: center;">“或”操作</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>正则</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>现代操作系统-内存管理1</title>
    <url>/2018/11/11/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%861/</url>
    <content><![CDATA[<h1 id="现代操作系统-内存管理1">现代操作系统-内存管理1</h1>
<h2 id="空闲内存的管理">空闲内存的管理</h2>
<p>动态分配内存的时候（在进程需要动态扩张的时候），需要操作系统对其进行管理。</p>
<img src="/2018/11/11/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%861/%E5%86%85%E5%AD%98%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%861.jpg" class="">
<ul>
<li><p>使用位图的存储器管理</p>
<p>从上图可以看出，在内存中运行有A，B，C，D，E五个进程，阴影部分为空闲区。b)是对应的位图，首先堆内存进行分段，1表示有进程在运行，0表示处于空闲区。c)是空闲区链表的存储方式，其中P表示有进程在运行，0，5这样的数字说的是运行的段是从0到5。 使用位图存储器就需要合适的选取刻度值，即对于整个内存的存储，如果刻度选的过小，就会导致位存储器过大，那么在查找和存储就会造成困扰。</p></li>
<li><p>使用链表的存储器管理 如果使用一种链表式的存储，如c)所示，那么会显著减小存储，不这是一个单向链表，在查找的时候会比较慢。在进程状态改变的时候（如从内存中被导出等）就需要进行相应的链表操作。</p></li>
</ul>
<h2 id="覆盖与交换">覆盖与交换</h2>
<p>覆盖与交换技术都是因为程序实际的需求的内存大小大于物理内存的大小产生的解决方案。他们都是与外存（如磁盘、硬盘等）进行程序与数据的交换。但是区别是交换是由操作系统完成的，交换的最小单元是程序，覆盖是由编程语言或者程序员完成的，导入导出的最小单元是程序中的模块，需要有相应的运行时支持。所以可以发现，交换的单个容量相对较大，并且不需要程序员过多的操心，覆盖的单个的容量相对较小，以程序的模块为单位。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">技术</th>
<th style="text-align: center;">优点</th>
<th style="text-align: center;">缺点</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">交换技术</td>
<td style="text-align: center;">由操作系统完成，不需要程序员操心，自动化</td>
<td style="text-align: center;">交换力度过大，可能导致交换产生的开销过大</td>
</tr>
<tr class="even">
<td style="text-align: center;">覆盖技术</td>
<td style="text-align: center;">交换力度小，产生的开销小</td>
<td style="text-align: center;">由程序员完成，不方便且易出错</td>
</tr>
</tbody>
</table>
<h3 id="交换技术">交换技术</h3>
<h4 id="交换过程">交换过程</h4>
<img src="/2018/11/11/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%861/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF.png" class="">
<p>上图所示就是操作系统的内存交换过程，首先知道交换技术是进程在内存和外存之间的导入导出操作，主要原因是内存的容量不够，其中的A，B，C，D均为进程。</p>
<ol type="1">
<li>运行进程A，进程A的程序和数据从头开始放</li>
<li>之后运行进程B，此时进程A处于就绪状态，依旧存在于内存之中</li>
<li>加载C进程，和前面的方法类似</li>
<li>将进程A导出到外存，留下A部分的空闲区，也叫做洞</li>
<li>加载D进程，这时候还是从头开始检测，发现空闲区可以容纳进程D</li>
<li>杀死进程B</li>
<li>从外存导入进程A，此时是空闲区刚好容纳A进程的大小</li>
</ol>
<h4 id="内存紧缩">内存紧缩</h4>
<p>上述就是交换过程，其中有一个问题，那就是一个进程被导出之后留下了空闲区，空闲区的存在可能容纳不了下一个加载进程的大小。</p>
<img src="/2018/11/11/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%861/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%B4%A7%E7%BC%A9.png" class="">
<p>这时候，就需要将进程B与进程A挪一挪，将其变成下面的状态。</p>
<img src="/2018/11/11/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%861/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%B4%A7%E7%BC%A92.png" class="">
<p>这样的拷贝移动的过程称为内存紧缩。当然这种技术很不错，但是有一个问题，那就是开销，之前说到交换技术的最大的缺点是开销问题，开销是因为进程过于庞大，频繁移动他们需要很大的资源。</p>
<blockquote>
<p>例如，一台16GB内存的计算机可以每8ns复制8个字节，那么其紧缩全部内存需要花费16s</p>
</blockquote>
<p>这其实是很长的时间了，可以想象，经常使用内存紧缩是不合适的。</p>
<h4 id="动态分配">动态分配</h4>
<p>前面说到的进程好像就是一个进程导入内存就可以运行了，但是在很多情况下，进程需要接收输入，并且会进行一些处理，如果是数据增长，那么解决方法较为简单，因为数据位于数据段，可以直接由编程语言从堆中分配内存，还有一种情况是进程空间需要扩大，那么就需要操作系统在导入进程的时候预留一部分空间给进程，以应对其扩张。分配的大小是由操作系统需要的大小分配，即进程中所带的信息决定的，当其意外的超出了规定的大小并且磁盘上也没有多余的交换空间之后，那么该进程就会被挂起直到有一些空闲的空间。</p>
<h3 id="覆盖技术">覆盖技术</h3>
<blockquote>
<p>一个典型的SATA磁盘的峰值传输率高达每秒几百兆，这就意味着需要好几秒才能换出或者换入一个1GB的程序。</p>
</blockquote>
<p>所以交换技术的开销问题确实是一个很致命的点。所以就出现了将程序分割，称为模块，将模块进行交换的技术，即覆盖技术</p>
<h2 id="虚拟内存">虚拟内存</h2>
<p>从上面的交换技术和覆盖技术中可以看出，他们各自互补各自的优缺点。如果有一种技术，能够像覆盖那样导入导出小的模块，又能像交换那样由操作系统完成就优势互补了，这就是虚拟内存技术产生的原因了。</p>
<p>虚拟内存的思想是和覆盖类似，只不过将模块变成了页，页是对于程序的等大小的划分，这些页被映射到物理内存，并且由硬件直接运行。</p>
<blockquote>
<p>从某个角度来说，虚拟内存是对基址寄存器和界限寄存器的一种综合。</p>
</blockquote>
<p>由于涉及操作系统对页的自动操作，所以对于页的讨论还很多，留在下一篇再说。</p>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>现代操作系统-进程与线程16~30</title>
    <url>/2018/12/28/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B16~30/</url>
    <content><![CDATA[<blockquote>
<p>以下答案均不代表正确答案，仅代表作者观点</p>
</blockquote>
<ul>
<li><h5 id="线程可以被时钟中断抢占吗如果可以在什么情形下可以如果不可以为什么不可以">16.线程可以被时钟中断抢占吗？如果可以，在什么情形下可以？如果不可以，为什么不可以？</h5>
<p>用户级线程不能被时钟剥夺，除非整个进程的时间片用完。内核级线程可以单独地被剥夺。在后一种情况下，如果线程运行过久，时钟将中断该当前进程，因而当前线程也被中断。内核可以自由地从同一个进程中选取其他线程运行。</p></li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>现代操作系统-进程与线程1~15</title>
    <url>/2018/12/20/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1~15/</url>
    <content><![CDATA[<h1 id="现代操作系统-进程与线程115">现代操作系统-进程与线程1~15</h1>
<blockquote>
<p>以下答案都是作者作答，不代表正确答案，望周知。</p>
</blockquote>
<hr />
<ol type="1">
<li><h5 id="如图对于每一个进程都有四种状态照理应该有6种切换方式但是为什么只有四种为什么另外两种不行">如图，对于每一个进程都有四种状态，照理应该有6种切换方式，但是为什么只有四种，为什么另外两种不行？</h5></li>
</ol>
<img src="/2018/12/20/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1~15/1.bmp" class="" title="img">
<p>答：<strong>从逻辑上来说，就绪态和运行态是类似的</strong>，唯一的不同是在于是否得到CPU资源。如果从就绪态可以转换到阻塞态，那么出现的事件也就是需要等待输入，但是，就绪态就是因为已经出现了有效的输入只不过没有得到CPU资源而产生的等待，所以不可能出现就绪态向阻塞态的转变；从阻塞态到运行态是得到了有效的输入和CPU计算资源才能完成的转化，但是得到有效的输入肯定会位于得到资源的前面，因为没有有效的输入都不能进行计算，而当出现有效输入的时候，就已经是就绪态了，即使有效输入和CPU资源获取的间隔很小，但是始终存在，所以肯定会经过就绪态。</p>
<span id="more"></span>
<ol start="2" type="1">
<li><h5 id="假设要设计一种先进的计算机体系结构它使用硬件替代中断来完成进程切换进程切换时cpu需要哪些信息请描述用硬件完成进程切换的工作过程">假设要设计一种先进的计算机体系结构，它使用硬件替代中断来完成进程切换。进程切换时CPU需要哪些信息？请描述用硬件完成进程切换的工作过程。</h5></li>
</ol>
<p>首先需要知道，进程的管理是使用进程表来实现的。操作系统维护着一张表格，里面存储着各个进程的信息，是用结构数组实现的，每一个进程都占一个进程表项。所以管理进程也就是管理进程表，如果用硬件完成切换，首先需要有一个包含当前正在运行的进程的进程表项的指针，当当前进程从运行态转换到就绪态或者阻塞态的时候，将这部分信息存入进程表中，之后调度程序再加载下一个进程，并且更新该寄存器的指针值。P.S. 进程表和进程表项大概是这样的:</p>
<table>
<thead>
<tr class="header">
<th>进程表</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>进程1</td>
</tr>
<tr class="even">
<td>进程2</td>
</tr>
<tr class="odd">
<td>进程3</td>
</tr>
</tbody>
</table>
<p>进程表项：</p>
<table>
<thead>
<tr class="header">
<th>进程管理</th>
<th>存储管理</th>
<th>文件目录</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>寄存器</td>
<td>正文段指针</td>
<td>根目录</td>
</tr>
<tr class="even">
<td>程序计数器</td>
<td>数据段指针</td>
<td>工作目录</td>
</tr>
<tr class="odd">
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<ol start="3" type="1">
<li><h5 id="当代计算机中为什么中断处理程序至少有一部分的是由汇编语言写的">当代计算机中，为什么中断处理程序至少有一部分的是由汇编语言写的？</h5></li>
</ol>
<p>答：因为要有部分功能需要直接访问硬件。</p>
<ol start="4" type="1">
<li><h5 id="中断或系统调用把控制权交给操作系统的时候为什么通常会用到与被中断进程的栈分离的内核栈">中断或系统调用把控制权交给操作系统的时候，为什么通常会用到与被中断进程的栈分离的内核栈？</h5></li>
</ol>
<p>答：这个问题的实质应该是问的为什么内核使用单独的堆栈而不是使用中断进程的堆栈。中断是由外部的用户进程产生的，用户进程和内核进程的重要程度和安全要求不一样，首先用户进程的堆栈有可能崩溃，如果将内核栈放在其中，会导致操作系统的崩溃，并且用户进程的堆栈是可以为用户读写的，如果将内核堆栈放在其中，则计算机系统可能会被某些恶意程序所劫持。</p>
<ol start="5" type="1">
<li><h5 id="一个计算机系统的内存有足够的空间容纳5个程序这些程序有一半的时间处于等待io的空闲状态请问cpu时间浪费的比例是多少">一个计算机系统的内存有足够的空间容纳5个程序。这些程序有一半的时间处于等待I/O的空闲状态。请问CPU时间浪费的比例是多少？</h5></li>
</ol>
<p>答：一个程序空闲的概率为<span class="math inline">\(p=\frac{1}{2}\)</span>，要等到五个程序都空闲时候，CPU才不做任何计算，这时候处于空闲状态，这五个进程相互独立，则CPU的空闲（即浪费时间）为<span class="math inline">\(p^5=\frac{1}{2^5}=\frac{1}{32}\)</span>。</p>
<hr />
<ol start="6" type="1">
<li><h5 id="一个计算机的ram有4gb其中操作系统占512mb所有进程占256mb为了简化计算并且特征相同要使cpu利用率达到99最大io等待为多少">一个计算机的RAM有4GB，其中操作系统占512MB，。所有进程占256MB（为了简化计算）并且特征相同。要使CPU利用率达到99%，最大I/O等待为多少？</h5></li>
</ol>
<p>答：首先要看懂所有进程占256MB这句话的意思，这是说每个进程都是256MB并且一样。先计算在4G内存下最多存在的进程数目<span class="math inline">\(m=\frac{4GB-512MB}{256MB}=14\)</span>，说明最多有14个进程。设每个进程的I/O等待为<span class="math inline">\(p\)</span>，则CPU的空闲率为<span class="math inline">\(p^{14}\)</span>，并且要求占用率<span class="math inline">\(\geq99\%\)</span>，所以有等式</p>
<p><span class="math display">\[
1-p^{14}\geq99\%
\]</span></p>
<p>计算得到<span class="math inline">\(p\leq71.9\%\)</span>。</p>
<ol start="7" type="1">
<li><h5 id="如果多个作业能够并行运行会比他们顺序执行完成的快假设有两个作业同时开始执行每个需要20min的cpu时间如果顺序执行那么完成最后一个作业需要多长时间如果并行执行又需要多长时间假设io等待占50">如果多个作业能够并行运行，会比他们顺序执行完成的快。假设有两个作业同时开始执行，每个需要20min的CPU时间。如果顺序执行，那么完成最后一个作业需要多长时间？如果并行执行，又需要多长时间？假设I/O等待占50%。</h5></li>
</ol>
<p>答：</p>
<img src="/2018/12/20/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1~15/2.bmp" class="" title="img">
<p>如图所示，如果顺序执行，那么每个进程在输入需要10min，在输出需要10min，所以进行一个就需要40min的时间，共需要80min。</p>
<p>如果是并行执行，那么每个进程得到的CPU的利用率为<span class="math inline">\(\frac{1-p^2}{2}=0.375\)</span>，每个进程本来在CPU利用率为1的时候需要20min，现在在CPU利用率为0.375的情况下需要时间为<span class="math inline">\(\frac{20\min}{0.375}\approx53.3\min\)</span>，由于是并行执行，取其最大的即可，即<span class="math inline">\(\max\{T_1,T_2,...T_n\}\)</span>，在这里两个进程的时间一样，所以运行的时间为53.3min。</p>
<ol start="8" type="1">
<li><h5 id="考虑一个6级多道程序系统内存中可同时容纳6个程序假设每个进程的io等待占40那么cpu的利用率是多少">考虑一个6级多道程序系统（内存中可同时容纳6个程序）。假设每个进程的I/O等待占40%，那么CPU的利用率是多少？</h5></li>
</ol>
<p>答： <span class="math display">\[
CPU_总=1-p^6=1-0.004096=0.995904,CPU_{每个}\frac{0.995904}{6}=0.16598
\]</span></p>
<ol start="9" type="1">
<li><h5 id="假设要从互联网上下载一个2gb大小的文件文件的内容可从一组镜像服务器获得每个服务器可以传输文件的一部分假设每个传输请求给定起始字节和结束字节如何利用多线程优化下载时间">假设要从互联网上下载一个2GB大小的文件，文件的内容可从一组镜像服务器获得，每个服务器可以传输文件的一部分。假设每个传输请求给定起始字节和结束字节。如何利用多线程优化下载时间？</h5></li>
</ol>
<p>答：客户机进程可以创建单独的线程；每个线程可以从一个镜像服务器获取文件的不同部分。这有助于减少停机时间。当然，所有线程都共享一个网络链接。当线程数量变得非常大时，此链接可能成为瓶颈。</p>
<ol start="10" type="1">
<li><h5 id="为什么下图的模型不适合用于内存中使用高速缓存的文件服务器每个进程可以有自己的高速缓存吗">为什么下图的模型不适合用于内存中使用高速缓存的文件服务器？每个进程可以有自己的高速缓存吗？</h5></li>
</ol>
<img src="/2018/12/20/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1~15/3.jpg" class="">
<p>答：要牢记进程和线程在很多方面是类似的，线程可以理解为轻量级进程。但是最重要的区别是<strong>进程共享存储空间</strong>，共享存储空间说明他们操作的文件是一样的，所以将文件存于高速缓存是可以的。但是进程不同，操作的文件是不一样的，如果将其文件存于同一个缓存中，很可能前一个进程的文件就会被后一个进程的文件所覆盖。</p>
<hr />
<ol start="11" type="1">
<li><h5 id="当一个多线程进程创建子进程时如果子进程复制父进程的所有线程就会出现问题假如父进程中有一个线程在等待键盘输入那么当子进程复制父进程的时候那么也会复制一个正在等待的等待键盘输入的子进程那么当键盘输入的时候父进程和子进程都会各有一个这种问题在单线程进程中也会发生吗">当一个多线程进程创建子进程时，如果子进程复制父进程的所有线程，就会出现问题：假如父进程中有一个线程在等待键盘输入，那么当子进程复制父进程的时候，那么也会复制一个正在等待的等待键盘输入的子进程，那么当键盘输入的时候，父进程和子进程都会各有一个。这种问题在单线程进程中也会发生吗？</h5></li>
</ol>
<p>答：不会。如果单线程进程在键盘上阻塞，就不能创建子进程。（而多线程进程在一个线程阻塞时可以运行另一个线程，整个进程不会因此被阻塞。）</p>
<ol start="12" type="1">
<li><h5 id="下图给了一个多线程web服务器如果读取文件只能使用阻塞的read系统调用那么web服务器应该使用用户级线程还是内核级线程">下图给了一个多线程Web服务器。如果读取文件只能使用阻塞的read系统调用，那么Web服务器应该使用用户级线程还是内核级线程？</h5></li>
</ol>
<img src="/2018/12/20/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1~15/4.jpg" class="">
<p>答：当工作线程从磁盘读取Web页时，它就会被阻塞。如果使用用户级线程，该动作将阻塞整个进程，而破坏多线程的价值。这就是使用内核线程的原因：某些线程的阻塞不会影响到其他线程。</p>
<ol start="13" type="1">
<li><h5 id="在本章中我们介绍了多线程web服务器说明它比单线程服务器和有限状态机服务器更好的原因存在单线程服务器更好一些的情形吗请举例">在本章中，我们介绍了多线程Web服务器，说明它比单线程服务器和有限状态机服务器更好的原因。存在单线程服务器更好一些的情形吗？请举例。</h5></li>
</ol>
<table>
<thead>
<tr class="header">
<th>模型</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>多线程</td>
<td>并行性、阻塞系统调用</td>
</tr>
<tr class="even">
<td>单线程进程</td>
<td>无并行性、阻塞系统调用</td>
</tr>
<tr class="odd">
<td>有限状态机</td>
<td>并行性、非阻塞系统调用、中断</td>
</tr>
</tbody>
</table>
<p>答：多线程，即可以并行执行多种工作，CPU的利用率高，而单线程进程和有限状态机在一个时刻只能执行一种工作，在切换线程的时候会造成I/O等待。比如有数据需要从web服务器输入输出，如果是多线程，那么可以在一个进程的情况下，一个线程实现数据的读入，一个处理线程和一个输出线程，这样相当于一个人打三份工，虽然累，但是不需要来回切换，一直在做。如果是单线程，那么需要不断切换，相当于几个人干不同的活，但是在交接的时候需要等待时间。这时候就没有在工作 。CPU就闲置了。</p>
<ol start="14" type="1">
<li><h5 id="既然计算机中只有一套寄存器为什么在图中的寄存器集合是按每个线程中列出而不是按每个进程列出">既然计算机中只有一套寄存器，为什么在图中的寄存器集合是按每个线程中列出而不是按每个进程列出。</h5></li>
</ol>
<img src="/2018/12/20/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B1~15/5.jpg" class="">
<p>答：当一个线程停止时，它在寄存器中有值。它们必须被保存，就像进程停止时，必须保存寄存器。多线程和多进程没有什么不同，所以每个线程需要自己的寄存器保存区。</p>
<ol start="15" type="1">
<li><h5 id="在没有时钟中断的系统中一个线程放弃cpu后可能再也不会获得cpu资源那么为什么线程还要通过调用thread_yield自愿放弃cpu">在没有时钟中断的系统中，一个线程放弃CPU后可能再也不会获得CPU资源，那么为什么线程还要通过调用thread_yield自愿放弃CPU？</h5></li>
</ol>
<p>答：进程中的线程合作。它们彼此不敌对。如果应用程序需要阻塞以运行得更好，那么一个线程可以调用thread_yield自愿放弃CPU。毕竟，同一个进程中的线程的全部代码通常是一个程序员写的。</p>
<hr />
]]></content>
      <tags>
        <tag>OS</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>立体角</title>
    <url>/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/</url>
    <content><![CDATA[<h1 id="立体角">立体角</h1>
<p>在谈立体角之前，我们先来复习一下球坐标及其面积分。</p>
<h2 id="球面坐标系及积分">球面坐标系及积分</h2>
<h3 id="球坐标系">球坐标系</h3>
<img src="/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/sphere1.png" class="" title="sphere1">
<p>如上图所示，就是一个典型的球坐标系统，在坐标系中的每一点都可以使用<span class="math inline">\((\rho,\phi,\theta)\)</span>来描述，与笛卡尔坐标系之间的转化如下</p>
<p><span class="math display">\[
x=\rho\sin\phi\cos\theta\\
y=\rho\sin\phi\sin\theta\\
z=\cos\phi
\]</span></p>
<p>上式就是球坐标和笛卡尔坐标之间的转化，这个转化很容从图上看出来。</p>
<h3 id="球面积分">球面积分</h3>
<img src="/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/sphere3.png" class="" title="sphere2">
<p>从上图可以看出，面积的微元，长为<span class="math inline">\(\rho d\phi\)</span>，因为这个方向上的长度为<span class="math inline">\(\rho\phi\)</span>，所以微元为<span class="math inline">\(\rho d\phi\)</span>；宽为<span class="math inline">\(\rho\sin\phi d\theta\)</span>，这是因为首先要投影到<span class="math inline">\(xy\)</span>平面，在这个平面上的长度为<span class="math inline">\(\rho \sin\phi\)</span>，从图上可以看出，这个长度也就是宽，所以微元的宽为<span class="math inline">\(\rho \sin\phi d\phi\)</span>。所以球面积分的微元面积<span class="math inline">\(\rho^2 \sin\phi d\phi d\theta​\)</span>。</p>
<ul>
<li>来看几个例子
<ol type="1">
<li><p>球的表面积计算</p>
<img src="/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/sphere4.png" class="" title="shpere4">
<p>表面积的求法，就是对于微元而言，<span class="math inline">\(\phi\)</span>的取值为<span class="math inline">\(0\)</span>到<span class="math inline">\(2\pi\)</span>，<span class="math inline">\(\theta\)</span>的取值也是<span class="math inline">\(0\)</span>到<span class="math inline">\(2\pi\)</span>。<span class="math inline">\(\rho\)</span>就是球的半径。 所以微元<span class="math inline">\(dS=\rho^2\sin\phi d\phi d\theta\)</span>。表面积的求法如下： <span class="math display">\[
S=\int_0^{2\pi}d\theta\int_0^{2\pi}\rho^2\sin\phi d\phi
\]</span> <span class="math inline">\(\rightarrow 2\pi\rho^2(-\cos\theta)|^{2\pi}_0=4\pi\rho^2​\)</span>，这就是很熟悉的圆表面积计算公式了。<span class="math inline">\(S_圆=4\pi r^2​\)</span>，这个公式应该在高中时候就经常使用了。</p></li>
<li><p>球帽表面积的计算 <img src="/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/1.png" class="" title="shpere5"></p></li>
</ol>
蓝色部分就叫做球帽，计算这一部分的表面积。首先面积分的微元跟之前的一样，为<span class="math inline">\(dS=\rho^2\sin\theta\phi d\phi d\theta\)</span>，不过这个图上的角度标的不太一样，那么改变一下，把<span class="math inline">\(xy\)</span>平面的角度设为<span class="math inline">\(\phi\)</span>，把与<span class="math inline">\(z\)</span>轴之间的夹角设为<span class="math inline">\(\alpha\)</span>。很容易从图上看出，<span class="math inline">\(\phi\in[0,2\phi],\alpha\in[0,\theta]\)</span>，这边要注意这个<span class="math inline">\(\alpha\)</span>，它的取值是从<span class="math inline">\(z\)</span>轴为<span class="math inline">\(0\)</span>，到<span class="math inline">\(xy\)</span>平面为<span class="math inline">\(\frac{\pi}{2}\)</span>。所以其表面积为</li>
</ul>
<p><span class="math display">\[
S=\int_0^{2\pi}d\phi\int_0^{\theta}r^2\sin\theta d\theta
\]</span> ​ <span class="math inline">\(\rightarrow 2\pi r^2(-\cos\theta)|^{\theta}_0=2\pi r^2(1-\cos\theta)=2\pi r^2(1-\frac{r-h}{r})=2\pi rh​\)</span>，如果<span class="math inline">\(h=r​\)</span>，那么求的是半球的面积， 面积<span class="math inline">\(S=2\pi r^2​\)</span>，跟之前的球表面积也对上了。</p>
<hr />
<p>球面坐标复习到这儿，下面就进入正题了。 ## 立体角</p>
<h3 id="角度">角度</h3>
<p>在介绍立体角之前，也先做个铺垫，讲一下角度。</p>
<img src="/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/angle1.png" class="">
<p>如上图所示，平面角，简称角度定义为圆的弧长与半径之间的比值，单位为弧度(<span class="math inline">\(rad\)</span>)。 <span class="math display">\[
\theta=\frac{l}{r}
\]</span></p>
<h3 id="立体角-1">立体角</h3>
<p>参考平面角的定义，立体角的定义为表面积与半径平方的比值，即</p>
<p><span class="math display">\[
\Omega=\frac{S}{r^2}
\]</span></p>
<p>反映的是从该点出发，向球面区域张成的视野大小，是平面角的三维扩展。</p>
<img src="/2019/10/14/%E7%AB%8B%E4%BD%93%E8%A7%92/angle2.jpg" class="">
<p>接上面计算的表面积的例子。</p>
<ol type="1">
<li>球的立体角 球的表面积为<span class="math inline">\(S=4\pi r^2​\)</span>，球的半径为<span class="math inline">\(r​\)</span>，立体角为<span class="math inline">\(\Omega=\frac{S}{r^2}=4\pi​\)</span>，这也是最大的立体角。</li>
<li>球帽的立体角 球帽的表面积为<span class="math inline">\(2\pi rh\)</span>，半径为<span class="math inline">\(r\)</span>，立体角为<span class="math inline">\(\Omega=\frac{S}{r^2}=2\pi h\)</span>。</li>
</ol>
<p>需要注意的是，立体角计算也可以理解为是所形成表面在以原点为圆心的球的球面上的投影除以半径的平方。因为要计算的立体角表面不一定是球面的一部分，所以需要先投影到球面再进行计算。</p>
]]></content>
      <tags>
        <tag>光学</tag>
        <tag>几何</tag>
      </tags>
  </entry>
  <entry>
    <title>编译链接浅析</title>
    <url>/2019/02/01/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="引子">引子</h2>
<p>先来看两段代码，这两段代码很简单。<code>main</code>是主函数，调用<code>sum</code>进行求和，其中<code>sum</code>函数参数是指针类型的，也就是说在<code>sum</code>函数进行改变会引起原来的值的改变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">-2</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">-5</span>;</span><br><span class="line">    <span class="type">int</span>* a;</span><br><span class="line">    <span class="type">int</span>* b;</span><br><span class="line">    a = &amp;k;</span><br><span class="line">    b = &amp;j;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;k+j=&quot;</span>&lt;&lt;<span class="built_in">sum</span>(a,b)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;k=&quot;</span>&lt;&lt;k&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;<span class="string">&quot;j=&quot;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sum.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *a = <span class="built_in">abs</span>(*a);*b=<span class="built_in">abs</span>(*b);</span><br><span class="line">    <span class="keyword">return</span> (*a+*b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要在<code>Linux</code>上面执行出结果，那么打上下面的代码就可以了： <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">g++ main.c sum.cpp <span class="literal">-o</span> a.out</span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure> 输出的结果是： <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">k+j=<span class="number">7</span></span><br><span class="line">k=<span class="number">2</span>	j=<span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到运行正确了，这个结果也是预料之中的，k 变成了 2，j 变成了 5，这个是在<code>sum</code>里面被改变了值，也会影响到原址的值。</p>
<h2 id="程序到可执行文件">程序到可执行文件</h2>
<p>程序到可执行文件需要经过几个阶段：</p>
<h3 id="预编译阶段">预编译阶段</h3>
<p>预编译阶段是把原始的代码文件的需要预编译头加进来，即对于<code>#include</code>的文件进行原样复制，<code>#include</code>文件可以由命令<code>locate</code>得到 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/VSCode/CSAPP深入理解计算机系统<span class="variable">$</span> locate iostream</span><br><span class="line">/usr/include/c++/<span class="number">7</span>/iostream</span><br><span class="line">/usr/lib/x86_64<span class="literal">-linux-gnu</span>/libboost_iostreams.so.<span class="number">1.65</span>.<span class="number">1</span></span><br><span class="line">/usr/share/doc/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span></span><br><span class="line">/usr/share/doc/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span>/changelog.Debian.gz</span><br><span class="line">/usr/share/doc/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span>/copyright</span><br><span class="line">/usr/share/lintian/overrides/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span></span><br><span class="line">/var/lib/dpkg/info/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span>:amd64.list</span><br><span class="line">/var/lib/dpkg/info/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span>:amd64.md5sums</span><br><span class="line">/var/lib/dpkg/info/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span>:amd64.shlibs</span><br><span class="line">/var/lib/dpkg/info/libboost<span class="literal">-iostreams1</span>.<span class="number">65.1</span>:amd64.triggers</span><br></pre></td></tr></table></figure> 或者是对于C语言的库使用<code>man</code> <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">man</span> stdio</span><br></pre></td></tr></table></figure> <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">STDIO(<span class="number">3</span>)                   Linux Programmer<span class="string">&#x27;s Manual                  STDIO(3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NAME</span></span><br><span class="line"><span class="string">       stdio - standard input/output library functions</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SYNOPSIS</span></span><br><span class="line"><span class="string">       #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       FILE *stdin;</span></span><br><span class="line"><span class="string">       FILE *stdout;</span></span><br><span class="line"><span class="string">       FILE *stderr;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br></pre></td></tr></table></figure> 预编译命令如下： <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">g++ <span class="literal">-E</span> main.cpp <span class="literal">-o</span> main.i</span><br><span class="line"><span class="built_in">cat</span> main.i</span><br></pre></td></tr></table></figure> 这个命令是把<code>main.cpp</code><span class="math inline">\(\rightarrow\)</span><code>main.i</code>。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分代码，在Linux试一下就知道</span></span><br><span class="line"><span class="keyword">namespace</span> std __attribute__ ((__visibility__ (<span class="string">&quot;default&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"># <span class="number">60</span> <span class="string">&quot;/usr/include/c++/7/iostream&quot;</span> <span class="number">3</span></span><br><span class="line">  <span class="keyword">extern</span> istream cin;</span><br><span class="line">  <span class="keyword">extern</span> ostream cout;</span><br><span class="line">  <span class="keyword">extern</span> ostream cerr;</span><br><span class="line">  <span class="keyword">extern</span> ostream clog;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">extern</span> wistream wcin;</span><br><span class="line">  <span class="keyword">extern</span> wostream wcout;</span><br><span class="line">  <span class="keyword">extern</span> wostream wcerr;</span><br><span class="line">  <span class="keyword">extern</span> wostream wclog;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">static</span> ios_base::Init __ioinit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;main.cpp&quot;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;main.cpp&quot;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">-2</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">-5</span>;</span><br><span class="line">    <span class="type">int</span>* a;</span><br><span class="line">    <span class="type">int</span>* b;</span><br><span class="line">    a = &amp;k;</span><br><span class="line">    b = &amp;j;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;k+j=&quot;</span>&lt;&lt;<span class="built_in">sum</span>(a,b)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;k=&quot;</span>&lt;&lt;k&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;<span class="string">&quot;j=&quot;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 可以看到，这就是把<code>#include</code>里面的东西原样复制到<code>main.cpp</code>代码文件里面，整合到一起，就叫做预编译过程。 ### C++编译阶段 C++编译阶段就是把预编译好的文件编译成汇编代码，个人觉得这个过程跟翻译差不多，把一种语言翻译成另一种语言，命令如下。 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">g++ <span class="literal">-S</span> main.i</span><br><span class="line"><span class="built_in">cat</span> main.s</span><br></pre></td></tr></table></figure> 上面的<code>g++</code>命令默认会有<code>-o main.s</code>添加上，即会产生<code>main.s</code>文件产生。 产生的<code>main.s</code>文件如下，由于太长，截取了部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	.file	&quot;main.cpp&quot;</span><br><span class="line">	.text</span><br><span class="line">	.section	.rodata</span><br><span class="line">	.type	_ZStL19piecewise_construct, @object</span><br><span class="line">	.size	_ZStL19piecewise_construct, 1</span><br><span class="line">_ZStL19piecewise_construct:</span><br><span class="line">	.zero	1</span><br><span class="line">	.local	_ZStL8__ioinit</span><br><span class="line">	.comm	_ZStL8__ioinit,1,1</span><br><span class="line">.LC0:</span><br><span class="line">	.string	&quot;k+j=&quot;</span><br><span class="line">.LC1:</span><br><span class="line">	.string	&quot;k=&quot;</span><br><span class="line">.LC2:</span><br><span class="line">	.string	&quot;\t&quot;</span><br><span class="line">.LC3:</span><br><span class="line">	.string	&quot;j=&quot;</span><br><span class="line">	.text</span><br><span class="line">	.globl	main</span><br><span class="line">	.type	main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB1493:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	pushq	%rbp</span><br><span class="line">	.cfi_def_cfa_offset 16</span><br><span class="line">	.cfi_offset 6, -16</span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">	.cfi_def_cfa_register 6</span><br><span class="line">	pushq	%rbx</span><br><span class="line">	subq	$56, %rsp</span><br><span class="line">	.cfi_offset 3, -24</span><br><span class="line">	movl	%edi, -52(%rbp)</span><br><span class="line">	movq	%rsi, -64(%rbp)</span><br><span class="line">	movq	%fs:40, %rax</span><br><span class="line">	movq	%rax, -24(%rbp)</span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	movl	$-2, -48(%rbp)</span><br><span class="line">	movl	$-5, -44(%rbp)</span><br><span class="line">	leaq	-48(%rbp), %rax</span><br><span class="line">	movq	%rax, -40(%rbp)</span><br><span class="line">	leaq	-44(%rbp), %rax</span><br><span class="line">	movq	%rax, -32(%rbp)</span><br><span class="line">	leaq	.LC0(%rip), %rsi</span><br><span class="line">	leaq	_ZSt4cout(%rip), %rdi</span><br><span class="line">	call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT</span><br><span class="line">	movq	%rax, %rbx</span><br><span class="line">	movq	-32(%rbp), %rdx</span><br><span class="line">	movq	-40(%rbp), %rax</span><br><span class="line">	movq	%rdx, %rsi</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	call	_Z3sumPiS_@PLT</span><br><span class="line">	movl	%eax, %esi</span><br><span class="line">	movq	%rbx, %rdi</span><br><span class="line">	call	_ZNSolsEi@PLT</span><br><span class="line">	movq	%rax, %rdx</span><br><span class="line">	movq	</span><br></pre></td></tr></table></figure>
<p>从上面的代码看出，这是个汇编代码，也就完成了<code>main.i</code><span class="math inline">\(\rightarrow\)</span><code>main.s</code>的转化。</p>
<h3 id="汇编代码转化为rof文件">汇编代码转化为rof文件</h3>
<p><code>rof</code>是relocatable object file的简称，称为可重定向目标文件。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">g++ <span class="literal">-c</span> main.s</span><br></pre></td></tr></table></figure>
<p>输出的文件为<code>main.o</code>，这个文件不是文本文件，是一个二进制文件。</p>
<blockquote>
<p>文本文件：由ASCII码组成的文件，可以由文本编辑器直接打开 二进制文件：除了文本文件之外的所有文件，如图片格式文件就属于二进制文件，这种文件需要专门的解码软件打开，如果使用文本编辑器打开就是乱码的。</p>
</blockquote>
<h3 id="链接器链接生成eof">链接器链接生成eof</h3>
<p><code>eof</code>是executable object file的简称，称为可执行目标文件。</p>
<p>按照前面的步骤（预编译<span class="math inline">\(\rightarrow\)</span>C++编译<span class="math inline">\(\rightarrow​\)</span>rof文件生成）得到<code>sum.o</code>文件。然后进行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">g++ main.o sum.o</span><br></pre></td></tr></table></figure>
<p>这时候会产生一个新的文件为<code>a.out</code>，这个名字可以自己取，也就是把默认的那个语句加上，如： <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">g++ main.o sum.o <span class="literal">-o</span> main.out</span><br></pre></td></tr></table></figure> 当然，在 Linux 里面文件的后缀名是不重要的，<code>.x</code>也可，只不过<code>.out</code>是在Unix操作系统上第一个实现的可执行文件的后缀名，就保留了下来。</p>
<p>之后就运行： <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./a.out</span><br></pre></td></tr></table></figure> 得到结果 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">k+j=<span class="number">7</span></span><br><span class="line">k=<span class="number">2</span>	j=<span class="number">5</span></span><br></pre></td></tr></table></figure> 这个结果跟之前的一致。执行命令的时候，Linux 会使用它的加载器将可执行文件<code>a.out</code>的代码和数据复制到内存，然后将控制转移到这个程序的开头。</p>
<h3 id="小结">小结</h3>
<img src="/2019/02/01/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E6%B5%85%E6%9E%90/%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" class="" title="总结">
<h2 id="可执行文件格式分析">可执行文件格式分析</h2>
]]></content>
      <tags>
        <tag>编译</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>资源收集</title>
    <url>/2024/01/13/%E8%B5%84%E6%BA%90%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>malloc: http://blog.codinglabs.org/articles/a-malloc-tutorial.html</p>
<p>duartes.org: http://duartes.org/gustavo/blog/archives/</p>
<p>github mannul: http://www.epubit.com.cn/article/844#what</p>
<p>liaoxuefeng.com: http://www.liaoxuefeng.com/</p>
<p>TCP/IP network: http://blog.packagecloud.io/eng/2016/10/11/monitoring-tuning-linux-networking-stack-receiving-data-illustrated/</p>
<p>netfilter.org: https://people.netfilter.org/pablo/netdev0.1/papers/</p>
<p>tuning-linux-sending: https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data/</p>
<p>tuning-linux-receiving: https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/</p>
<p>strace: https://blog.packagecloud.io/eng/2016/02/29/how-does-strace-work/</p>
<p>IBM-Tim: https://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?search_by=Linux+%E5%89%96%E6%9E%90</p>
<p>yeolar: http://www.yeolar.com/</p>
<p>http://www.yeolar.com/note/2012/03/29/virtual-memory/</p>
<p>vxlan: https://blogs.vmware.com/vsphere/2013/07/vxlan-series-how-vmotion-impacts-the-forwarding-table-part-6.html</p>
<p>http://www.cisco.com/c/en/us/products/collateral/switches/nexus-5000-series-switches/white-paper-c11-733618.html#_Toc439799767</p>
<p>http://www.cisco.com/c/en/us/products/collateral/switches/nexus-9000-series-switches/white-paper-c11-729383.html</p>
<p>ali-kernel: http://kernel.taobao.org/index.php?title=%E5%86%85%E6%A0%B8%E6%9C%88%E6%8A%A52017-02</p>
<p>linux-performance: http://www.brendangregg.com/linuxperf.html</p>
<p>systemTap: https://sourceware.org/systemtap/SystemTap_Beginners_Guide/</p>
<p>calico: http://docs.projectcalico.org/v2.0/introduction/</p>
<p>docker: http://www.infoq.com/cn/articles/docker-network-and-pipework-open-source-explanation-practice</p>
<p>Flannel: http://dockone.io/article/618</p>
<p>SDN: https://www.opennetworking.org/</p>
<p>Linux Kernel Networking: https://wiki.linuxfoundation.org/networking/start</p>
<p>MacVtap: https://blog.kghost.info/2013/03/27/linux-network-tun/</p>
<p>http://blog.csdn.net/dog250/article/details/45788279</p>
<p>Neutron: http://blog.csdn.net/quqi99/article/details/22853403</p>
<p>Linux Bridge: http://blog.csdn.net/yeasy/article/details/50728243</p>
<p>Docker Networking: http://edgedef.com/docker-networking.html</p>
<p>Tun/Tap interface: http://backreference.org/2010/03/26/tuntap-interface-tutorial/</p>
<p>TC ifb: http://blog.csdn.net/dog250/article/details/40680765?utm_source=tuicool&amp;utm_medium=referral</p>
<p>汇编:</p>
]]></content>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian和github和hexo博客流配置</title>
    <url>/2024/01/14/Obsidian%E5%92%8Cgithub%E5%92%8Chexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E9%85%8D%E7%BD%AE/Obsidian%E5%92%8Cgithub%E5%92%8Chexo%E5%8D%9A%E5%AE%A2%E6%B5%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="hexo配置">hexo配置</h2>
<h3 id="node.js配置">node.js配置</h3>
<h3 id="hexo主题配置">hexo主题配置</h3>
<h2 id="obsidian配置">Obsidian配置</h2>
<p>下载<code>Obsidian Git</code>插件，需要打开第三方插件按钮，下载插件。</p>
<p><img src="img1.png" /></p>
<p>在对应的.git目录下打开仓库，下图的打开本地仓库，生成本地目录。</p>
<p><img src="img3.png" /></p>
<p>配置Git设置地址等，这样就可以调用后台的git自动推送了</p>
<p><img src="img2.png" /></p>
<blockquote>
<p>需要注意的是：git需要首先被安装，并且配置到环境变量</p>
<h2 id="github配置">github配置</h2>
<h3 id="workflows配置">workflows配置</h3>
<h2 id="dependabot配置">dependabot配置</h2>
</blockquote>
]]></content>
      <tags>
        <tag>工作流</tag>
      </tags>
  </entry>
  <entry>
    <title>三种大气质量和一个公式的计算方法</title>
    <url>/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="三种大气质量和一个公式的计算方法">三种大气质量和一个公式的计算方法</h1>
<h2 id="简介">简介</h2>
<p>​ 整理的文献为 <em>Revised optical air mass tables and approximation formula</em> 。</p>
<p>​ 文章一开始介绍了一个由 Karsten 在1965年发表的并且广泛被世界所采用的关于大气质量的近似公式，并且讨论了一些由于各个学科对于不同的物理量符号和术语的不同使得读者经常由此而困惑。</p>
<p>​ 其后介绍了一个计算大气光学质量的近似公式，然后说明了在公式中存在的一种不定情况，之后又对这个近似公式用非线性最小二乘法进行修正得到了一组新的系数。后面又根据索引文献[1]文中也多次提到这篇文献，很多都是从这篇文献里面来的。</p>
<p>​ 还有从一篇《基于遥感与地面监测数据的城市气溶胶定量反演研究》，作者是王耀庭，南京师范大学博士论文。</p>
<h2 id="一个通用的计算公式">一个通用的计算公式</h2>
<p><span class="math display">\[
m(\gamma)=\frac{m_{abs}(\gamma)}{m_{abs}(90^{\circ})}
\]</span></p>
<p><span class="math display">\[
m_{abs}(\gamma)=\rho_{0}\int^{\infty}_{0} \frac{\rho}{\rho_{0}}([1-[1+2\delta_{0}(1-\frac{\rho}{\rho_{0}})]]\times
    [\frac{\cos \gamma}{1+\frac{h}{R}}]^{2})^{-\frac{1}{2}}dh
\]</span> <span class="math inline">\(h\)</span>是相对于海平面的平均高度；</p>
<p><span class="math inline">\(\rho=\rho(h)\)</span>，是在高度<span class="math inline">\(h\)</span>处的大气质量；</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/Table1.png" class="" title="表格1">
<p>​ 根据以上的式子 (1),(2) 和已知的参数表1。要计算这个定积分，那就还需要知道 <span class="math inline">\(ρ\)</span>, 也就是 <span class="math inline">\(ρ(h)\)</span> 在高度 h 处的大气密度，但是我在文献中找不到，这是个问题，不知道是不是需要再去别的地方找这个 <span class="math inline">\(ρ\)</span>，看完了这篇文章之后，知道了这个 <span class="math inline">\(ρ\)</span> 还是没有找到，但是文章已经给出了计算得到的结果的表格。</p>
<h2 id="近似计算公式和不同的系数">近似计算公式和不同的系数</h2>
<p><span class="math display">\[
f(\gamma)=[\sin \gamma+a(\gamma+b)^{-c}]^{-1}
\]</span> <span class="math inline">\(\gamma\)</span>是高度角，单位是<span class="math inline">\(^\circ\)</span>;<span class="math inline">\(f(\gamma)\)</span>是用近似公式计算的<span class="math inline">\(m(\gamma)\)</span>;<span class="math inline">\(a,b,c\)</span>是式子的常数，<span class="math inline">\(a=0.1500，b=3.885^{\circ}，c=1.253;\)</span></p>
<p>​ a,b,c这三个常数决定于最小二乘法的相对误差，也就是用前面的计算公式计算数据之后，用最小二乘法进行拟合，使用(3)的形式来计算三个常数。</p>
<p>​ 文献后面又介绍了两个不同的参数组合，一个是根据非线性最小二乘法计算的 <span class="math inline">\(a=0.50572,b=6.07995°,\)</span> <span class="math inline">\(c=1.6364\)</span>；一个是根据 <span class="math inline">\(Bemporad\)</span> 的经典大气质量表确定的，<span class="math inline">\(a=0.6556,b=6.379°,c=1.757[1]\)</span>，其中文献的表中的 <span class="math inline">\(r(γ)\)</span> 是根据公式(4)计算的相对误差，用来衡量计算大气质量的相对误差。 <span class="math display">\[
r(\gamma)=\frac{f(\gamma)-m(\gamma)}{m(\gamma)}
\]</span></p>
<h2 id="积分问题和解决">积分问题和解决</h2>
<p>​ 对于公式(2)，积分会在 <span class="math inline">\(γ=0\)</span> 和 <span class="math inline">\(h\)</span> 接近于0的地方不定，在这种情况下，这个积分可以通过执行一个特殊的程序来进行计算，在参考文献[1]中有写这个程序。但是在计算的时候有个错误会混入，在地平线上的值 36.2648 会比实际的小 5% 左右。</p>
<p>​ 举例而言，在 Link 和 Neuzil[3] 文章的表中所给出的地平线上的在1962年美国的标准大气的大气质量是38.16，这跟 1959 年 Karsen 用的 ARDC 模型十分接近。Snider 和 Goldman[4] 给出的关于 1962 年的模型的38.10也是高度相似。Treve[5] 使用1959年的 ARDC 模型，得到了在地平线上的相对大气质量分别是 $0.55μm $ 的38.11和在 <span class="math inline">\(0.70μm\)</span> 的38.08。</p>
<p>​ 还有就是采用一种新的标准来却确定式子 (2) 中的参数会优于旧的模型，也就是最新的国际标准化组织的大气模型 (ISO Standrad Atmophere) 代替 ARDC 模型大气(由国际民航组织 ICAO 提出的)，这个仅有的变化也就是名义地球半径变为 <span class="math inline">\(R=6.356766×10^6m\)</span>。</p>
<h2 id="一个计算公式">一个计算公式</h2>
<p><span class="math display">\[
m=\frac{1}{cos \frac{\pi \theta_0}{180^\circ}+0.15\times(93.885-\theta_0)^{-1.253}}
\]</span></p>
<p>​ 其中m是需要计算的大气质量，<span class="math inline">\(\theta_0\)</span> 是天顶角。</p>
<h2 id="我要做的工作">我要做的工作</h2>
<p>​ 在这篇文章里面，我要做的就是编写一个程序，根据文献中的大气质量近似公式(3)，并且用不同的参数组带入，将表格中自变量太阳高度角γ作为自变量带入近似公式计算，再与表格中所给的大气质量数进行作差比较，即验证这个算法是否真的符合实际，如果误差较小，则可以用到我们的项目中去。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E8%A1%A8%E6%A0%BC2.png" class="" title="表格2">
<p>​ 上面的这张表格也就说明了在文章计算的数据中天顶角 <span class="math inline">\(γ\)</span> 的取值变化，也就是计算的时候自变量所采用的值。过计算得到了一些结果。</p>
<h2 id="结果">结果</h2>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E8%BF%90%E7%94%A8%E5%85%B6%E4%BB%96%E5%85%AC%E5%BC%8F%E8%AE%A1%E7%AE%97%E7%9A%84%E5%92%8C%E6%A0%87%E5%87%86%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F.bmp" class="">
<p>​ 图1 标准大气质量和用其他公式计算的大气质量</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E7%9A%84%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F.bmp" class="">
<p>​ 图2 四种计算方法与标准大气质量</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E6%8B%9F%E5%90%88%E7%B3%BB%E6%95%B0%E8%AE%A1%E7%AE%97%E7%9A%84%E7%9B%B8%E5%AF%B9%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F.bmp" class="">
<p>​ 图3 三种拟合系数计算的大气质量</p>

<p>​ 图4 误差曲线</p>
<h2 id="分析">分析</h2>
<p>​ 从上面的图中可以看到，用三种不同的系数计算的相对大气质量以及三组拟合系数的误差曲线，从图中可以看到，三者在天顶角大于 30° 之后都是差不多的经度，主要就是在30°之前的差异。而且可以看到在起始点的时候，第一组和第三组都有很大的误差，特别是第三组，误差都接近于4%，回想文章中提到的积分会在 <span class="math inline">\(γ=0\)</span> 和 h 接近于 0 的地方不定，需要查阅参考文献[1]来寻找解决方法。但是我看到这个计算的第二组拟合系数表现的很好，不知道是否可以用第二组数据来计算，或者是这三组数据都是在不同的情况下表现的经度水平会不一样。但是有个问题，我们没有找到拟合系数1的这条曲线，在下面会进行说明，实际上<u>它是和其他公式计算的这条曲线重合了</u>。</p>
<p>​ 对比三种方法和一个计算公式，发现计算公式的误差在几个计算方法折中的位置，在角度 &gt;10° 之后，这个计算值的偏差与第二组拟合系数计算的误差一样，都是非常小的。</p>
<p>​ 可以看看在高度角大于10°时候的表现。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E9%AB%98%E5%BA%A6%E8%A7%92%E5%A4%A7%E4%BA%8E10%C2%B0%E7%9A%84%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F%E8%AF%AF%E5%B7%AE.bmp" class="">
<p>​ 图 5 在高度角大于10°时候计算大气质量的误差</p>
<p>​ 这里没有找到拟合系数1这条曲线，是因为他的变化与公式计算的是一模一样的，两条线是重合的。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E6%89%BE%E6%8B%9F%E5%90%88%E7%B3%BB%E6%95%B01%E8%BF%99%E6%9D%A1%E7%BA%BF.bmp" class="">
<p>​ 图 6 拟合系数1和公式计算的天顶角大于10°的误差曲线</p>
<p>​ 这说明，其实拟合系数1也就是将天顶角计算的公式做了稍微的变化，就得到了太阳高度角的，<u>本质上，这两个公式是一模一样的</u>，只是取得系数不同罢了。</p>
<h2 id="新给的数据的计算">新给的数据的计算</h2>
<p>​ 在之后使用已经写好的这几种计算方法来计算新的数据值，数据可以在 ‘1.xlsx’ 表格中找到。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/8%E6%9C%886%E5%8F%B7%E5%88%B08%E5%8F%B7%E8%AE%A1%E7%AE%97%E7%9A%84%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F%E5%80%BC.bmp" class="">
<p>​ 图 7 根据所给的数据计算的三天的大气质量数值</p>
<p>​ 可以看到，其实一天内的天顶角并不是全是 0~90° 的，这几天维持在 40° 以下，这时候，查阅标准数据也是差不多在这样的数据范围。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] Kasten,"A New Table and Approximation Formula for the Relative Optical Air Mass",Arch.Meteorol.Geophys.Bioklimatol.Ser.B 14,206-223(1965). [2] R.A Miner,K.S.W.Chamption,and H.L.Pond,The ARDC Model Atmosphere,1959,Air Force Surveys in Geophysics 11(AFCRL,1959) [3] F.Link and L.Neuzil,Table of Light Trajectories in the Terrestrial Atmosphere(Hermann,Paris,1969) [4] D.E Snier and A. Goldman,Refractive Effects in Remote Sensing of Atmosphere with Infrared Transmission Spectroscopy,(Ballistic Research Labratories,June 1975) [5] Y. M. Treve, New Values of the Optical Air Mass and the Refraction and Comparison with Previous Tables," in Proceed-ings, Second Tropospheric Refraction Effects Technical ReviewMeeting, Technical Documentary Rep. ESD-TDR 64-103, May1964 (National Technical Information Service Order AD-442626), pp.5-391. [6] International Organization for Standardization,Standard Atmosphere,International Standard ISO253(1972) [7] S.L.Valley,Handbook of Geophysics and Space Physics (AFCRL,1965), pp.23. [8] W.H.Jefferys,M.J.Fitzpatrick,B.E.McArthur,andJ.E. McCartney, GaussFit:A System for Least Squares and RobustEstimation (U. Texas at Austin, 1989). [9] A.T.Young,Observational Technique and Data Reduction," inle to Methods of Experimental Physics(Vol. 12, Astrophysics; Partrmly A:Optical and Infrared),N,Carleton,Ed.(Academic, New York, 1974),p.150.</p>
<h2 id="代码">代码</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">%x的步长选取</span></span><br><span class="line">x1=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">20</span>;</span><br><span class="line">x2=<span class="number">20.2</span>:<span class="number">0.2</span>:<span class="number">30</span>;</span><br><span class="line">x3=<span class="number">30.5</span>:<span class="number">0.5</span>:<span class="number">55</span>;</span><br><span class="line">x4=<span class="number">56</span>:<span class="number">1</span>:<span class="number">90</span>;</span><br><span class="line">x=[x1,x2,x3,x4];</span><br><span class="line"><span class="comment">%定义Latxe字符</span></span><br><span class="line"><span class="built_in">gamma</span>=texlabel(<span class="string">&#x27;gamma&#x27;</span>);flambda=texlabel(<span class="string">&#x27;f(lambda)&#x27;</span>);</span><br><span class="line">txt = texlabel(<span class="string">&#x27;f(lambda)=[sin gamma+a(gamma+b)^&#123;-c&#125;]^&#123;-1&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">%输入标准数据，画标准数据图像</span></span><br><span class="line">data=xlsread(<span class="string">&#x27;datain.xlsx&#x27;</span>);</span><br><span class="line">datax=data(:,<span class="number">1</span>);px=datax;</span><br><span class="line">datay=data(:,<span class="number">2</span>);py=datay;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(datax,datay);grid on;box off;</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;标准的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line"><span class="comment">% print(&#x27;Standard&#x27;,&#x27;-deps&#x27;);</span></span><br><span class="line"><span class="comment">%调用三个计算函数</span></span><br><span class="line">airMass1=massCal1(x);</span><br><span class="line">airMass2=massCal2(x);</span><br><span class="line">airMass3=massCal3(x);</span><br><span class="line">airMass4=massCal4(x);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(datax,airMass4);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;其他公式计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">suptitle(<span class="string">&#x27;相对大气质量与高度角的关系&#x27;</span>);grid on;box off</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">set(<span class="built_in">figure</span>(<span class="number">2</span>),<span class="string">&#x27;PaperSize&#x27;</span>,[<span class="number">42</span>,<span class="number">60</span>]);</span><br><span class="line">suptitle([<span class="string">&#x27;\fontsize&#123;14&#125;&#x27;</span>,txt]);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,airMass1);grid on;box off;</span><br><span class="line">text(<span class="number">60</span>,<span class="number">30</span>,<span class="string">&#x27;a=0.1500,b=3.885,c=1.253&#x27;</span>);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,airMass2);grid on;box off;</span><br><span class="line">text(<span class="number">60</span>,<span class="number">30</span>,<span class="string">&#x27;a=0.50572,b=6.07995,c=1.6364&#x27;</span>);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,airMass3);grid on;box off;</span><br><span class="line">text(<span class="number">60</span>,<span class="number">30</span>,<span class="string">&#x27;a=0.6556,b=6.379,c=1.757&#x27;</span>);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">set(gcf, <span class="string">&#x27;position&#x27;</span>, [<span class="number">1920</span>/<span class="number">4</span> <span class="number">1080</span>/<span class="number">4</span> <span class="number">1920</span>/<span class="number">2</span> <span class="number">1080</span>/<span class="number">1.5</span>]);</span><br><span class="line"><span class="comment">% print(&#x27;Calculate&#x27;,&#x27;-deps&#x27;);</span></span><br><span class="line"><span class="comment">%画三个函数的误差曲线</span></span><br><span class="line">datay=datay&#x27;;</span><br><span class="line">delta1 = (airMass1-datay)./datay*<span class="number">100</span>;</span><br><span class="line">delta2 = (airMass2-datay)./datay*<span class="number">100</span>;</span><br><span class="line">delta3 = (airMass3-datay)./datay*<span class="number">100</span>;</span><br><span class="line">delta4 = (airMass4-datay)./datay*<span class="number">100</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,delta1);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta2,<span class="string">&#x27;--&#x27;</span>);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta3,<span class="string">&#x27;:&#x27;</span>);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta4);grid on;box off;</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(<span class="string">&#x27;三种大气质量的误差(%)&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;第1组拟合系数&#x27;</span>,<span class="string">&#x27;第2组拟合系数&#x27;</span>,<span class="string">&#x27;第3组拟合系数&#x27;</span>,<span class="string">&#x27;其他公式计算&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;几种计算方法的误差&#x27;</span>);</span><br><span class="line"><span class="comment">% print(&#x27;Error&#x27;,&#x27;-deps&#x27;);</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">plot</span>(datax,datay);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass1);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass2);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass3);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass4);grid on;box off;</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(<span class="string">&#x27;相对大气质量&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;实际的&#x27;</span>,<span class="string">&#x27;方法1&#x27;</span>,<span class="string">&#x27;方法2&#x27;</span>,<span class="string">&#x27;方法三&#x27;</span>,<span class="string">&#x27;其他方法&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;几种方法和实际的相对大气质量&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[~,Date,~] = xlsread(<span class="string">&#x27;1.xlsx&#x27;</span>,<span class="string">&#x27;A2:A105&#x27;</span>);</span><br><span class="line">Date = datetime(Date,<span class="string">&#x27;InputFormat&#x27;</span>,<span class="string">&#x27;dd/MM/yyyy&#x27;</span>);</span><br><span class="line">Date.Format = <span class="string">&#x27;yyyy-MM-dd&#x27;</span>;</span><br><span class="line">Time = days(xlsread(<span class="string">&#x27;1.xlsx&#x27;</span>,<span class="string">&#x27;B2:B105&#x27;</span>));</span><br><span class="line">Time.Format = <span class="string">&#x27;hh:mm:ss&#x27;</span>;</span><br><span class="line">datetime = Date+Time;</span><br><span class="line">datetime.Format = <span class="string">&#x27;yyyy-MM-dd hh:mm:ss&#x27;</span>;</span><br><span class="line">xxx=xlsread(<span class="string">&#x27;1.xlsx&#x27;</span>,<span class="string">&#x27;C2:C105&#x27;</span>);</span><br><span class="line">xx=<span class="number">90</span>-xxx;</span><br><span class="line">airMassx1=massCal1(xx);</span><br><span class="line">airMassx2=massCal2(xx);</span><br><span class="line">airMassx3=massCal3(xx);</span><br><span class="line">airMassx4=massCal4(xx);</span><br><span class="line">output=[airMassx1,airMassx2,airMassx3,airMassx4];</span><br><span class="line">xlswrite(<span class="string">&#x27;output.xlsx&#x27;</span>,output);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">datetime = datenum(datetime);</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx1);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx2);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx3);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx4);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line">dateFormat = <span class="string">&#x27;yy-mm-dd HH:MM:SS&#x27;</span>;</span><br><span class="line">datetick(<span class="string">&#x27;x&#x27;</span>,dateFormat)</span><br><span class="line"><span class="comment">%plot(px,py);grid on;box off;</span></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;计算方法1&#x27;</span>,<span class="string">&#x27;计算方法2&#x27;</span>,<span class="string">&#x27;计算方法3&#x27;</span>,<span class="string">&#x27;其他方法计算的&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;大气质量&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;新给的数据的高度角计算的值&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = (x&gt;<span class="number">10</span>);</span><br><span class="line">x = x(p);</span><br><span class="line">delta1 = delta1(p);</span><br><span class="line">delta2 = delta2(p);</span><br><span class="line">delta3 = delta3(p);</span><br><span class="line">delta4 = delta4(p);</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(x,delta1);<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta2);<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta3);<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta4);grid on;box off;</span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);ylabel(<span class="string">&#x27;大气质量计算偏差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;高度角 &gt;10° 时大气质量计算偏差&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;拟合系数1&#x27;</span>,<span class="string">&#x27;拟合系数2&#x27;</span>,<span class="string">&#x27;拟合系数3&#x27;</span>,<span class="string">&#x27;公式计算&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,delta1);box off;grid on</span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);ylabel(<span class="string">&#x27;大气质量计算偏差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;拟合系数1计算&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,delta4);box off;grid on</span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);ylabel(<span class="string">&#x27;大气质量计算偏差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;公式计算&#x27;</span>);</span><br><span class="line">suptitle(<span class="string">&#x27;高度角 &gt;10° 时大气质量计算偏差&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">massCal1</span><span class="params">(gamma)</span></span></span><br><span class="line"><span class="comment">%函数调用格式：airMass=massCal1(gamma)</span></span><br><span class="line"><span class="comment">%输入参数说明：gamma是天顶角，单位是°</span></span><br><span class="line"><span class="comment">%输出参数说明：airMass是大气质量</span></span><br><span class="line">a=<span class="number">0.1500</span>;b=<span class="number">3.885</span>;c=<span class="number">1.253</span>;</span><br><span class="line"><span class="comment">% gamma=gamma*pi/180;%b=b*pi/180;</span></span><br><span class="line">y=(<span class="built_in">sin</span>(<span class="built_in">gamma</span>*<span class="built_in">pi</span>/<span class="number">180</span>)+a*(<span class="built_in">gamma</span>+b).^(-c)).^(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算方法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">massCal2</span><span class="params">(gamma)</span></span></span><br><span class="line"><span class="comment">%函数调用格式：airMass=massCal2(gamma)</span></span><br><span class="line"><span class="comment">%输入参数说明：gamma是天顶角，单位是°</span></span><br><span class="line"><span class="comment">%输出参数说明：airMass是大气质量</span></span><br><span class="line">a=<span class="number">0.50572</span>;b=<span class="number">6.07995</span>;c=<span class="number">1.6364</span>;</span><br><span class="line">y=(<span class="built_in">sin</span>(<span class="built_in">gamma</span>*<span class="built_in">pi</span>/<span class="number">180</span>)+a*(<span class="built_in">gamma</span>+b).^(-c)).^(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算方法3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">massCal3</span><span class="params">(gamma)</span></span></span><br><span class="line"><span class="comment">%函数调用格式：airMass=massCal(gamma)</span></span><br><span class="line"><span class="comment">%输入参数说明：gamma是天顶角，单位是°</span></span><br><span class="line"><span class="comment">%输出参数说明：airMass是大气质量</span></span><br><span class="line">a=<span class="number">0.6556</span>;b=<span class="number">6.379</span>;c=<span class="number">1.757</span>;</span><br><span class="line">y=(<span class="built_in">sin</span>(<span class="built_in">gamma</span>*<span class="built_in">pi</span>/<span class="number">180</span>)+a*(<span class="built_in">gamma</span>+b).^(-c)).^(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>内核转储文件--内核崩溃</title>
    <url>/2024/01/13/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6--%E5%86%85%E6%A0%B8%E5%B4%A9%E6%BA%83/</url>
    <content><![CDATA[<h2 id="ubuntu">Ubuntu</h2>
<h3 id="安装crash工具">安装crash工具</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">apt-get install linux-crashdump</span><br></pre></td></tr></table></figure>
<h3 id="检查kdump配置">检查kdump配置</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">kdump-config show</span><br><span class="line"></span><br><span class="line">DUMP_MODE:              kdump</span><br><span class="line">USE_KDUMP:              1</span><br><span class="line">KDUMP_COREDIR:          /var/crash</span><br><span class="line">crashkernel addr: 0x73000000</span><br><span class="line">   /var/lib/kdump/vmlinuz: symbolic link to /boot/vmlinuz-5.15.0-89-generic</span><br><span class="line">kdump initrd:</span><br><span class="line">   /var/lib/kdump/initrd.img: symbolic link to /var/lib/kdump/initrd.img-5.15.0-89-generic</span><br><span class="line">current state:    ready to kdump</span><br><span class="line"></span><br><span class="line">kexec command:</span><br><span class="line">  /sbin/kexec -p --command-line=&quot;BOOT_IMAGE=/boot/vmlinuz-5.15.0-89-generic root=UUID=92414257-97c5-46a0-9154-66c415ee7358 ro net.ifnames=0 consoleblank=600 console=tty0 console=ttyS0,115200n8 noibrs reset_devices systemd.unit=kdump-tools-dump.service nr_cpus=1 irqpoll nousb&quot; --initrd=/var/lib/kdump/initrd.img /var/lib/kdump/vmlinuz</span><br></pre></td></tr></table></figure>
<p>USE_KDUMP=1 代表kdump打开</p>
<p>KDUMP_COREDIR 代表生成的core文件在<code>/var/crash</code>下面</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"><span class="comment"># dmesg | grep -i crash</span></span></span><br><span class="line">[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.15.0-89-generic root=UUID=92414257-97c5-46a0-9154-66c415ee7358 ro net.ifnames=0 consoleblank=600 console=tty0 console=ttyS0,115200n8 noibrs crashkernel=512M-:192M</span><br><span class="line">[    0.005698] Reserving 192MB of memory at 1840MB for crashkernel (System RAM: 2047MB)</span><br><span class="line">[    0.013125] Kernel command line: BOOT_IMAGE=/boot/vmlinuz-5.15.0-89-generic root=UUID=92414257-97c5-46a0-9154-66c415ee7358 ro net.ifnames=0 consoleblank=600 console=tty0 console=ttyS0,115200n8 noibrs crashkernel=512M-:192M</span><br></pre></td></tr></table></figure>
<p>dmesg 显示了crashkernel保留了192M内存，kexec命令。</p>
<h3 id="手动触发sysrq">手动触发sysrq</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/kernel/sysrq</span><br><span class="line">echo c &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>sysrq值不为0代表工作正常</li>
<li>echo写主动触发kdump</li>
</ol>
<h2 id="centos">CentOS</h2>
<h3 id="安装crash工具-1">安装crash工具</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install kexec-tools</span><br><span class="line">yum install crash</span><br></pre></td></tr></table></figure>
<h3 id="安装内核调试信息包">安装内核调试信息包</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install kernel-debuginfo-$(uname -r)</span><br><span class="line">yum install kernel-debuginfo-common-$(uname -r)</span><br></pre></td></tr></table></figure>
<h3 id="判断服务正常开启">判断服务正常开启</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">systemctl status kdump</span><br></pre></td></tr></table></figure>
<h3 id="主动触发分析">主动触发分析</h3>
<p>这一步跟Ubuntu的一致</p>
<h2 id="分析调试">分析调试</h2>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">crash /usr/lib/debug/lib/modules/$(uname -r)/vmlinux /var/crash/XX/vmcore</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>kernel</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>内核转储文件--应用程序崩溃分析</title>
    <url>/2024/01/07/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6--%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="ubuntu">Ubuntu</h2>
<p>设置如下的程序 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">crash_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">char</span> *str =<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,<span class="string">&quot;test&quot;</span>); <span class="comment">// segment fault</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;crash test&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">crash_test</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 以下就是生成了dump文件</p>
<img src="/2024/01/07/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6--%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/Pastedimage20240113005115.png" class="">
<h3 id="查看coredump是否打开">查看coredump是否打开</h3>
<p>查看命令：<code>ulimit -c</code></p>
<p>打开命令：<code>ulimit -c unlimited</code></p>
<p>0：关闭</p>
<p>unlimited：打开 ### 配置规则 主要看内核参数<code>kernel.core_pattern</code>，路径为<code>/proc/sys/kernel/core_pattern</code>。</p>
<p>所以修改有两种方法</p>
<p>1、<code>sysctl -w kernel.core_pattern=/root/core/core-%e.%s.%p.%t</code></p>
<p>2、<code>echo -e "/root/core/core-%e.%s.%p.%t" &gt; /proc/sys/kernel/core_pattern</code></p>
<blockquote>
<p>%e：进程名称</p>
<p>%s：崩溃时收到的信号</p>
<p>%p：进程ID</p>
<p>%t：时间戳</p>
</blockquote>
<h3 id="注意关闭apport服务">注意关闭apport服务</h3>
<p>这个服务会读取core文件分析，不会保存源文件 <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">systemctl stop apport.service</span><br></pre></td></tr></table></figure></p>
<h2 id="centos">CentOS</h2>
<h3 id="编辑etcsecuritylimits.conf文件">编辑<code>/etc/security/limits.conf</code>文件</h3>
<p>末尾增加<code>soft core unlimited</code>，表示应用程序生成的core文件不受大小限制 ### 配置规则 和Ubuntu一样 ### reboot</p>
<h2 id="分析崩溃">分析崩溃</h2>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">gdb test  /root/corefile/core-test.11.6284.1705062175</span><br></pre></td></tr></table></figure>
<p><img src="Pastedimage20240113011447.png" /></p>
<p>发现最后的出错函数位于strcpy这一处，源文件第8行。</p>
]]></content>
      <tags>
        <tag>kernel</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>最大间隙问题</title>
    <url>/2019/11/24/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="最大间隙问题">最大间隙问题</h1>
<h2 id="题目">题目</h2>
<p>对于输入的一组数，个数为 n ，求这 n 个数中大小相邻的两个数之间最大差。假设对于任何实数的下取整函数耗时都是 O(1) ，设计此问题的最大间隙解法。例如。</p>
<p><code>input.txt</code> <code>output.txt</code></p>
<p>5 0.8</p>
<p>1.1 1.3 2.5 0.7 2.1</p>
<p>其中这个几个数依次排列 0.7&lt;1.1&lt;1.3&lt;2.1&lt;2.5</p>
<p>可以看到，这几个相邻数字之间的差距最大在 2.1-1.3=0.8，所以求得这几个数字之间的最大间距是 0.8</p>
<h2 id="思考">思考</h2>
<h3 id="办法一">办法一</h3>
<p>对于这个题目，首先我想到的也就是上面这个思路，首先要判断整个数组的两数相邻与否，那么我要做的就是将其排序，排序完，我再将其相邻数做差，那么也就是的都一个相邻两数的数组，得到数组之后，我就寻找数组中的最大元素，找到最大元素，再对应其索引，我就能找到那两个数字了。</p>
<p>但是，我立刻又想到了复杂度问题，因为排序算法的复杂度最低的是分治法，普通的搜索算法复杂度会比排序低的</p>
<p>复杂度计算如下 <span class="math display">\[
O(n\log n)+O(n)+O(n)=O(n\log n) \\
O(n\log n) &gt; O(n)
\]</span> ​ <!--排序算法+做差+搜索--> 这个复杂度有点尴尬，因为他不是线性复杂度，不符合题目的要求，所以这个思路是不可行的。</p>
<p>那么我只能换其他的办法来做。</p>
<h3 id="办法二">办法二</h3>
<ol type="1">
<li>设输入的是n个数，分别为 <span class="math inline">\(a_1,a_2,...,a_n​\)</span> ，设在这些数中最大的数为<span class="math inline">\(a_{max}​\)</span>，最小的是<span class="math inline">\(a_{min}​\)</span>；</li>
<li>在<span class="math inline">\(a_{max}\)</span>与<span class="math inline">\(a_{min}\)</span>之间均匀插入<span class="math inline">\(n-2\)</span>个等分点，将其分为<span class="math inline">\(n-1\)</span>段，如下图； <img src="/2019/11/24/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/%E5%88%86%E6%AE%B5.png" class=""></li>
<li>把需要剩下的<span class="math inline">\(n-2\)</span>个数按照大小放入这<span class="math inline">\(n-1​\)</span>个段中，根据鸽巢原理，那么其中必定有一个段是空的，如果有一个段是空的，那么我们就可以知道两个相邻数字之间的差值肯定是在两个段中的；</li>
<li>计算每个段中的最大值最小值<span class="math inline">\(low[i]\)</span>和<span class="math inline">\(high[i]\)</span>，再使用后一段的<span class="math inline">\(low[i+1]\)</span>减去前一段的<span class="math inline">\(high[i]\)</span>，得到这些差值中的最大值就是相邻两数的最大间隙了。</li>
</ol>
<p>分析一下复杂度，对于找最大最小值，也只需要遍历一次即可，所以复杂度为<span class="math inline">\(O(n)​\)</span>，等分点只需要得到单位长度即可，单位长度为 <span class="math display">\[
l=\frac{max-mix}{n-1}
\]</span> 每个数要判断在哪个段里面也只需要知道自己跟起始处距离几个单位长度即可 <span class="math display">\[
seg[i]=\frac{x[i]-minx}{l}+1
\]</span> 数组<span class="math inline">\(seg[i]\)</span>是一个纽带氏作用，它的索引与<span class="math inline">\(x[i]\)</span>的数的索引是一样的，数组里面存储的数对于的第几个段。这个过程也是用这个公式就可以计算完成的，所以这个过程的复杂度也是<span class="math inline">\(O(n)\)</span>，最后需要做差，使用<span class="math inline">\(low[i+1]-high[i]\)</span>得到数组的间隙的最大值即可，最后这个过程的复杂吨也只需要<span class="math inline">\(O(n)\)</span>。</p>
<p>根据前面的分析，每个过程的复杂度均为<span class="math inline">\(O(n)\)</span>，那么有限个<span class="math inline">\(O(n)\)</span>的累加复杂度还是<span class="math inline">\(O(n)\)</span>，说明这个方法是可行的，满足题目要求。</p>
<h2 id="伪代码">伪代码</h2>
<p>通过前面的分析，确定了方法二是可行的，那么就可以采用这个方法来进行伪代码书写。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先要求出最大值最小值。在这里求出它的索引，这样通过 x 数组访问就可得到它的值了</span></span><br><span class="line">function maxi</span><br><span class="line">maxi = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">x</span>(i) &gt; x[maxi])	maxi = i;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">return</span> maxi;</span><br><span class="line"></span><br><span class="line">function mini</span><br><span class="line">mini = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">x</span>(i) &gt; x[mini])	mini = i;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">return</span> mini;</span><br><span class="line"><span class="comment">//计算最大最小值，计算刻度，计算索引映射数据段数组 seg</span></span><br><span class="line">maxx = x[maxi];minx = x[mini];</span><br><span class="line">l = (maxx - minx)/(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">	seg[i] = (x[i] - minx)/l;</span><br><span class="line">end</span><br><span class="line"><span class="comment">//初始化 low 和 high 数组</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>:<span class="number">1</span>:n<span class="number">-2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>考拉兹猜想</title>
    <url>/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/</url>
    <content><![CDATA[<h1 id="考拉兹猜想">考拉兹猜想</h1>
<h2 id="考拉兹猜想定义">考拉兹猜想定义</h2>
<p>考拉兹函数定义如下</p>
<p><span class="math display">\[
f(x)=\left\{
\begin{array}{**lr**}
3n+1&amp;x为奇数且x\neq1\\
n/2&amp;x为偶数\\
1&amp;x=1
\end{array}
\right.
\]</span> 通过对 <span class="math inline">\(x\)</span> 取不同的值，发现最后都会收敛到 1。求该函数构成算法的上下界。</p>
<p>当然，下界是很容易求出来的，如果输入 <span class="math inline">\(n\)</span> ，下降最快的也就是每次下降 <span class="math inline">\(\frac{1}{2}\)</span>，这个下降速度对于的计算时间是 <span class="math inline">\(\log n\)</span> 。对于上界，用 <span class="math inline">\(MATLAB​\)</span> 带入一些数值计算。得到的结果如下：</p>
<h2 id="部分-n_0-的步长与-n-值变化">部分 <span class="math inline">\(n_0\)</span> 的步长与 <span class="math inline">\(n\)</span> 值变化</h2>
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/3~6.bmp" class="">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/7~10.bmp" class="" title="7~10">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/11~14.bmp" class="" title="11~14">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/15~18.bmp" class="" title="15~18">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/19~22.bmp" class="" title="19~22">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/23~26.bmp" class="" title="23~26">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/27~30.bmp" class="" title="27~30">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/31~34.bmp" class="" title="31~34">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/35~38.bmp" class="" title="35~38">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/39~42.bmp" class="" title="39~42">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/43~46.bmp" class="" title="43~46">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/47~50.bmp" class="" title="47~50">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/51~54.bmp" class="" title="51~54">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/55~58.bmp" class="" title="55~58">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/242~245.bmp" class="" title="242~245">
<h2 id="n_0-与计算次数分布曲线"><span class="math inline">\(n_0\)</span> 与计算次数分布曲线</h2>
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E6%AC%A1%E6%95%B0%E4%B8%8E%E5%88%9D%E5%80%BC.bmp" class="" title="次数与初值">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=400.bmp" class="">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=1000.bmp" class="" title="n0&#x3D;1000">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=5000.bmp" class="" title="n0&#x3D;5000">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=10000.bmp" class="" title="n0&#x3D;10000">
]]></content>
  </entry>
  <entry>
    <title>论文笔记-场地自动化定标方法研究及应用</title>
    <url>/2019/03/01/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-%E5%9C%BA%E5%9C%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9A%E6%A0%87%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="论文笔记-场地自动化定标方法研究及应用">论文笔记-场地自动化定标方法研究及应用</h1>
<h2 id="辐射定标的意义">辐射定标的意义</h2>
<p>卫星获取地物图像时候，由于存在各种各样的干扰，造成观测值与实际值的偏差，定标就是来（尽可能）消除这些偏差，使得卫星得到的图像与真实的物体之间（尽可能）没有这些偏差，即反映客观事物。</p>
<h3 id="辐射定标">辐射定标</h3>
<h3 id="辐射校正">辐射校正</h3>
<h2 id="遥感辐射定标方法">遥感辐射定标方法</h2>
<p>因为卫星所在环境为外太空，会受到强烈的电磁干扰和强辐射，所以器件的老化程度是很快的，这也就是卫星存在使用寿命的一个原因，受限于载荷的使用寿命。那么要延长载荷的工作年限，就需要实时测出其老化程度，对于传感器的灵敏度做出评估，改变具体参数使得其能够继续工作。比如之前对于输入为 10 就能输出 10 ，现在只能输出 5，就乘以系数 2 就可以完成跟之前一样的功能。这样器件就还可以接着使用。</p>
<span id="more"></span>
<h3 id="发射前定标准备活动">发射前定标（准备活动）</h3>
<p>相当于发射前，在地面上对各个参数进行测定，比如输入 10 输出 10 ，那这个系数就是 1，在发射前就需要记录下来。也就是相当于确定了一个基准，来为后面的调整参数做准备。</p>
<h3 id="运行时定标">运行时定标</h3>
<h4 id="星上定标">星上定标</h4>
<p>卫星运行过程中器件老化，改变参数的过程。星上定标的方法有：</p>
<ol type="1">
<li>灯+积分球</li>
<li>灯+漫反射板</li>
</ol>
<figure>
<img src="星上定标几种方式1.png" alt="定标原理图" /><figcaption aria-hidden="true">定标原理图</figcaption>
</figure>
<p>定标灯在卫星的内部，可以通过由地面的指令频繁进行定标。但是由于灯的光谱和强度与太阳的光谱差别较大，无法真实反映整个系统的变化（那有没有实现复制太阳光谱的生产灯的技术呢？），所以光谱匹配校正增加了定标的不确定性，并且灯也是仪器，也会有一定的衰变，所以精度也会下降。</p>
<ol start="3" type="1">
<li>太阳+漫反射板</li>
<li>太阳+衰减板+漫反射板</li>
</ol>
<figure>
<img src="星上定标几种方式2.png" alt="定标原理图" /><figcaption aria-hidden="true">定标原理图</figcaption>
</figure>
<p>借助太阳的话，就能实现光源的匹配，也就是光源的误差完全被消除了，但是由于需要得到太阳光，所以漫反射板就会暴露在卫星外部。漫反射板材料会在强紫外环境下分解，并且太空中的杂质也容易粘到漫反射板上。衰减板的作用是衰减紫外辐射，减缓漫反射板的分解。</p>
<p>所以，卫星内定标和卫星外定标都有各自的优缺点，卫星内定标主要问题是光源不匹配造成的误差，卫星外定标的主要问题是漫反射板分解造成的误差。</p>
<h4 id="替代定标场地定标">替代定标（场地定标）</h4>
<p>选取可知可测的地物目标作为辐射源（本身的辐射还是对太阳的反射？我的理解是太阳的反射）代替实验室和星上定标器来标定在轨器件的观测数据。因为需要计算的是卫星的表观辐亮度（也就是卫星本来应该测量出的辐亮度值）和卫星的实测辐亮度进行比较。 表观辐亮度需要通过大气传输模型得到，大气传输模型的一个重要的参数就是地表反射率，这也就是为什么我需要测量地表反射率的原因。</p>
<p>主要有三种定标方法：</p>
<ul>
<li><p>反射率基法 在卫星过场地的时候（过顶），测量场地的地表反射率和一些大气参数，通过<code>辐射传输模型</code>计算卫星入瞳处的辐射亮度；卫星上面的仪器也会记录一个遥感图像，通过遥感图像可以卫星测量的入瞳处的辐亮度，二者之间的差距就是需要校正的值，也就是定标系数的确定。</p>
<p>当然在场地的选取方面有要求，需要场地的朗伯特性好（朗伯特性是漫反射好换的评价，也是场地或者材料各向同性属性的评价标准），通过朗伯系数等参数可以计算出地表反射率（猜测应该是朗伯系数越小计算的误差越小，并且有较好的的公式）。</p>
<p>所以地表反射率和大气参数是场地定标需要得到的非常重要的参数。</p></li>
<li><p>辐照度基法 是反射率基法的改进流程与反射率基法基本相同，主要区别是增加了漫-总比的测量。</p></li>
<li><p>辐亮度基法 这个是做一个飞行器，在航空范围内，搭载一台精确定标的辐射计仪器，在卫星过顶的时候保持与卫星对场地的同步几何角度（姿态角等），然后对大气层的影响，将两者标准化到统一的环境下，主要是航空器与卫星的高度不同，而且二者之间有大气，所以需要进行一定的校正，校正完成之后，二者的值应该还是不同的（因为卫星上的仪器的老化），所以这样就可以对卫星上的仪器进行标定系数。 理论上辐亮度基法应该比较准，因为它与卫星之间的距离较小，受到的大气的干扰少，底层大气会由于人类的活动受到较大的干扰。但是由于需要有精密的飞行器和辐射计，并且其要在卫星过顶时与卫星保持一致的几何角度，所以耗资比较大，并且由于航空器需要到达的高度为3km~20km，这个飞行高度有也是客机的飞行高度，所以还需要申请空域。</p></li>
</ul>
<h2 id="人工定标">人工定标</h2>
<h4 id="概览">概览</h4>
<p>首先定标需要得到的结果是计算出辐亮度，把这个辐亮度输入辐射传输模型里面，得到一个本来应该是卫星的辐亮度，叫做表观辐亮度，这个表观辐亮度与卫星上的遥感器的辐亮度比较，就可以得到定标系数，这就完成了定标。</p>
<p>人工定标可以得到实时的地表反射率，所以根据定标流程图，直接计算代入辐射传输模型就可以了。</p>
<p>具体过程如下图所示： <img src="反射率基法.png" alt="反射率基法" /> 从上图可以看到，通过地表反射率、大气参数和气象观测（主要做辅助功能）可以输入辐射传输模型，然后再加上太阳传感器几何测量（得到一些角度值）就可以计算出卫星上面的遥感平台的表观辐亮度，通过与卫星影像（<code>.hdf</code>等带有大量信息的格式文件）做比较就可以得到定标系数。</p>
<p>对于第<span class="math inline">\(i\)</span>波段光的表观反射率（卫星的表观反射率，但是我觉得好像没什么用，因为只需要测卫星的表观辐亮度就够了吧）有 <span class="math display">\[
\rho^*_i(\theta_v,\theta_s,\phi_v,\phi_s)=\frac{\pi d^2L_i(\theta_v,\theta_s,\phi_v,\phi_s)}{E_{0i\cos\theta}}
\]</span> <span class="math inline">\(\rho^*_i(\theta_v,\theta_s,\phi_v,\phi_s)\)</span>是对于第<span class="math inline">\(i\)</span>波段光的地表反射率 <span class="math inline">\(\theta_s\)</span>是太阳的天顶角 <span class="math inline">\(\phi_s\)</span>是太阳的方位角 <span class="math inline">\(\theta_v\)</span>是观测天顶角 <span class="math inline">\(\phi_v\)</span>是观测方位角 <span class="math inline">\(L_i(\theta_v,\theta_s,\phi_v,\phi_s)\)</span>是表观辐亮度 <span class="math inline">\(E_{0i}\)</span>是日地平均距离处大气层顶的太阳辐照度 <span class="math inline">\(d​\)</span>是日地平均距离与实际距离的比值</p>
<p>表观反射率公式如公式（1）所示，各个参数计算如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">参数</th>
<th style="text-align: center;">计算方法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(\theta_s\)</span>是太阳的天顶角</td>
<td style="text-align: center;">之前论文的公式</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="math inline">\(\phi_s\)</span>是太阳的方位角</td>
<td style="text-align: center;">之前论文的公式</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(\theta_v\)</span>是观测天顶角</td>
<td style="text-align: center;">测量</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="math inline">\(\phi_v\)</span>是观测方位角</td>
<td style="text-align: center;">测量</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(L_i(\theta_v,\theta_s,\phi_v,\phi_s)\)</span>是表观辐亮度</td>
<td style="text-align: center;">由地表反射率经过辐射传输模型计算</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="math inline">\(E_{0i}\)</span>是日地平均距离处大气层顶的太阳辐照度</td>
<td style="text-align: center;">？</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(d\)</span>是日地平均距离与实际距离的比值</td>
<td style="text-align: center;">之前论文的公式</td>
</tr>
</tbody>
</table>
<h4 id="辐射传输模型">辐射传输模型</h4>
<p>输入参数</p>
<h2 id="自动化定标">自动化定标</h2>
<p>自动化定标也就是不需要人参加，仪器实时计算数据，因为是计算机系统，所以计算出的是离散值，即不断计算特定时刻点的数据。 根据前面的说明，我们要得到的数据是地表反射率和大气参数。由于人工定标可以得到实时的地表反射率，但是仪器不行（为什么？？？）。</p>
<h4 id="使用的仪器">使用的仪器</h4>
<h5 id="asc">ASC</h5>
<p>全天空成像仪（All Sky Cloud，ASC）。用来测量云量数据，判断天气情况是否适合自动化定标。</p>
<h5 id="atr">ATR</h5>
<p>通道式自动化场地辐射计（Automated Test-site Radiometer，ATR）。用来测量地表反射率，输出为<span class="math inline">\(V_{ATR-i}\)</span>，即<span class="math inline">\(i\)</span>波段的输出电压值。</p>
<h5 id="him">HIM</h5>
<p>超光谱辐照度仪（Hyperspectral Irradiance Meter，HIM）。用来测量漫总比<span class="math inline">\(\alpha\)</span>，与6S模型输出计算的直射照度一起可以计算出总照度。</p>
<h5 id="psr">PSR</h5>
<p>高精度太阳辐射计（Precision Solar Radiometer，PSR）。用来测量气溶胶的光学厚度。</p>
<h5 id="svc">SVC</h5>
<p>是一台可以精确测量高光谱地表反射率的仪器，主要是用来将ATR从多光谱扩展为高光谱的。</p>
<h4 id="地表反射率">地表反射率</h4>
<p>通过计算地表反射率。公式如下：</p>
<p><span class="math display">\[
\rho_{ATR-i}=\frac{\pi C_{ATR-i}V_{ATR-i}}{E_{总照度}}
\]</span> <span class="math inline">\(\rho_{ATR-i}\)</span>是地表反射率 <span class="math inline">\(C_{ATR-i}\)</span>是ATR在<span class="math inline">\(i\)</span>波段的辐射亮度定标系数，这是个仪器标定值，可以直接得到 <span class="math inline">\(V_{ATR-i}\)</span>是ATR在<span class="math inline">\(i\)</span>波段的输出电压值，这是仪器输出值 <span class="math inline">\(E_{总照度}\)</span>由HIM仪器得到漫总比，再经过6S模型输出直射照度，由直射照度除以直总比得到总照度 <span class="math display">\[
E_{总照度}=\frac{E_{直射照度}}{1-\alpha}
\]</span> <span class="math inline">\(\alpha\)</span>为漫总比，由HIM得到。</p>
<p>但是由于仪器是通道式的（8通道），所以只能获得在八个波长对应的地表反射率<span class="math inline">\(\rho_{ATR-i}\)</span>，但是卫星测量的却是高光谱（也就是一段波长内的辐亮度<span class="math inline">\(L_{real-segment}\)</span>），所以我需要把通道式的<span class="math inline">\(\rho_{ATR-i}\)</span>扩展到和卫星同波段的<span class="math inline">\(\rho_{ATR-segment}​\)</span>代入传输模型。</p>
<p>获取高光谱地表反射率的过程如下图所示。</p>
<p>其中SVC只需要定期测量，因为模型是建立在SVC的变化在短时间内很小的前提下。所以在测量一次SVC进行ATR多光谱扩展之后，之后按照SVC测量出的高光谱曲线来生成ATR的扩展即可。即从<span class="math inline">\(\rho_{SVC-Ref}\)</span>这条参考线上下平移到多光谱ATR仪器的八个点处，保持尽可能小的误差，这个上下平移的距离为<span class="math inline">\(k\)</span>。</p>
<p>前面已经计算出了在某一时刻八个通道的地表反射率<span class="math inline">\(\rho_{ATR-1}​\)</span>到<span class="math inline">\(\rho_{ATR-8}​\)</span>。当然平移也就是同时对高光谱的地表防反射率乘以一个系数，造成曲线的上下移动。即：</p>
<p><span class="math display">\[
\rho_{SVC-i}=\eta_i\rho_{ATR-i}
\]</span></p>
<p>在确定平移因子之前，首先通过敦煌校正场的 <code>BRDF</code>模型要对光的入射方向做一次校正，这个入射方向的校正的是因为卫星过顶时得到的数据和仪器测量的数据的时间不一定完全一致，这就导致了入射角的微小差异，所以需要将仪器测量点时刻的入射角方向校正到卫星测量时刻的入射角。校正公式： <span class="math display">\[
\rho(\lambda,\theta_2,0^\circ,0^\circ)=\frac{R(\lambda,\theta_2,0^\circ,0^\circ)}{R(\lambda,\theta_1,0^\circ,0^\circ)}\cdot\rho(\lambda,\theta_1,0^\circ,0^\circ)
\]</span></p>
<p><span class="math inline">\(\rho(\lambda,\theta_2,0^\circ,0^\circ)​\)</span>卫星过顶时刻的参考反射率</p>
<p><span class="math inline">\(\rho(\lambda,\theta_1,0^\circ,0^\circ)​\)</span>仪器测量时刻的参考反射率</p>
<p><span class="math inline">\(R(\lambda,\theta_2,0^\circ,0^\circ)​\)</span>是BRDF模型计算的反射率</p>
<p><span class="math inline">\(R(\lambda,\theta_1,0^\circ,0^\circ)​\)</span>是BRDF模型计算的反射率</p>
<p>采用<span class="math inline">\(\rho_{SVC_i}\)</span>与参考曲线<span class="math inline">\(\rho_{SVC-Ref}\)</span>的偏差的加权平均和来确定高光谱地表反射率的平移距离。平移引子<span class="math inline">\(k\)</span>由下式计算 <span class="math display">\[
W=\sqrt{\sum_{i=1}^8\frac{1}{\sigma_i}(\rho_{i}-(k+\rho_{SVC-Ref-i}))^2}
\]</span></p>
<p><span class="math inline">\(i\)</span>是波段</p>
<p><span class="math inline">\(\rho_i\)</span>是对应<span class="math inline">\(i\)</span>波段的反射率，这个是由ATR测量得到的八个值</p>
<p><span class="math inline">\(\rho_{SVC-Ref-i}\)</span>是参考反射率<span class="math inline">\(\rho_{SVC-Ref}\)</span>在波段<span class="math inline">\(i​\)</span>处的取值</p>
<p><span class="math inline">\(\sigma_i\)</span>是<span class="math inline">\(\rho_i\)</span>的标准偏差（这个应该是通道反射率，即由 ATR 测量的八个通道的反射率）</p>
<p><span class="math inline">\(k​\)</span>是平移的大小</p>
<p><span class="math inline">\(W\)</span>是用来确定<span class="math inline">\(k\)</span>的，<span class="math inline">\(W\)</span>的取值最小处就是<span class="math inline">\(k\)</span>的取值处</p>
<p><img src="高光谱地表反射率.png" /></p>
<p>从上图看出，红线就是SVC测量的值，这个值隔一段时间测量一次即可，八个黑点就是ATR在当前时刻测量的值，通过前面的，通过公式（6）的计算得到平移距离<span class="math inline">\(k\)</span>之后，将红线平移就可以得到蓝线（即目标曲线）。</p>
<p>这个时候完成的工作就是得到了实时高光谱反射率。是地面的反射率，但是还有一个问题，就是现在得到的地面反射率，是入射角为卫星过顶时刻的太阳天顶角，出射方向是测量时刻的仪器对应的观测角度，现在需要的是得到卫星过顶时刻的出射角，所以还需要进行一次BRDF校正，这次是对出射方向做的BRDF校正，(这个公式怎么写？？)</p>
<p><span class="math display">\[
\rho(\lambda,\theta_2,0^\circ,0^\circ)=\frac{R(\lambda,\theta_2,0^\circ,0^\circ)}{R(\lambda,\theta_1,0^\circ,0^\circ)}\cdot\rho(\lambda,\theta_1,0^\circ,0^\circ)
\]</span></p>
<p>现在这个<span class="math inline">\(\rho\)</span>是ATR每个测量时刻得到的高光谱通道反射率，接下来进行出射校正</p>
<p><span class="math display">\[
\rho_i=\frac{\int_{\lambda_{1}}^{\lambda_{2}}\rho(\lambda)R_i(\lambda)d\lambda}{\int_{\lambda_{1}}^{\lambda_{2}}R_i(\lambda)d\lambda}
\]</span></p>
<p><span class="math inline">\(\rho_i\)</span>是对应卫星<span class="math inline">\(i\)</span>通道的BRDF出射校正的反射率</p>
<p><span class="math inline">\(\rho(\lambda)\)</span>是得到的高光谱曲线</p>
<p><span class="math inline">\(R(\lambda)​\)</span>是对应<span class="math inline">\(i​\)</span>通道的光谱响应函数</p>
<p>这样也就得到了对应卫星的<span class="math inline">\(i\)</span>通道的经过BRDF校正之后的地表反射率，当然，这时候的时刻就是卫星过顶时刻的表观反射率。</p>
<p><img src="每日的通道反射率.png" /></p>
<p>即完成了流程图中的<code>Surface Reflectance measurement</code>参数就得到了。</p>
<h4 id="大气参数">大气参数</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">参数</th>
<th style="text-align: center;">备注</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">臭氧</td>
<td style="text-align: center;">下载</td>
</tr>
<tr class="even">
<td style="text-align: center;">气溶胶光学厚度AOD</td>
<td style="text-align: center;">PSR反演</td>
</tr>
<tr class="odd">
<td style="text-align: center;">水汽</td>
<td style="text-align: center;">下载或者计算</td>
</tr>
<tr class="even">
<td style="text-align: center;">太阳天顶角</td>
<td style="text-align: center;">直接获取</td>
</tr>
<tr class="odd">
<td style="text-align: center;">太阳方位角</td>
<td style="text-align: center;">直接获取</td>
</tr>
<tr class="even">
<td style="text-align: center;">仪器观测天顶角</td>
<td style="text-align: center;">直接获取</td>
</tr>
<tr class="odd">
<td style="text-align: center;">仪器观测方位角</td>
<td style="text-align: center;">直接获取</td>
</tr>
</tbody>
</table>
<h4 id="计算表观反射率和表观辐亮度">计算表观反射率和表观辐亮度</h4>
<p>输入大气传输模型6S，得到表观反射率（即卫星上本来应该是的反射率）和表观辐亮度。</p>
<h4 id="定标">定标</h4>
<p>得到表观反射率TOA（Top Of Atmosphere）之后，得到表观反射率和表观辐亮度，与卫星的实测的反射率和辐亮度做比较就可以得到定标系数。</p>
<h3 id="小结">小结</h3>
<p><img src="流程.bmp" /></p>
<p>其中比较重要的操作是在<code>数据处理2</code>中的三步 1. BRDF入射角校正 2. 光谱扩展 3. BRDF出射校正</p>
<p>下面就来看一下这些处理。</p>
<h3 id="计算中的一些处理">计算中的一些处理</h3>
<h4 id="brdf校正">*BRDF校正</h4>
<p>BRDF模型如下：</p>
<p><span class="math display">\[
R(\lambda,\theta_s,\theta_v,\phi)=f_{iso}(\lambda)+f_{vol}(\lambda)K_{vol}(\theta_s,\theta_v,\phi)+f_{geo}(\lambda)K_{geo}(\theta_s,\theta_v,\phi)
\]</span></p>
<p><span class="math inline">\(R(\lambda,\theta_s,\theta_v,\phi)\)</span>是二向反射比</p>
<p><span class="math inline">\(K_{vol}(\theta_s,\theta_v,\phi)​\)</span>是体散射核</p>
<p><span class="math inline">\(K_{geo}(\theta_s,\theta_v,\phi)​\)</span>是几何光学散射核</p>
<p><span class="math inline">\(K_{vol}(\theta_s,\theta_v,\phi),K_{geo}(\theta_s,\theta_v,\phi)​\)</span>均只与观测几何条件有关</p>
<p><span class="math inline">\(f_{iso},f_{vol},f_{geo}\)</span>均是系数，分别叫做波长<span class="math inline">\(\lambda\)</span>处的各向同性散射系数、体散射系数和几何光学散射系数。</p>
<p><span class="math inline">\(\theta_s​\)</span>是太阳天顶角</p>
<p><span class="math inline">\(\theta_v​\)</span>是观测天顶角</p>
<p><span class="math inline">\(\phi\)</span>相对方位角</p>
<h5 id="brdf入射校正">BRDF入射校正</h5>
<p><span class="math display">\[
\rho(\lambda,\theta_2,0^\circ,0^\circ)=\frac{R(\lambda,\theta_2,0^\circ,0^\circ)}{R(\lambda,\theta_1,0^\circ,0^\circ)}\cdot\rho(\lambda,\theta_1,0^\circ,0^\circ)
\]</span></p>
<p><span class="math inline">\(\rho(\lambda,\theta_2,0^\circ,0^\circ)​\)</span>卫星过顶时刻的参考反射率</p>
<p><span class="math inline">\(\rho(\lambda,\theta_1,0^\circ,0^\circ)\)</span>仪器测量时刻的参考反射率</p>
<p><span class="math inline">\(R(\lambda,\theta_2,0^\circ,0^\circ)​\)</span>是BRDF模型计算的反射率，在卫星测量的太阳天顶角<span class="math inline">\(\theta_2​\)</span>，观测角<span class="math inline">\(0^\circ​\)</span></p>
<p><span class="math inline">\(R(\lambda,\theta_1,0^\circ,0^\circ)\)</span>是BRDF模型计算的反射率，在仪器测量的太阳天顶角<span class="math inline">\(\theta_1\)</span>，观测角<span class="math inline">\(0^\circ\)</span></p>
<h5 id="brdf出射校正">BRDF出射校正</h5>
<p>$$</p>
<p>_i= $$</p>
<p><span class="math inline">\(\rho_{i}\)</span>是对应卫星<span class="math inline">\(i\)</span>通道的BRDF出射校正的反射率</p>
<p><span class="math inline">\(\rho(\lambda)\)</span>是得到的高光谱曲线</p>
<p><span class="math inline">\(R(\lambda)​\)</span>是对应<span class="math inline">\(i​\)</span>通道的光谱响应函数</p>
<h4 id="光谱扩展">光谱扩展</h4>
<p><span class="math display">\[
W=\sqrt{\sum_{i=1}^8\frac{1}{\sigma_i}(\rho_{i}-(k+\rho_{SVC-Ref-i}))^2}
\]</span></p>
<p><span class="math inline">\(i\)</span>是波段</p>
<p><span class="math inline">\(\rho_i\)</span>是对应<span class="math inline">\(i\)</span>波段的反射率，这个是由ATR测量得到的八个值</p>
<p><span class="math inline">\(\rho_{SVC-Ref-i}\)</span>是参考反射率<span class="math inline">\(\rho_{SVC-Ref}\)</span>在波段<span class="math inline">\(i\)</span>处的取值</p>
<p><span class="math inline">\(\sigma_i\)</span>是<span class="math inline">\(\rho_i\)</span>的标准偏差（这个应该是通道反射率，即由 ATR 测量的八个通道的反射率）</p>
<p><span class="math inline">\(k\)</span>是平移的大小</p>
<p><span class="math inline">\(W\)</span>是用来确定<span class="math inline">\(k\)</span>的，<span class="math inline">\(W\)</span>的取值最小处就是<span class="math inline">\(k\)</span>的取值处</p>
<p>即求函数<span class="math inline">\(W(k)​\)</span>取极小值时<span class="math inline">\(k​\)</span>的大小。</p>
<h4 id="s传输模型">*6S传输模型</h4>
<p>6S的源码是用FORTRAN来写的，想要对6S有所了解，还是要有一定的FORTRAN基础。由于作者是法国人，有很多变量缩写也是以法文为缩写的，不要望文生义。</p>
<p><strong>第一节 6S简介</strong></p>
<p>所谓6S是SECOND SIMULATION OF THE SATELLITE SIGNAL IN THE SOLAR SPECTRUM的简写，直译的意思就是<strong>“太阳光谱的卫星信号二次模拟”</strong>。其前身为法国里尔科技大学大气光学实验室开发的5S（SIMULATION OF THE SATELLITE SIGNAL IN THESOLAR SPECTRUM）大气辐射传输模型。在遥感观测的太阳-目标-传感器这种模式中，无论是使用卫星或是飞机，获取数据的过程中都不可避免的受到大气的影响。<strong>6S就是为了模拟这种地气系统中的太阳辐射，计算卫星入瞳处的辐射能量</strong>。通过这种模拟，我们就可以知道大气对太阳辐射的影响大小，由此来进行大气校正。</p>
<p><strong>注：我的理解，6S是遥感用于对地气系统进行模拟的正演用的软件，而不是用于“大气校正”的软件，只不过正演结果往往被用于大气校正。当然也不仅仅是输出“表观辐亮度”这个正演结果，还有正演过程中所得到的有关大气一系列量。</strong></p>
<p>6S假定晴空无云的条件下，并考虑了水汽、CO2、O3和O2等的吸收、分子和气溶胶的散射以及非均一地面和双向反射率的问题。相比与5S，6S可以模拟机载观测、设置目标高程、解释BRDF作用和临近效应，增加了新的吸收气体的计算（CO、N2O、CH4），对于瑞利和气溶胶散射的计算由于使用了逐级散射(successive order of scattering)方法，精度有了显著提升，并且光谱积分的步长从5nm改进到2.5nm。6S所能处理的光谱区间为0.25微米至4微米，低于0.25或高于4的都无法运算。缺点是对球形大气和limb (临边)观测不能处理。</p>
<p>目前国内大部分使用的都是1997年发布的标量版本，版本号一般为6SV4，在2005年Vermote等人又发布了一个矢量版本，版本号一般为6sV-1.0。相对于标量版本，矢量又做了很多改进，最明显的就是可以对于偏振进行处理。在本文中，主要介绍标量版本的使用，如果有时间，后续会再介绍矢量版本。</p>
<p>最后在后面说下，很多人都以为6S是一个软件，直接将图像输入，设置一些参数之后就可以获得大气校正过的影像了。其实这是一个完全错误的想法，原始的6S只是一个是使用Fortran写出来的一堆代码而已，而且也不能读取影像。可能大家使用的时候都是使用别人生成的EXE程序，在DOS界面里对各种参数进行输入。</p>
<p><strong>第二节 6S使用</strong></p>
<p>6S需要9个输入参数，对于这些参数都是必须仔细了解的，使用起来才能保证不会出错。学习都是一个由浅及深的过程，要努力做到知其然更知其所以然，通过对6S的学习能做到对辐射传输的公式以及推导有一个完善的了解，那么才是真正掌握了6S的使用。对于各参数下面将会一一介绍。</p>
<ol type="1">
<li><p>第一步需要输入的为几何参数igeom，其中有8情况，当选择igeom=0时，需要手动输入太阳高度角、方位角，卫星高度角、方位角以及影像获取月份与日期。剩下的7种为内置的一些卫星参数，如AVHRR、TM、GOES等，大部分都是需要输入日期，行列号等。</p></li>
<li><p>第二步为大气模式idatm的选择，6S里内置了0-6共其中大气模式，依次为无大气吸收，热带，中纬度夏季，中纬度冬季，亚寒带夏季，亚寒带冬季以及美国标准62大气模式，或者选择自定义大气廓线，选择7的话，需要输入海拔，压强，温度，水汽浓度，臭氧浓度。选择8需要输入水汽与臭氧浓度，大气廓线使用美国62。</p></li>
<li><p>第三步为选择气溶胶模式iaer，内置了7中标准气溶胶模式，为0-无气溶胶模式，1-大陆型，2-海洋型，3-城市型，5-沙漠背景的shettle模型，6-生物燃烧模型，7-平流层模型。或者自定义自己的气溶胶模式，当iaer=4时，需要输入各组分的百分比：粉状尘，水溶性物质，海洋性物质，煤烟。8为最多四种模型联合运算的一个正态分布模型。9为改进型的一种伽马分布模型。10为Junge谱幂分布模型。11为选择太阳光度计的测量值进行计算，12为读取已经设定好的参数进行计算。一般情况下如果不想做气溶胶的模式研究，就直接用刚开始介绍的7个标准模式。</p></li>
<li><p>第四步为气溶胶浓度，关于这个由两种输入方式，气溶胶光学厚度taer55或者可见度v。可见度v的单位为千米，如选择光学厚度taer55，可见度v的值就为0，taer55为550纳米处的气溶胶光学厚度。在气溶胶模式iaer中如果选择无气溶胶，可见度v的值就要为-1。其中气溶胶光学厚度与可见度有一个公式可以转换，为了快速计算，也可以使用4.8除光学厚度得到可见度，但这只是一个约值。</p></li>
<li><p>第五步为目标海拔高度xps的计算，如果xps&gt;=0，那么表示目标在水平面上。xps&lt;0表明你知道地面的高程，所以输入具体的值，不过前面加个负号。</p></li>
<li><p>第六步为传感器Xpp高度的输入，xpp=-1000 表明传感器为星载传感器，xpp=0 表明传感器在地面上。-100</p></li>
<li><p>第七步为光谱条件iwave的输入，其中6S内置了很多传感器的光谱条件，如MODIS，TM，AVHRR，SPOT，NOAA等。也可以使用自定义的光谱条件。其中光谱响应函数的计算是以2.5微米为间隔。</p></li>
</ol>
<p>iinf=(wlinf-.25)/0.0025+1.5 为起始光谱值</p>
<p>isup=(wlsup-.25)/0.0025+1.5 为结束光谱值</p>
<p>由于6S所支持的光谱区间为0.25-4，代入上式iinf=(0.25-.25)/0.0025+1.5 =1.5=1，isup=(4-.25)/0.0025+1.5=1501.5=1501。所以6S所能处理的所有光谱曲线就位1-1501条。以TM数据蓝光波段为例，其光谱范围为0.430-0.560，代入上式可以得到iinf=(0.430-.25)/0.0025+1.5=73，isup=(0.56-.25)/0.0025+1.5=125，在TM的光谱响应曲线的就可以看做前72个数值为0，后1376个也为0值。</p>
<p>在6S之中，计算各种参数的时候，尤其是在计算光谱响应的起始与结束值时，定义的为整型，但计算结果可能会为一个小数，这就要考虑截断了，FORTRAN中并没有使用四舍五入的情况，而是直接取整。</p>
<p>对于6S没有内置的一些光谱响应也就可以自己按照这个规则来写一个Fortran文件。</p>
<p>第八步为地表特性的选择，这是一个比较复杂的选项，可以选择地面作为朗伯体或者各向异性来构建BRDF。下图为6S中给出的选择路径。</p>
<p>inhomo选择0代表地表是考虑地面为朗伯体，选择1代表地表各向异性。如果inhomo=0进入第二步的选择，再次选择0表明没有方向效应的影响，然后输入roe（表面反射比）。选择1表明有方向效应的影响，然后选择内置的一些BRDF模型来进行计算。如果inhomo=1，那么接着输入igrou1（roc）（目标的反射）、igrou2（roe）（周围环境反射）、radius r（表面半径）。</p>
<p>最后一步为选择rapp大气校正模型，如果rapp&lt;-1那么就不进行大气改正，这就为遥感之中的正演，即为通过地表反射率来求得表观反射率。如果rapp&gt;0 程序将重新赋值表观反射率，使用输入的这个辐射亮度值进行表观反射率的转换。当-1</p>
<p>上面的介绍，其实还是很抽象的，想要了解6S，就必须自己动手去做。</p>
]]></content>
      <tags>
        <tag>光学</tag>
        <tag>遥感</tag>
      </tags>
  </entry>
  <entry>
    <title>几种算法误差报告</title>
    <url>/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="几种算法误差报告">几种算法误差报告</h1>
<p>​ 本文主要探讨了几种计算天顶角的算法，并且根据已经测得的标准数据进行了误差对比，以此来判断几种算法的精度。</p>
<h2 id="原算法的误差">原算法的误差</h2>
<h3 id="算法的计算步骤">算法的计算步骤</h3>
<p>​ 算法的详情我不是很了解，但是我得到了计算后的数据，将其与标准数据做对比。</p>
<h3 id="算法的实现代码">算法的实现代码</h3>
<p>​ MATLAB代码，new1是通过.csv文件导入得到的.mat数据。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%连接日期与时间</span></span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line"><span class="comment">%计算误差</span></span><br><span class="line">y = new1.Real-new1.Calculate;</span><br><span class="line"><span class="comment">%制图</span></span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果">算法的最终结果</h3>
<p>​ 得到的结果如图:</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/huang.bmp" class="" title="huang">
<p>​ 根据上图可以看出来，在所给的测试数据中，天顶角的计算误差在<strong><u>-0.006~0.01</u></strong>。</p>
<h2 id="五种算法的公共部分">五种算法的公共部分</h2>
<h3 id="前时间处理部分">前时间处理部分</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%CE%94%CF%84.png" class="" title="Δτ">
<p>​ Δτ的计算是根据上图用插值法计算的一个线性表达式</p>
<p><span class="math display">\[
\Delta\tau=96.4+0.00158t\\
\]</span></p>
<p><span class="math display">\[
t=\Delta day=(year_{now}-2060)\times365.2425
\]</span> ​ 参数解释:</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Parameter.png" class="" title="Parameter">
<p>​ 根据实际情况，确定了一些参数</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">参数名称</th>
<th style="text-align: center;">参数符号</th>
<th style="text-align: center;">单位</th>
<th style="text-align: center;">参数值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">经度</td>
<td style="text-align: center;">θ</td>
<td style="text-align: center;">rad</td>
<td style="text-align: center;">1.647765346807846</td>
</tr>
<tr class="even">
<td style="text-align: center;">纬度</td>
<td style="text-align: center;">φ</td>
<td style="text-align: center;">rad</td>
<td style="text-align: center;">0.699702497124527</td>
</tr>
<tr class="odd">
<td style="text-align: center;">压强</td>
<td style="text-align: center;">P</td>
<td style="text-align: center;">atm</td>
<td style="text-align: center;">0.85862324</td>
</tr>
<tr class="even">
<td style="text-align: center;">温度</td>
<td style="text-align: center;">T</td>
<td style="text-align: center;">℃</td>
<td style="text-align: center;">25</td>
</tr>
</tbody>
</table>
<p>​ 在计算过程中，如果月份m&lt;2，那么把月份加12，年份减1，这里的INT是表示向0取整。前处理过程如下：</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/PreProcess.png" class="">
<p><span class="math display">\[
\omega=0.017202786day^{-1}
\]</span></p>
<h3 id="后角度计算部分">后角度计算部分</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep1.png" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep2.png" class="" title="Finalstep (2)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep3.png" class="" title="Finalstep (3)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep4.png" class="" title="Finalstep (4)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep5.png" class="" title="Finalstep (5)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep6.png" class="" title="Finalstep (6)">
<p>​ 计算时只需要知道经<strong>纬度，赤经赤纬，时角</strong>就可以了。</p>
<h2 id="第一种算法的误差">第一种算法的误差</h2>
<h3 id="算法的计算步骤-1">算法的计算步骤</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al1.png" class="">
<h3 id="算法的实现代码-1">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第一种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line"><span class="comment">%调用算法函数计算</span></span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun1(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line"><span class="comment">% 计算差值</span></span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="comment">% 画图</span></span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% reportFun1函数</span></span><br><span class="line"><span class="comment">% 主要是根据文献的步骤写的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun1</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem] = readFile(data);</span><br><span class="line"><span class="comment">%需要转化为的数值或者其他常量</span></span><br><span class="line">[theta,phi,omega,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line"><span class="comment">%算法第一步，计算s1=sin(omega*te),c1=cos(omega*te);</span></span><br><span class="line">s1 = <span class="built_in">sin</span>(omega*te);c1=<span class="built_in">cos</span>(omega*te);</span><br><span class="line"><span class="comment">%算法第二步，计算s2=2*s1*c1,c2=(c1+s1)*(c1-s1)</span></span><br><span class="line">s2=<span class="number">2</span>*s1.*c1;c2=(c1+s1).*(c1-s1);</span><br><span class="line"><span class="comment">%算法第三步，计算赤经α</span></span><br><span class="line">alpha = <span class="number">-1.38880</span>+<span class="number">1.72027920</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.199</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1...</span><br><span class="line">        <span class="number">-2.65</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c1+<span class="number">4.050</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s2+<span class="number">1.525</span>*<span class="number">10</span>^(<span class="number">-2</span>)*c2;</span><br><span class="line"><span class="comment">%算法第四步，把α转换到方便的范围:α→mod(α,2π)</span></span><br><span class="line">alpha = <span class="built_in">mod</span>(alpha,<span class="number">2</span>*<span class="built_in">pi</span>);                                 <span class="comment">%根据算法用方便的范围代替，此时还是弧度</span></span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;                                <span class="comment">%转换到角度</span></span><br><span class="line"><span class="comment">%算法第五步，计算赤纬δ</span></span><br><span class="line">delta = <span class="number">6.57</span>*<span class="number">10</span>^(<span class="number">-3</span>)+<span class="number">7.347</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1<span class="number">-3.9919</span>*<span class="number">10</span>^(<span class="number">-1</span>)*c1...</span><br><span class="line">        +<span class="number">7.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*s2<span class="number">-6.60</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c2;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line"><span class="comment">%算法第六步，注意都要用弧度                              </span></span><br><span class="line">H = <span class="number">1.75283</span>+<span class="number">6.3003881</span>*t+theta-alpha;</span><br><span class="line"><span class="comment">%算法第七步,转到方便的范围H→mod(H+π，2π)-π</span></span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>,<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;                                        <span class="comment">%转角度输出</span></span><br><span class="line"><span class="comment">% %Final Step,几个算法都一样的</span></span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% ReadFile函数</span></span><br><span class="line"><span class="comment">% 读取年月日时分秒</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[y,m,d,h,min,sec,lon,lat,pre,tem]</span> = <span class="title">readFile</span><span class="params">(data)</span></span></span><br><span class="line">y = data(:,<span class="number">1</span>);</span><br><span class="line">m = data(:,<span class="number">2</span>);</span><br><span class="line">d = data(:,<span class="number">3</span>);</span><br><span class="line">h = data(:,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">min</span> = data(:,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">sec</span> = data(:,<span class="number">6</span>);</span><br><span class="line">[~,col] = <span class="built_in">size</span>(data);</span><br><span class="line"><span class="keyword">if</span>(col&gt;<span class="number">6</span>)</span><br><span class="line">lon = data(:,<span class="number">7</span>);</span><br><span class="line">lat = data(:,<span class="number">8</span>);</span><br><span class="line">pre = data(:,<span class="number">9</span>);</span><br><span class="line">tem = data(:,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [lon,lat,pre,tem] = definePara();</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=y&#x27;;</span><br><span class="line">m=m&#x27;;</span><br><span class="line">d=d&#x27;;</span><br><span class="line">h=h&#x27;;</span><br><span class="line"><span class="built_in">min</span>=min&#x27;;</span><br><span class="line"><span class="built_in">sec</span>=sec&#x27;;</span><br><span class="line">lon=lon&#x27;;</span><br><span class="line">pre=pre&#x27;;</span><br><span class="line">tem=tem&#x27;;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Preprocess函数</span></span><br><span class="line"><span class="comment">% 主要做一些前处理工作，如计算年积日等，也是根据文献来的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta,phi,omega,t,te]</span>=<span class="title">Preprocess</span><span class="params">(y,m,d,h,min,sec,lon,lat)</span></span></span><br><span class="line"><span class="comment">%调用格式[theta,phi,omega,t,te]=Proprocess(y,m,d,h,min,sec,lon,lat)</span></span><br><span class="line"><span class="comment">%输出参数[经度弧度θ，纬度弧度φ，ω常数，与2060相距天数t，t加上Δτ后的te]</span></span><br><span class="line"><span class="comment">%输入参数(年year，月month，日day，时hour，分minute，秒second，经度longitude(°)，纬度latitude(°))</span></span><br><span class="line">h = h+<span class="built_in">min</span>/<span class="number">60</span>+<span class="built_in">sec</span>/<span class="number">3600</span>;              <span class="comment">%精确时间</span></span><br><span class="line">theta = lon*<span class="built_in">pi</span>/<span class="number">180</span>;                 <span class="comment">%theta表示经度的弧度</span></span><br><span class="line">phi = lat*<span class="built_in">pi</span>/<span class="number">180</span>;                   <span class="comment">%phi表示纬度的弧度</span></span><br><span class="line">omega = <span class="number">0.017202786</span>;                <span class="comment">%omega是算法给的，单位是day^(-1)</span></span><br><span class="line">tau = <span class="number">96.4</span>+<span class="number">0.00158</span>*(y<span class="number">-2060</span>)*<span class="number">365</span>;    <span class="comment">%tau是前面用插值曲线计算的，代表论文中的Δτ</span></span><br><span class="line"><span class="keyword">if</span>(m&lt;=<span class="number">2</span>)                            <span class="comment">%根据前面的描述，如果月份小于2，那么月份+2，年份-1</span></span><br><span class="line">    m=m+<span class="number">12</span>;</span><br><span class="line">    y=y<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%根据算法1中的公式计算</span></span><br><span class="line"><span class="comment">%根据论文，也通过验证，代码没问题，下式的t是距离2060的天数，小的为-，大的为+</span></span><br><span class="line">t = <span class="built_in">fix</span>(<span class="number">365.25</span>*(y<span class="number">-2000</span>))+<span class="built_in">fix</span>(<span class="number">30.6001</span>*(m+<span class="number">1</span>))-<span class="built_in">fix</span>(<span class="number">0.01</span>*y)+d+h/<span class="number">24</span><span class="number">-21958</span>;</span><br><span class="line"><span class="comment">%te就是基于TT独立于地球转动，下面都用这个te来建立全局太阳位置</span></span><br><span class="line">te = t+<span class="number">1.574</span>*<span class="number">10</span>^(<span class="number">-5</span>)*tau;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% finalStep函数</span></span><br><span class="line"><span class="comment">% 几个算法的最终的步骤都是一样的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span>=<span class="title">finalStep</span><span class="params">(phi,delta,H,tem,pre)</span></span></span><br><span class="line"><span class="comment">%函数调用格式:[GammaAngle,zAngle]=FinalStep(phi,delta,H,tem,pre)</span></span><br><span class="line"><span class="comment">%输出参数[方位角GammaAngle(°),天顶角zAngle(°)]</span></span><br><span class="line"><span class="comment">%输入参数(纬度phi,赤纬delta,时角H,温度tem,压强pre)</span></span><br><span class="line">e0 = <span class="built_in">asin</span>(<span class="built_in">sin</span>(phi).*<span class="built_in">sin</span>(delta)+<span class="built_in">cos</span>(phi).*<span class="built_in">cos</span>(delta).*<span class="built_in">cos</span>(H));      <span class="comment">%计算升角e0=arcsin(sinφsinδ+cosφcosδcosH),计算都要弧度</span></span><br><span class="line"><span class="comment">%计算Δpe应该是修正量</span></span><br><span class="line">deltape = <span class="number">-4.26</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">cos</span>(e0);                               <span class="comment">%以地心为中心</span></span><br><span class="line">ep = e0+deltape;</span><br><span class="line"><span class="comment">%计算方位角Γ=atan2(...)见下</span></span><br><span class="line">Gamma = <span class="built_in">atan2</span>(<span class="built_in">sin</span>(H),<span class="built_in">cos</span>(H).*<span class="built_in">sin</span>(phi)-<span class="built_in">tan</span>(delta).*<span class="built_in">cos</span>(phi));</span><br><span class="line">GammaAngle = Gamma*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltare = <span class="number">0.08422</span>*pre./((<span class="number">273</span>+tem).*<span class="built_in">tan</span>(ep+(<span class="number">0.003138</span>./(ep+<span class="number">0.08919</span>))));</span><br><span class="line"><span class="comment">%计算天顶角z</span></span><br><span class="line">z = <span class="built_in">pi</span>/<span class="number">2</span>-ep-deltare;</span><br><span class="line">zAngle = z*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-1">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="" title="第一种算法">
<p>​ 根据文献的第一种算法计算的误差不容乐观，在<strong><u>-0.2<sub>0.3</u><strong>之间，参考黄冬师兄算的误差，这个扩大了30倍。说明这个算法的精度不是很高，在文献中，这个算法最后也使用了计算数据进行了比较，他给出天顶角的误差范围在</strong><u>-0.19</sub>0.19</u></strong>，实际计算的比这个范围稍大些，只能说是我们这个数据不够精确或者文献的数据凑得比较好。</p>
<h2 id="第二种算法的误差">第二种算法的误差</h2>
<h3 id="算法的计算步骤-2">算法的计算步骤</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al2.png" class="">
<h3 id="算法的实现代码-2">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第二种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun2(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% reportFun2函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun2</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line">[theta,phi,omega,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line">[~,col]=<span class="built_in">size</span>(te);</span><br><span class="line"><span class="comment">%Step1</span></span><br><span class="line">s1=<span class="built_in">sin</span>(omega*te);c1=<span class="built_in">cos</span>(omega*te);</span><br><span class="line"><span class="comment">%Step2</span></span><br><span class="line">s2=<span class="number">2</span>*s1.*c1;c2=(c1+s1).*(c1-s1);</span><br><span class="line"><span class="comment">%Step3</span></span><br><span class="line">s3=s2.*c1+c2.*s1;c3=c2.*c1-s2.*s1;</span><br><span class="line"><span class="comment">%Step4</span></span><br><span class="line">s4=<span class="number">2</span>*s2.*c2;c4=(c2+s2).*(c2-s2);</span><br><span class="line"><span class="comment">%Step5</span></span><br><span class="line">alpha = <span class="number">-1.38880</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">1.72027920</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.199</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1...</span><br><span class="line">        <span class="number">-2.65</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c1+<span class="number">4.050</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s2+<span class="number">1.525</span>*<span class="number">10</span>^(<span class="number">-2</span>)*c2...</span><br><span class="line">        +<span class="number">1.33</span>*<span class="number">10</span>^(<span class="number">-3</span>)*s3+<span class="number">3.8</span>*<span class="number">10</span>^(<span class="number">-4</span>)*c3+<span class="number">7.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*s4+<span class="number">6.2</span>*<span class="number">10</span>^(<span class="number">-4</span>)*c4;</span><br><span class="line"><span class="comment">%Step6</span></span><br><span class="line">alpha = <span class="built_in">mod</span>(alpha,<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line"><span class="comment">%Step7</span></span><br><span class="line">delta = <span class="number">6.57</span>*<span class="number">10</span>^(<span class="number">-3</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">7.347</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1<span class="number">-3.9919</span>*<span class="number">10</span>^(<span class="number">-1</span>)*c1...</span><br><span class="line">        +<span class="number">7.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*s2<span class="number">-6.60</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c2+<span class="number">1.50</span>*<span class="number">10</span>^(<span class="number">-3</span>)*s3...</span><br><span class="line">        <span class="number">-2.58</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c3+<span class="number">6</span>*<span class="number">10</span>^(<span class="number">-5</span>)*s4<span class="number">-1.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*c4;</span><br><span class="line"><span class="comment">%Step8</span></span><br><span class="line">H = <span class="number">1.75283</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">6.3003881</span>*t+theta-alpha;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col);</span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>​ 其实最大的不同只是reportFun()函数是不一样的，因为这个是算法的核心，主函数也是类似的，写入数据，调用函数，得到输出，最后画一下误差图。</p>
<p>​ 其他的前处理函数，后处理函数都是一模一样的。</p>
<h3 id="算法的最终结果-2">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%BA%8C%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 根据文献的第二种算法计算的误差也是不太OK，而且有个严重的问题。从图上看出来，这个集散的误差范围在<strong><u>-0.2<sub>0.2</u><strong>之间，参考黄冬师兄算的误差，这个误差其实相对于第一种算法减小的不是很多。而且对比文献，他给出天顶角的误差范围在</strong><u>-0.034</sub>0.034</u></strong>，实际计算的比这个范围大了6倍，这个误差还是很大的。</p>
<h2 id="第三种算法的误差">第三种算法的误差</h2>
<h3 id="算法的计算步骤-3">算法的计算步骤</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al3.png" class="">
<h3 id="算法的实现代码-3">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第三种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun3(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun3</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line"><span class="comment">%需要转化为的数值或者其他常量</span></span><br><span class="line">[theta,phi,~,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line">[~,col]=<span class="built_in">size</span>(te);</span><br><span class="line">omegaa = <span class="number">0.0172019715</span>;</span><br><span class="line"><span class="comment">%Step1</span></span><br><span class="line">lambda = <span class="number">-1.388803</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">1.720279216</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.3366</span>*<span class="number">10</span>^(<span class="number">-2</span>)...</span><br><span class="line">         *<span class="built_in">sin</span>(omegaa*te<span class="number">-0.06172</span>)+<span class="number">3.53</span>*<span class="number">10</span>^(<span class="number">-4</span>)*<span class="built_in">sin</span>(<span class="number">2</span>*omegaa*te<span class="number">-0.1163</span>);</span><br><span class="line"><span class="comment">%Step2</span></span><br><span class="line">epsilon = <span class="number">4.089567</span>*<span class="number">10</span>^(<span class="number">-1</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,col)<span class="number">-6.19</span>*<span class="number">10</span>^(<span class="number">-9</span>)*te;</span><br><span class="line"><span class="comment">%Step3</span></span><br><span class="line">slambda=<span class="built_in">sin</span>(lambda);clambda=<span class="built_in">cos</span>(lambda);</span><br><span class="line"><span class="comment">%Step4</span></span><br><span class="line">sepsilon=<span class="built_in">sin</span>(epsilon);cepsilon=<span class="built_in">sqrt</span>(<span class="number">1</span>-sepsilon.^(<span class="number">2</span>));</span><br><span class="line"><span class="comment">%Step5</span></span><br><span class="line">alpha = <span class="built_in">atan2</span>(slambda.*cepsilon,clambda);</span><br><span class="line"><span class="comment">%Step6</span></span><br><span class="line"><span class="keyword">if</span>(alpha&lt;<span class="number">0</span>)</span><br><span class="line">    alpha = alpha+<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%Step7</span></span><br><span class="line">delta = <span class="built_in">asin</span>(slambda.*sepsilon);</span><br><span class="line"><span class="comment">%Step8</span></span><br><span class="line">H = <span class="number">1.75283</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">6.3003881</span>*t+theta-alpha;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col);</span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-3">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%B8%89%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 从图上看出来，这个计算的误差范围在<strong><u>-0.17<sub>0.17</u><strong>之间。对比文献，他给出天顶角的误差范围在</strong><u>-0.0093</sub>0.0093</u></strong>，实际计算的比这个范围大了18倍，说明这个差距还是很大的，是有一定问题的。</p>
<h2 id="第四种算法的误差">第四种算法的误差</h2>
<h3 id="算法的计算步骤-4">算法的计算步骤</h3>

<p>.png)</p>

<p>.png)</p>
<h3 id="算法的实现代码-4">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第三种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun4(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun4</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line">[theta,phi,~,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line">[~,col]=<span class="built_in">size</span>(te);</span><br><span class="line">omegaa = <span class="number">0.0172019715</span>;</span><br><span class="line">omegan = <span class="number">9.282</span>*<span class="number">10</span>^(<span class="number">-4</span>);</span><br><span class="line"><span class="comment">%Step1</span></span><br><span class="line">L = <span class="number">1.752790</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">1.720279216</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.3366</span>*<span class="number">10</span>^(<span class="number">-2</span>)...</span><br><span class="line">    *<span class="built_in">sin</span>(omegaa*te<span class="number">-0.06172</span>)+<span class="number">3.53</span>*<span class="number">10</span>^(<span class="number">-4</span>)*<span class="built_in">sin</span>(<span class="number">2</span>*omegaa*te<span class="number">-0.1163</span>);</span><br><span class="line"><span class="comment">%Step2</span></span><br><span class="line">nu = omegan*te<span class="number">-0.8</span>;</span><br><span class="line"><span class="comment">%Step3</span></span><br><span class="line">deltalambda = <span class="number">8.34</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">sin</span>(nu);</span><br><span class="line"><span class="comment">%Step4</span></span><br><span class="line">lambda = L.*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+deltalambda;</span><br><span class="line"><span class="comment">%Step5</span></span><br><span class="line">epsilon = <span class="number">4.089567</span>*<span class="number">10</span>^(<span class="number">-1</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,col)<span class="number">-6.19</span>*<span class="number">10</span>^(<span class="number">-9</span>)*te+<span class="number">4.46</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">cos</span>(nu);</span><br><span class="line"><span class="comment">%Step6</span></span><br><span class="line">slambda=<span class="built_in">sin</span>(lambda);clambda=<span class="built_in">cos</span>(lambda);</span><br><span class="line"><span class="comment">%Step7</span></span><br><span class="line">sepsilon=<span class="built_in">sin</span>(epsilon);cepsilon=<span class="built_in">cos</span>(epsilon);</span><br><span class="line"><span class="comment">%Step8</span></span><br><span class="line">alpha = <span class="built_in">atan2</span>(slambda.*cepsilon,clambda);</span><br><span class="line"><span class="comment">%Step9</span></span><br><span class="line"><span class="keyword">if</span>(alpha&lt;<span class="number">0</span>)</span><br><span class="line">    alpha = alpha+<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%Step10</span></span><br><span class="line">delta = <span class="built_in">asin</span>(slambda.*sepsilon);</span><br><span class="line"><span class="comment">%Step11</span></span><br><span class="line">H = <span class="number">1.7528311</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">6.300388099</span>*t+theta-alpha+<span class="number">0.92</span>*deltalambda;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col);</span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-4">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 算法计算的误差在<strong><u>-0.17<sub>0.17</u><strong>之间。与算法三计算的差不多，文献中写的误差范围是</strong><u>-0.0091</sub>0.0091</u></strong>，差了17.5倍左右。</p>
<h2 id="第五种算法的误差">第五种算法的误差</h2>
<h3 id="算法的计算步骤-5">算法的计算步骤</h3>
<p>使用算法5计算的时候需要给表格中的参数。</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al5table.png" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al5.png" class="">

<p>.png)</p>
<h3 id="算法的实现代码-5">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第三种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun4(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% reportFun5函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun5</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line"><span class="comment">%需要转化为的数值或者其他常量</span></span><br><span class="line">[theta,phi,~,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line"><span class="comment">%确定常数</span></span><br><span class="line">L0 = <span class="number">1.7527901</span>;</span><br><span class="line">L1 = <span class="number">1.7202792159</span>*<span class="number">10</span>^(<span class="number">-2</span>);</span><br><span class="line">omegaa = <span class="number">0.0172019715</span>;</span><br><span class="line"><span class="built_in">beta</span> = <span class="number">2.92</span>*<span class="number">10</span>^(<span class="number">-5</span>);</span><br><span class="line">omegan = <span class="number">9.282</span>*<span class="number">10</span>^(<span class="number">-4</span>);</span><br><span class="line">omega = [<span class="number">1.49</span>*<span class="number">10</span>^(<span class="number">-3</span>),<span class="number">4.31</span>*<span class="number">10</span>^(<span class="number">-3</span>),<span class="number">1.076</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">1.575</span>*<span class="number">10</span>^(<span class="number">-2</span>),...</span><br><span class="line">         <span class="number">2.152</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">3.152</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">2.1277</span>*<span class="number">10</span>^(<span class="number">-1</span>)];</span><br><span class="line">a = [<span class="number">3.33024</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">3.512</span>*<span class="number">10</span>^(<span class="number">-4</span>),<span class="number">5.2</span>*<span class="number">10</span>^(<span class="number">-6</span>)];</span><br><span class="line">dbeta = <span class="number">-8.23</span>*<span class="number">10</span>^(<span class="number">-5</span>);</span><br><span class="line">d = [<span class="number">1.27</span>,<span class="number">1.21</span>,<span class="number">2.33</span>,<span class="number">3.49</span>,<span class="number">2.67</span>,<span class="number">1.28</span>,<span class="number">3.14</span>]*<span class="number">10</span>^(<span class="number">-5</span>);</span><br><span class="line">b = [<span class="number">-2.0582</span>*<span class="number">10</span>^(<span class="number">-3</span>),<span class="number">-4.07</span>*<span class="number">10</span>^(<span class="number">-5</span>),<span class="number">-9</span>*<span class="number">10</span>^(<span class="number">-7</span>)];</span><br><span class="line">Phi = [<span class="number">-2.337</span>,<span class="number">3.065</span>,<span class="number">-1.533</span>,<span class="number">-2.358</span>,<span class="number">0.074</span>,<span class="number">1.547</span>,<span class="number">-0.488</span>];</span><br><span class="line">     </span><br><span class="line">[~,volume]=<span class="built_in">size</span>(te);</span><br><span class="line">s1=<span class="built_in">sin</span>(omegaa*te);c1=<span class="built_in">cos</span>(omegaa*te);</span><br><span class="line">s2=<span class="number">2</span>*s1.*c1;c2=(c1+s1).*(c1-s1);</span><br><span class="line">s3=s2.*c1+c2.*s1;c3=c2.*c1-s2.*s1;</span><br><span class="line">Sigma7=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">7</span></span><br><span class="line">    Sigma7=Sigma7+d(<span class="built_in">i</span>)*<span class="built_in">sin</span>(omega(<span class="built_in">i</span>)*te+Phi(<span class="built_in">i</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,volume));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L=L0*<span class="built_in">ones</span>(<span class="number">1</span>,volume)+L1*te+(a(<span class="number">1</span>)*s1+a(<span class="number">2</span>)*s2+a(<span class="number">3</span>)*s3+b(<span class="number">1</span>)*c1+b(<span class="number">2</span>)*c2+b(<span class="number">3</span>)*c3)...</span><br><span class="line">    +dbeta*s1.*<span class="built_in">sin</span>(<span class="built_in">beta</span>*te)+Sigma7;</span><br><span class="line">nu=omegan*te<span class="number">-0.8</span>;</span><br><span class="line">deltalambda=<span class="number">8.34</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">sin</span>(nu);</span><br><span class="line">lambda=L+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume)+deltalambda;</span><br><span class="line">slambda=<span class="built_in">sin</span>(lambda);clambda=<span class="built_in">cos</span>(lambda);</span><br><span class="line">epsilon = <span class="number">4.089567</span>*<span class="number">10</span>^(<span class="number">-1</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,volume)<span class="number">-6.19</span>*<span class="number">10</span>^(<span class="number">-9</span>)*te+<span class="number">4.46</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">cos</span>(nu);</span><br><span class="line">sepsilon=<span class="built_in">sin</span>(epsilon);cepsilon=<span class="built_in">sqrt</span>(<span class="number">1</span>-sepsilon.^(<span class="number">2</span>));</span><br><span class="line">alpha=<span class="built_in">atan2</span>(slambda.*cepsilon,clambda);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:volume</span><br><span class="line"><span class="keyword">if</span> alpha(<span class="built_in">i</span>)&lt;<span class="number">0</span></span><br><span class="line">    alpha(<span class="built_in">i</span>)=alpha(<span class="built_in">i</span>)+<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">delta=<span class="built_in">asin</span>(slambda.*sepsilon);</span><br><span class="line">H = <span class="number">1.7528311</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume,<span class="number">1</span>)+<span class="number">6.300388099</span>*t+theta-alpha+<span class="number">0.92</span>*deltalambda;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume);</span><br><span class="line">deltaAngle=delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle=H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">alphaAngle=alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-5">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%BA%94%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 图上看误差大概也是<strong><u>-0.17<sub>0.16</u><strong>，文献的误差范围给的是</strong><u>-0.0025</sub>0.0027</u></strong>，差距是64倍左右，这个差距是很大的。</p>
<h4 id="分析一下8月7日">分析一下8月7日</h4>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%955_8%E6%9C%887%E6%97%A5%E8%A7%92%E5%BA%A6%E5%80%BC.bmp" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%955_8%E6%9C%887%E6%97%A5%E8%AF%AF%E5%B7%AE%E6%95%A3%E7%82%B9.bmp" class="">
<p>​ 看了上面两张图，第一张其实看不出来什么，因为误差相对于测量角度的实际值差了100倍左右，能看出来的只是说一天中太阳天顶角是这么分布的。</p>
<p>​ 第二张图和第一张图结合看其实是能看出来一点东西的，看到其实到了6点左右也是天顶角最小，这也是说明这时候高度角最大，太阳在比较高的地方，这时候计算的误差是小的，在00：00和12：00处误差也较大。</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%955_8%E6%9C%887%E6%97%A5%E5%88%86%E5%B8%83%E5%9B%BE.bmp" class="">
<p>​ 看了上面的三幅图，看到这些计算的结果，可以发现误差的分布也有点稀奇古怪，看不出来是什么类型的分布，因为我觉得数据的总数也不是很大，来计算的点数也不够多。可能这样子反应的规律也不是跟明确。总体上来看，还是误差小的占的比例大，所以可能这也是可以稍微有点欣慰的一件事吧。</p>
<h2 id="总结">总结</h2>
<h3 id="几种计算方法的结果">几种计算方法的结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%951~%E7%AE%97%E6%B3%954.bmp" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%950%E5%92%8C%E7%AE%97%E6%B3%955.bmp" class="">
<h3 id="说明">说明</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">算法</th>
<th style="text-align: center;">文献给的误差范围</th>
<th style="text-align: center;">计算的误差范围</th>
<th style="text-align: center;">相差倍数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">[-0.19,0.19]</td>
<td style="text-align: center;">[-0.2,0.3]</td>
<td style="text-align: center;">1.05~1.5</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">[-0,034,0.034]</td>
<td style="text-align: center;">[-0.2,0.2]</td>
<td style="text-align: center;">5.8</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">[-0.0093,0.0092]</td>
<td style="text-align: center;">[-0.17,0.17]</td>
<td style="text-align: center;">18.3</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">[-0.0091,0.0093]</td>
<td style="text-align: center;">[-0.17,0.17]</td>
<td style="text-align: center;">18.7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">[-0.0025,0.0027]</td>
<td style="text-align: center;">[-0.16,0.16]</td>
<td style="text-align: center;">59.3</td>
</tr>
</tbody>
</table>
<p>从这个表格中看出，几种计算出来的结果都在只能最高保证在0.16。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] Roberto Grena Five new algorithms for the computation of sun position from 2010 to 2110 Solar Energy</p>
<p>https://www.sciencedirect.com/science/article/pii/S0038092X12000400</p>
]]></content>
  </entry>
  <entry>
    <title>CsvHelper 使用手册</title>
    <url>/2018/09/04/CsvHelper%20%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="csvhelper-使用手册">CsvHelper 使用手册</h1>
<h2 id="导引">导引</h2>
<h3 id="安装">安装</h3>
<p>在包管理控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PM&gt; </span><span class="language-bash">Install-Package CsvHelper</span></span><br></pre></td></tr></table></figure>
<p>.NET CLI 控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">dotnet add package CsvHelper</span></span><br></pre></td></tr></table></figure>
<h3 id="读一个-csv-文件">读一个 CSV 文件</h3>
<p>首先创建一个这样的 CSV 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ID,Name</span><br><span class="line">1,one</span><br><span class="line">2,two</span><br></pre></td></tr></table></figure>
<p>做一个类的定义如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ID&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们创建的类的属性名能够匹配目标 CSV 文件的表头，那么我们就无需任何配置的读取这个文件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;Path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>GetRecords&lt;T&gt;</code> 方法将会返回一个 <code>IEnumerable&lt;T&gt;</code>将会<code>yield</code> records。这也就意味着当你在反复查询记录的时候一次只能返回一条，即仅仅只有文件的一小部分会被读到内存中。不过要小心的是，如果你做了任何关于 LINQ 投影的事情，就像调用 <code>.ToList()</code>，整个文件都会被读入到内存中。 <code>CsvReader</code>只能向前走，所以当你想要运行任何 LINQ 查询来防范你的数据，你需要知道如果这样做的话，整个文件会被加载到内存中。</p>
<p>加入我们对前面的 CSV 文件做了一点点改变，使它与之前的属性不是完全匹配了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id,name</span><br><span class="line">1,one</span><br><span class="line">2,two</span><br></pre></td></tr></table></figure>
<p>在此次改动中，我们把名字都用小写字母替代了。由于我们之前设置的属性名能是驼峰式的，这样我们就可以改变属性头与表格头的匹配方式了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    csv.Configuration.PrepareHeaderForMatch = (<span class="built_in">string</span> header,<span class="built_in">int</span> index) =&gt; header.ToLower();</span><br><span class="line">    <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用配置 <code>PrepareHeaderForMatch</code>，我们就能够实现不同名称之间的配对。头名和属性名都包含在 <code>PrepareHeaderForMatch</code>函数中。当 reader 需要使用属性名来设置头名的时候，他们将会匹配。你还能够使用这个函数来做一些其他的事情，比如说空格或者其他的一些字符。</p>
<p>那我们再来看看如果我们去掉 CSV 文件的头名怎么破吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,one</span><br><span class="line">2,two</span><br></pre></td></tr></table></figure>
<p>首先我们需要告诉 reader 文件中已经没有头记录了，配置如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    csv.Configuration.HasHeadRecord = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">record</span> = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CsvReader 将会使用类中属性的位置作为索引点。但是这有一个问题，你不能再依靠 .NET 中类成员的顺序了。解决方法就是将这个属性映射到 CSV 文件的特定位置。</p>
<p>一种方法就是用属性映射。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Index(0)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Index(1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>IndexAttribute</code>允许你指定你想要使用属性的位置。</p>
<p>你还可以使用名字作为映射，让我们使用前面的小写头部的例子来看看怎么使用名字匹配。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;id&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;name&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有许多的属性你同样可以使用。</p>
<p>如果我们无法操作我们做匹配的这个类来增加我们需要的属性怎么办？在这个例子中，我们会使用 <code>ClassMap</code>做一次流利的匹配。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span>:<span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">		Map(M =&gt; m.Id).Name(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">		Map(m =&gt; m.Name).Name(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了来使用映射，我们需要注册配置。（也就是写一下配置方法）</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">    <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推荐创造一个类映射，因为这样的话使用 CsvHelper 会更加强大。</p>
<h3 id="写一个-csv-文件">写一个 CSV 文件</h3>
<p>现在让我们来看一看怎么写一个 CSV 文件吧，这跟读基本上是一样的，只是顺序相反。</p>
<p>跟之前读文件一样，我们用一样的类定义。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们创建一些这样的记录（Records）</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">new</span> Foo&#123;Id=<span class="number">1</span>,Name=<span class="string">&quot;one&quot;</span>&#125;,</span><br><span class="line">	<span class="keyword">new</span> Foo&#123;Id=<span class="number">2</span>,Name=<span class="string">&quot;two&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们可以无需配置的把这些记录写到文件中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;Path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">&#123;</span><br><span class="line">    csv.WriteRecords(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>WriteRecords</code>方法将会把所有的记录都写到文件中，在你完成写数据之后，你应该调用 <code>writer.Flush()</code>来确保写入器内部缓冲区中的所有数据都已被刷新到文件中。在 <code>using</code>块中的缓存器会自动被清空，因此我们并不需要刻意的去处理这个块。使用 <code>using</code>块来包含 <code>IDisposable</code>对象是一种比较好的方式，这个对象会在 <code>using</code>块退出之后 自己做出相应的处理（在我们这个例子中会自动清除缓存）。</p>
<p>记得我们是不能在 .NET 里面依赖属性的顺序的吗？如果我们写一个有标头的类的时候，这并不重要，我们只需要在后面使用标头即可。如果我们想要将标头安置在 CSV 文件的相应位置的时候，我们就需要指定索引来保证它的顺序，所以当你在写入 CSV 文件数据的时候设置索引是一个好习惯。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span>:<span class="title">classMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    	Map(m=&gt;m.Id).Index(<span class="number">0</span>).Name(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    	Map(m=&gt;m.Name).Index(<span class="number">1</span>).Name(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="举例说明">举例说明</h2>
<h3 id="预备知识">预备知识</h3>
<p>下面是使用 CsvHelper 需要知道预备知识。</p>
<p>这里有一些关于 .NET 的基础知识是你使用 CsvHelper 前需要知道的，微软有一个<a href="https://docs.microsoft.com/zh-cn/dotnet/">很棒的文档</a>能够帮助你学习更多。</p>
<h4 id="使用和释放">使用和释放</h4>
<p>不论何时你什么时候创建一个 <code>IDisposable</code> 的对象，你都要在使用资源后释放它，大多数类使用非托管资源来是实现 <code>IDisposable</code>，这也就意味着在 <code>System.IO</code>命名空间里的类都需要被释放。</p>
<p>最好的练习释放对象的方法就是使用 <code>using</code>块中写代码，因为在 <code>using</code> 块中，资源会快速自动的被处理。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在这里使用 stream 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stream 对象将会在这里被快速的处理</span></span><br></pre></td></tr></table></figure>
<p>如果你在后面也需要用到这个对象，并且稍后会释放它，那么 使用<code>using</code>会帮你做一些错误处理，因此使用 <code>using</code>相比于直接调用 <code>Dispose</code>依旧是一个更好的选择。但是关于这个目前仍然有一些争论，因为有人觉得它没有展现出使用意图。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="comment">//之后其他部分的代码</span></span><br><span class="line"><span class="keyword">using</span> (stream)&#123;	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读写文件">读写文件</h4>
<p><code>System.IO.File</code>组件包含有打开文件进行读写的方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenWrite(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些东西同样返回一个 <code>FileStream</code>来为操作文件进行服务。加入我们的数据是文本型的，我们就需要 <code>StreamReader</code>和 <code>StreamWriter</code>来读写文本。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream))    </span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(stream))    </span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>StreamReader</code>和 <code>StreamWriter</code>都有一种简便写法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 CsvHelper 并不知道你文件数据的具体编码，所以当你有一个特殊的编码的时候。你需要再你的流（stream）里面指定它。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StremaReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>),Encoding.UTF8)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>,Encoding.UTF8))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CsvReader</code> 和 <code>CsvWriter</code>的构造函数分别是 <code>TextReader</code> 和 <code>TextWriter</code>，<code>TextReader</code> 和 <code>TextWriter</code>都是读写文本的一个抽象类。<code>StreamReader</code>和 <code>StreamWriter</code>都继承自 <code>TextReader</code> 和 <code>TextWriter</code>，因此我们也把它们和<code>CsvReader，CsvWriter</code>一起使用。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">&#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读-csv-文件">读 CSV 文件</h3>
<h4 id="获取类记录">获取类记录</h4>
<p>将 CSV 插入到对应类的对象中。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取动态记录">获取动态记录</h4>
<p>将 CSV 插入到 <code>dynamic</code>对象中，由于无法判断属性的类型，所以动态对象上的所有属性都是字符串。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;<span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取匿名类型的记录">获取匿名类型的记录</h4>
<p>如果你需要将 CSV 插入到匿名类型的对象中，仅仅只要提供匿名类型的定义即可。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> anonymousTypeDefinition = <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Id = <span class="literal">default</span>(<span class="built_in">int</span>),</span><br><span class="line">            Name = <span class="built_in">string</span>.Empty</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords(anonymousTypeDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举类型记录">枚举类型记录</h4>
<p>将 CSV 转换为一个类对象，该对象可在枚举的每次迭代中重用。每个枚举将生成给定的记录，但只生成映射的成员。如果你提供一个映射却没有映射其中的一个成员，那么该成员就不会得到当前行的数据。值得注意的是，对于你在工程中调用的任何方法会被强制返回一个 <code>IEnumerable</code> 的值，就像方法 <code>ToList()</code> ，你会得到一个与所有记录的实例与你在 CSV 中最后一条记录相对应的的列表。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">record</span> = <span class="keyword">new</span> Foo();</span><br><span class="line">        <span class="keyword">var</span> records = csv.EnumerateRecords(<span class="keyword">record</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> records)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// r is the same instance as record.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="手动读取">手动读取</h4>
<p>因为一些原因，不去配置一个与你的类定义一一对应的映射会变得更加容易，只需要再多纪杭代码就可手动实现行的读取。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;();</span><br><span class="line">        csv.Read();</span><br><span class="line">        csv.ReadHeader();</span><br><span class="line">        <span class="keyword">while</span> (csv.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">record</span> = <span class="keyword">new</span> Foo</span><br><span class="line">            &#123;</span><br><span class="line">                Id = csv.GetField&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;Id&quot;</span>),</span><br><span class="line">                Name = csv.GetField(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            records.Add(<span class="keyword">record</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读取多样的数据集">读取多样的数据集</h4>
<p>因为某些原因，CSV 里面会包含多类型的混合数据集。就像这样读就没有什么问题了，当你检索数据的时候，你需要相应的改变类的类型。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FooId,Name</span><br><span class="line">1,foo</span><br><span class="line"></span><br><span class="line">BarId,Name</span><br><span class="line">07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.IgnoreBlankLines = <span class="literal">false</span>;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;BarMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> fooRecords = <span class="keyword">new</span> List&lt;Foo&gt;();</span><br><span class="line">        <span class="keyword">var</span> barRecords = <span class="keyword">new</span> List&lt;Bar&gt;();</span><br><span class="line">        <span class="keyword">var</span> isHeader = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (csv.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHeader)</span><br><span class="line">            &#123;</span><br><span class="line">                csv.ReadHeader();</span><br><span class="line">                isHeader = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(csv.GetField(<span class="number">0</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                isHeader = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (csv.Context.HeaderRecord[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;FooId&quot;</span>:</span><br><span class="line">                    fooRecords.Add(csv.GetRecord&lt;Foo&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;BarId&quot;</span>:</span><br><span class="line">                    barRecords.Add(csv.GetRecord&lt;Bar&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Unknown record type.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;FooId&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">BarMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Bar</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;BarId&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读取多种记录类型">读取多种记录类型</h4>
<p>如果你的 CSV 文件中每行都有不同的记录类型，你应该读基于行的类型。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A,1,foo</span><br><span class="line">B,07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.HasHeaderRecord = <span class="literal">false</span>;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;BarMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> fooRecords = <span class="keyword">new</span> List&lt;Foo&gt;();</span><br><span class="line">        <span class="keyword">var</span> barRecords = <span class="keyword">new</span> List&lt;Bar&gt;();</span><br><span class="line">        <span class="keyword">while</span> (csv.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (csv.GetField(<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                    fooRecords.Add(csv.GetRecord&lt;Foo&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    barRecords.Add(csv.GetRecord&lt;Bar&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Unknown record type.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Index(<span class="number">1</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Index(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">BarMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Bar</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Index(<span class="number">1</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Index(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="写-csv-文件">写 CSV 文件</h3>
<h4 id="写类对象">写类对象</h4>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> Foo &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<h4 id="写动态类对象">写动态类对象</h4>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;<span class="built_in">dynamic</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dynamic</span> <span class="keyword">record</span> = <span class="keyword">new</span> ExpandoObject();</span><br><span class="line">    <span class="keyword">record</span>.Id = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">record</span>.Name = <span class="string">&quot;one&quot;</span>;</span><br><span class="line">    records.Add(<span class="keyword">record</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StringWriter())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line"></span><br><span class="line">        writer.ToString().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<h4 id="写匿名类型对象">写匿名类型对象</h4>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;<span class="built_in">object</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<h4 id="类映射">类映射</h4>
<h5 id="映射属性">映射属性</h5>
<p>映射到属性。这个将会把类的属性映射到 CSV 数据的标头名字上，映射需要在配置中被注册，例子等价于一点也不使用类映射，用标头来匹配类名。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;        </span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过名称映射">通过名称映射</h5>
<p>通过标头名映射到属性，如果你的属性名不匹配你的类名，那么你就可以通过名字来映射到属性。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Column1,Column2</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;ColumnA&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Name(<span class="string">&quot;ColumnB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过可替换的名映射">通过可替换的名映射</h5>
<p>多标头名映射至属性，如果你有一个可以改变的标头名，你就可以指定多种头名。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;TheId&quot;</span>, <span class="string">&quot;Id&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Name(<span class="string">&quot;TheName&quot;</span>, <span class="string">&quot;Name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="映射复制名">映射复制名</h5>
<p>映射已经复制标头名的属性，有时候你复制了头名，这时候会通过标题名称索引来处理。name 索引是标头名称出现次数的索引，而不是标头位置的索引。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Name</span><br><span class="line">1,first,last</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.FirstName).Name(<span class="string">&quot;Name&quot;</span>).NameIndex(<span class="number">0</span>);</span><br><span class="line">        Map(m =&gt; m.LastName).Name(<span class="string">&quot;Name&quot;</span>).NameIndex(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过索引映射">通过索引映射</h5>
<p>通过标头的索引位置映射属性，如果你的数据不包含标头，你就可以使用索引来映射数据。不能通过 .NET 类的属性的顺序来，所以如果你没有使用名称进行映射，确保你指定了索引。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.HasHeaderRecord = <span class="literal">false</span>;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Index(<span class="number">0</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Index(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自动映射">自动映射</h5>
<p>自动映射，如果你没有提供映射配置，你可以直接调用在类中的自动配置，组件会自动帮你创建一个映射。这对于你有比较多数量的属性而言是一个很好的方式，因为他会自动帮你正确的设置好，你需要做的就是对代码做一些小改变。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,The Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMap();</span><br><span class="line">        Map(m =&gt; m.Name).Name(<span class="string">&quot;The Name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="忽略属性">忽略属性</h5>
<p>忽略映射属性，当你使用自动映射类方法的时候，每个属性都会被映射，如果那里有你不想要映射的属性，你就能够直接忽视他们了。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsDirty &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMap();</span><br><span class="line">        Map(m =&gt; m.IsDirty).Ignore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="常数值">常数值</h5>
<p>对于特定的属性设置常值，你能够设置常值属性而不是映射到域。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsDirty &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.IsDirty).Constant(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="类型转换">类型转换</h5>
<p>使用指定的类型转换，如果你需要从非标准的 .NET 类型转换或者转换到非标准的 .NET 数据，你能够提供一个类型转化来使用属性。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Json</span><br><span class="line">1,one,&quot;&#123; &quot;&quot;Foo&quot;&quot;: &quot;&quot;Bar&quot;&quot; &#125;&quot;</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Json Json &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonConverter</span>&lt;<span class="title">T</span>&gt; : DefaultTypeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ConvertFromString</span>(<span class="params"><span class="built_in">string</span> text, IReaderRow row, MemberMapData memberMapData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ConvertToString</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, IWriterRow row, MemberMapData memberMapData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Json).TypeConverter&lt;JsonConverter&lt;Json&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="内联类型转化">内联类型转化</h5>
<p>转化到一个内联类型，如果你不想要写一个满的 <code>ITypeConverter</code>实现，你能够创建一个可以实现功能的函数。</p>
<h6 id="读">读</h6>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Json</span><br><span class="line">1,one,&quot;&#123; &quot;&quot;Foo&quot;&quot;: &quot;&quot;Bar&quot;&quot; &#125;&quot;</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Main()</span><br><span class="line">&#123;</span><br><span class="line">    using (var reader = new StreamReader(&quot;path\\to\\file.csv&quot;))</span><br><span class="line">    using (var csv = new CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Foo</span><br><span class="line">&#123;</span><br><span class="line">    public int Id &#123; get; set; &#125;</span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">    public Json Json &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Json</span><br><span class="line">&#123;</span><br><span class="line">    public string Foo &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class FooMap : ClassMap&lt;Foo&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public FooMap()</span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Json).ConvertUsing(row =&gt; JsonConvert.DeserializeObject&lt;Json&gt;(row.GetField(&quot;Json&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="写">写</h6>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> Foo &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;one&quot;</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line"></span><br><span class="line">        writer.ToString().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Json Json &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Json).ConvertUsing(o =&gt; JsonConvert.SerializeObject(o));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Json</span><br><span class="line">1,one,&quot;&#123;&quot;&quot;Id&quot;&quot;:1,&quot;&quot;Name&quot;&quot;:&quot;&quot;one&quot;&quot;,&quot;&quot;Json&quot;&quot;:null&#125;&quot;</span><br></pre></td></tr></table></figure>
<h5 id="映射选项">映射选项</h5>
<p>属性一定要存在才能映射，如果你有数据不确定是不是有标头，你需要制作映射选项。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTimeOffset? Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Date).Optional();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="验证">验证</h5>
<p>验证一个域值，如果你想要确保你的数据符合一些标准，你能够验证它。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,on-e</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTimeOffset? Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name).Validate(field =&gt; !field.Contains(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性">属性</h4>
<p>大部分的配置都能通过使用属性类映射被完成，<a href="https://joshclose.github.io/CsvHelper/api/CsvHelper.Configuration.Attributes/">完整的可获得的属性列表</a>。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Identifier,name,IsBool,Constant</span><br><span class="line">1,one,yes,a</span><br><span class="line">2,two,no,b</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;Identifier&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Index(1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">BooleanTrueValues(<span class="string">&quot;yes&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">BooleanFalseValues(<span class="string">&quot;no&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsBool &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Constant(<span class="string">&quot;bar&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Constant &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Optional</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Optional &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Ignore</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Ignored &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类型转换-1">类型转换</h4>
<p>待补...</p>
<h4 id="数据表">数据表</h4>
<p>使用 CsvHelper 去加载数据表是非常频繁的事情，因此我直接将其集成了一个功能。</p>
<p>CsvDataReader 实现 <code>IDataReader</code>方法。，这也就意味着它仅有前向数据读取的所有功能，所以真的不必要去直接使用这个类而不用 <code>CsvReader</code>， <code>CsvDataReader</code>要求有 <code>CsvReader</code>的实例并且在内部使用来完成其功能。</p>
<p>使用 CsvHelper 来加载一个 <code>DataTable</code>是比较简单的，默认的，表格中的所有列将会以字符串的形式被加载。当读取器已经做好了实例化的准备，你只需要在创建 CsvDataReader实例前做一些配置即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do any configuration to `CsvReader` before creating CsvDataReader.</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> dr = <span class="keyword">new</span> CsvDataReader(csv))</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">var</span> dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">        dt.Load(dr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想要指定行和行的类型，数据表也可以进行自动的类型转换。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do any configuration to `CsvReader` before creating CsvDataReader.</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> dr = <span class="keyword">new</span> CsvDataReader(csv))</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">var</span> dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">        dt.Columns.Add(<span class="string">&quot;Id&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">&quot;Name&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line"></span><br><span class="line">        dt.Load(dr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用程序接口api">应用程序接口（API）</h3>
<h4 id="命名空间csvhelper-namespace">命名空间（CsvHelper Namespace）</h4>
<h5 id="类classes">类（Classes）</h5>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/BadDataException">BadDataException</a></td>
<td style="text-align: left;">Represents errors that occur due to bad data.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvDataReader">CsvDataReader</a></td>
<td style="text-align: left;">Provides a means of reading a CSV file forward-only by using CsvReader.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvFieldReader">CsvFieldReader</a></td>
<td style="text-align: left;">Reads fields from a <code>System.IO.TextReader</code> .</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvHelperException">CsvHelperException</a></td>
<td style="text-align: left;">Represents errors that occur in CsvHelper.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvParser">CsvParser</a></td>
<td style="text-align: left;">Parses a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvReader">CsvReader</a></td>
<td style="text-align: left;">Reads data that was parsed from <code>CsvHelper.IParser</code> .</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvSerializer">CsvSerializer</a></td>
<td style="text-align: left;">Defines methods used to serialize data into a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvWriter">CsvWriter</a></td>
<td style="text-align: left;">Used to write CSV files.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/Factory">Factory</a></td>
<td style="text-align: left;">Creates CsvHelper classes.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/FieldValidationException">FieldValidationException</a></td>
<td style="text-align: left;">Represents a user supplied field validation failure.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/HeaderValidationException">HeaderValidationException</a></td>
<td style="text-align: left;">Represents a header validation failure.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/MissingFieldException">MissingFieldException</a></td>
<td style="text-align: left;">Represents an error caused because a field is missing in the header while reading a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ObjectResolver">ObjectResolver</a></td>
<td style="text-align: left;">Creates objects from a given type.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ParserException">ParserException</a></td>
<td style="text-align: left;">Represents errors that occur while parsing a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ReaderException">ReaderException</a></td>
<td style="text-align: left;">Represents errors that occur while reading a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ReadingContext">ReadingContext</a></td>
<td style="text-align: left;">CSV reading state.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/RecordBuilder">RecordBuilder</a></td>
<td style="text-align: left;">Builds CSV records.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ReflectionExtensions">ReflectionExtensions</a></td>
<td style="text-align: left;">Extensions to help with reflection.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ValidationException">ValidationException</a></td>
<td style="text-align: left;">Represents a user supplied validation failure.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/WriterException">WriterException</a></td>
<td style="text-align: left;">Represents errors that occur while writing a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/WritingContext">WritingContext</a></td>
<td style="text-align: left;">CSV writing state.</td>
</tr>
</tbody>
</table>
<h5 id="接口interfaces">接口（Interfaces）</h5>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IFactory">IFactory</a></td>
<td style="text-align: left;">Defines methods used to create CsvHelper classes.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IFieldReader">IFieldReader</a></td>
<td style="text-align: left;">Defines methods used to read a field in a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IObjectResolver">IObjectResolver</a></td>
<td style="text-align: left;">Defines the functionality of a class that creates objects from a given type.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IParser">IParser</a></td>
<td style="text-align: left;">Defines methods used the parse a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IReader">IReader</a></td>
<td style="text-align: left;">Defines methods used to read parsed data from a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IReaderRow">IReaderRow</a></td>
<td style="text-align: left;">Defines methods used to read parsed data from a CSV file row.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ISerializer">ISerializer</a></td>
<td style="text-align: left;">Defines methods used to serialize data into a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IWriter">IWriter</a></td>
<td style="text-align: left;">Defines methods used to write to a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IWriterRow">IWriterRow</a></td>
<td style="text-align: left;">Defines methods used to write a CSV row.</td>
</tr>
</tbody>
</table>
<h5 id="枚举enums">枚举（Enums）</h5>
<table>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/Caches">Caches</a></td>
<td style="text-align: left;">Types of caches.</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>CSharp</tag>
        <tag>CSV</tag>
      </tags>
  </entry>
</search>
