<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[object Object]</title>
    <url>/2024/01/13/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>三种大气质量和一个公式的计算方法</title>
    <url>/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="三种大气质量和一个公式的计算方法">三种大气质量和一个公式的计算方法</h1>
<h2 id="简介">简介</h2>
<p>​ 整理的文献为 <em>Revised optical air mass tables and approximation formula</em> 。</p>
<p>​ 文章一开始介绍了一个由 Karsten 在1965年发表的并且广泛被世界所采用的关于大气质量的近似公式，并且讨论了一些由于各个学科对于不同的物理量符号和术语的不同使得读者经常由此而困惑。</p>
<p>​ 其后介绍了一个计算大气光学质量的近似公式，然后说明了在公式中存在的一种不定情况，之后又对这个近似公式用非线性最小二乘法进行修正得到了一组新的系数。后面又根据索引文献[1]文中也多次提到这篇文献，很多都是从这篇文献里面来的。</p>
<p>​ 还有从一篇《基于遥感与地面监测数据的城市气溶胶定量反演研究》，作者是王耀庭，南京师范大学博士论文。</p>
<h2 id="一个通用的计算公式">一个通用的计算公式</h2>
<p><span class="math display">\[
m(\gamma)=\frac{m_{abs}(\gamma)}{m_{abs}(90^{\circ})}
\]</span></p>
<p><span class="math display">\[
m_{abs}(\gamma)=\rho_{0}\int^{\infty}_{0} \frac{\rho}{\rho_{0}}([1-[1+2\delta_{0}(1-\frac{\rho}{\rho_{0}})]]\times
    [\frac{\cos \gamma}{1+\frac{h}{R}}]^{2})^{-\frac{1}{2}}dh
\]</span> <span class="math inline">\(h\)</span>是相对于海平面的平均高度；</p>
<p><span class="math inline">\(\rho=\rho(h)\)</span>，是在高度<span class="math inline">\(h\)</span>处的大气质量；</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/Table1.png" class="" title="表格1">
<p>​ 根据以上的式子 (1),(2) 和已知的参数表1。要计算这个定积分，那就还需要知道 <span class="math inline">\(ρ\)</span>, 也就是 <span class="math inline">\(ρ(h)\)</span> 在高度 h 处的大气密度，但是我在文献中找不到，这是个问题，不知道是不是需要再去别的地方找这个 <span class="math inline">\(ρ\)</span>，看完了这篇文章之后，知道了这个 <span class="math inline">\(ρ\)</span> 还是没有找到，但是文章已经给出了计算得到的结果的表格。</p>
<h2 id="近似计算公式和不同的系数">近似计算公式和不同的系数</h2>
<p><span class="math display">\[
f(\gamma)=[\sin \gamma+a(\gamma+b)^{-c}]^{-1}
\]</span> <span class="math inline">\(\gamma\)</span>是高度角，单位是<span class="math inline">\(^\circ\)</span>;<span class="math inline">\(f(\gamma)\)</span>是用近似公式计算的<span class="math inline">\(m(\gamma)\)</span>;<span class="math inline">\(a,b,c\)</span>是式子的常数，<span class="math inline">\(a=0.1500，b=3.885^{\circ}，c=1.253;\)</span></p>
<p>​ a,b,c这三个常数决定于最小二乘法的相对误差，也就是用前面的计算公式计算数据之后，用最小二乘法进行拟合，使用(3)的形式来计算三个常数。</p>
<p>​ 文献后面又介绍了两个不同的参数组合，一个是根据非线性最小二乘法计算的 <span class="math inline">\(a=0.50572,b=6.07995°,\)</span> <span class="math inline">\(c=1.6364\)</span>；一个是根据 <span class="math inline">\(Bemporad\)</span> 的经典大气质量表确定的，<span class="math inline">\(a=0.6556,b=6.379°,c=1.757[1]\)</span>，其中文献的表中的 <span class="math inline">\(r(γ)\)</span> 是根据公式(4)计算的相对误差，用来衡量计算大气质量的相对误差。 <span class="math display">\[
r(\gamma)=\frac{f(\gamma)-m(\gamma)}{m(\gamma)}
\]</span></p>
<h2 id="积分问题和解决">积分问题和解决</h2>
<p>​ 对于公式(2)，积分会在 <span class="math inline">\(γ=0\)</span> 和 <span class="math inline">\(h\)</span> 接近于0的地方不定，在这种情况下，这个积分可以通过执行一个特殊的程序来进行计算，在参考文献[1]中有写这个程序。但是在计算的时候有个错误会混入，在地平线上的值 36.2648 会比实际的小 5% 左右。</p>
<p>​ 举例而言，在 Link 和 Neuzil[3] 文章的表中所给出的地平线上的在1962年美国的标准大气的大气质量是38.16，这跟 1959 年 Karsen 用的 ARDC 模型十分接近。Snider 和 Goldman[4] 给出的关于 1962 年的模型的38.10也是高度相似。Treve[5] 使用1959年的 ARDC 模型，得到了在地平线上的相对大气质量分别是 $0.55μm $ 的38.11和在 <span class="math inline">\(0.70μm\)</span> 的38.08。</p>
<p>​ 还有就是采用一种新的标准来却确定式子 (2) 中的参数会优于旧的模型，也就是最新的国际标准化组织的大气模型 (ISO Standrad Atmophere) 代替 ARDC 模型大气(由国际民航组织 ICAO 提出的)，这个仅有的变化也就是名义地球半径变为 <span class="math inline">\(R=6.356766×10^6m\)</span>。</p>
<h2 id="一个计算公式">一个计算公式</h2>
<p><span class="math display">\[
m=\frac{1}{cos \frac{\pi \theta_0}{180^\circ}+0.15\times(93.885-\theta_0)^{-1.253}}
\]</span></p>
<p>​ 其中m是需要计算的大气质量，<span class="math inline">\(\theta_0\)</span> 是天顶角。</p>
<h2 id="我要做的工作">我要做的工作</h2>
<p>​ 在这篇文章里面，我要做的就是编写一个程序，根据文献中的大气质量近似公式(3)，并且用不同的参数组带入，将表格中自变量太阳高度角γ作为自变量带入近似公式计算，再与表格中所给的大气质量数进行作差比较，即验证这个算法是否真的符合实际，如果误差较小，则可以用到我们的项目中去。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E8%A1%A8%E6%A0%BC2.png" class="" title="表格2">
<p>​ 上面的这张表格也就说明了在文章计算的数据中天顶角 <span class="math inline">\(γ\)</span> 的取值变化，也就是计算的时候自变量所采用的值。过计算得到了一些结果。</p>
<h2 id="结果">结果</h2>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E8%BF%90%E7%94%A8%E5%85%B6%E4%BB%96%E5%85%AC%E5%BC%8F%E8%AE%A1%E7%AE%97%E7%9A%84%E5%92%8C%E6%A0%87%E5%87%86%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F.bmp" class="">
<p>​ 图1 标准大气质量和用其他公式计算的大气质量</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E7%9A%84%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F.bmp" class="">
<p>​ 图2 四种计算方法与标准大气质量</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E6%8B%9F%E5%90%88%E7%B3%BB%E6%95%B0%E8%AE%A1%E7%AE%97%E7%9A%84%E7%9B%B8%E5%AF%B9%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F.bmp" class="">
<p>​ 图3 三种拟合系数计算的大气质量</p>

<p>​ 图4 误差曲线</p>
<h2 id="分析">分析</h2>
<p>​ 从上面的图中可以看到，用三种不同的系数计算的相对大气质量以及三组拟合系数的误差曲线，从图中可以看到，三者在天顶角大于 30° 之后都是差不多的经度，主要就是在30°之前的差异。而且可以看到在起始点的时候，第一组和第三组都有很大的误差，特别是第三组，误差都接近于4%，回想文章中提到的积分会在 <span class="math inline">\(γ=0\)</span> 和 h 接近于 0 的地方不定，需要查阅参考文献[1]来寻找解决方法。但是我看到这个计算的第二组拟合系数表现的很好，不知道是否可以用第二组数据来计算，或者是这三组数据都是在不同的情况下表现的经度水平会不一样。但是有个问题，我们没有找到拟合系数1的这条曲线，在下面会进行说明，实际上<u>它是和其他公式计算的这条曲线重合了</u>。</p>
<p>​ 对比三种方法和一个计算公式，发现计算公式的误差在几个计算方法折中的位置，在角度 &gt;10° 之后，这个计算值的偏差与第二组拟合系数计算的误差一样，都是非常小的。</p>
<p>​ 可以看看在高度角大于10°时候的表现。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E9%AB%98%E5%BA%A6%E8%A7%92%E5%A4%A7%E4%BA%8E10%C2%B0%E7%9A%84%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F%E8%AF%AF%E5%B7%AE.bmp" class="">
<p>​ 图 5 在高度角大于10°时候计算大气质量的误差</p>
<p>​ 这里没有找到拟合系数1这条曲线，是因为他的变化与公式计算的是一模一样的，两条线是重合的。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E6%89%BE%E6%8B%9F%E5%90%88%E7%B3%BB%E6%95%B01%E8%BF%99%E6%9D%A1%E7%BA%BF.bmp" class="">
<p>​ 图 6 拟合系数1和公式计算的天顶角大于10°的误差曲线</p>
<p>​ 这说明，其实拟合系数1也就是将天顶角计算的公式做了稍微的变化，就得到了太阳高度角的，<u>本质上，这两个公式是一模一样的</u>，只是取得系数不同罢了。</p>
<h2 id="新给的数据的计算">新给的数据的计算</h2>
<p>​ 在之后使用已经写好的这几种计算方法来计算新的数据值，数据可以在 ‘1.xlsx’ 表格中找到。</p>
<img src="/2019/10/04/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/%E4%B8%89%E7%A7%8D%E5%A4%A7%E6%B0%94%E5%85%89%E5%AD%A6%E8%B4%A8%E9%87%8F%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/8%E6%9C%886%E5%8F%B7%E5%88%B08%E5%8F%B7%E8%AE%A1%E7%AE%97%E7%9A%84%E5%A4%A7%E6%B0%94%E8%B4%A8%E9%87%8F%E5%80%BC.bmp" class="">
<p>​ 图 7 根据所给的数据计算的三天的大气质量数值</p>
<p>​ 可以看到，其实一天内的天顶角并不是全是 0~90° 的，这几天维持在 40° 以下，这时候，查阅标准数据也是差不多在这样的数据范围。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] Kasten,"A New Table and Approximation Formula for the Relative Optical Air Mass",Arch.Meteorol.Geophys.Bioklimatol.Ser.B 14,206-223(1965). [2] R.A Miner,K.S.W.Chamption,and H.L.Pond,The ARDC Model Atmosphere,1959,Air Force Surveys in Geophysics 11(AFCRL,1959) [3] F.Link and L.Neuzil,Table of Light Trajectories in the Terrestrial Atmosphere(Hermann,Paris,1969) [4] D.E Snier and A. Goldman,Refractive Effects in Remote Sensing of Atmosphere with Infrared Transmission Spectroscopy,(Ballistic Research Labratories,June 1975) [5] Y. M. Treve, New Values of the Optical Air Mass and the Refraction and Comparison with Previous Tables," in Proceed-ings, Second Tropospheric Refraction Effects Technical ReviewMeeting, Technical Documentary Rep. ESD-TDR 64-103, May1964 (National Technical Information Service Order AD-442626), pp.5-391. [6] International Organization for Standardization,Standard Atmosphere,International Standard ISO253(1972) [7] S.L.Valley,Handbook of Geophysics and Space Physics (AFCRL,1965), pp.23. [8] W.H.Jefferys,M.J.Fitzpatrick,B.E.McArthur,andJ.E. McCartney, GaussFit:A System for Least Squares and RobustEstimation (U. Texas at Austin, 1989). [9] A.T.Young,Observational Technique and Data Reduction," inle to Methods of Experimental Physics(Vol. 12, Astrophysics; Partrmly A:Optical and Infrared),N,Carleton,Ed.(Academic, New York, 1974),p.150.</p>
<h2 id="代码">代码</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">%x的步长选取</span></span><br><span class="line">x1=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">20</span>;</span><br><span class="line">x2=<span class="number">20.2</span>:<span class="number">0.2</span>:<span class="number">30</span>;</span><br><span class="line">x3=<span class="number">30.5</span>:<span class="number">0.5</span>:<span class="number">55</span>;</span><br><span class="line">x4=<span class="number">56</span>:<span class="number">1</span>:<span class="number">90</span>;</span><br><span class="line">x=[x1,x2,x3,x4];</span><br><span class="line"><span class="comment">%定义Latxe字符</span></span><br><span class="line"><span class="built_in">gamma</span>=texlabel(<span class="string">&#x27;gamma&#x27;</span>);flambda=texlabel(<span class="string">&#x27;f(lambda)&#x27;</span>);</span><br><span class="line">txt = texlabel(<span class="string">&#x27;f(lambda)=[sin gamma+a(gamma+b)^&#123;-c&#125;]^&#123;-1&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">%输入标准数据，画标准数据图像</span></span><br><span class="line">data=xlsread(<span class="string">&#x27;datain.xlsx&#x27;</span>);</span><br><span class="line">datax=data(:,<span class="number">1</span>);px=datax;</span><br><span class="line">datay=data(:,<span class="number">2</span>);py=datay;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(datax,datay);grid on;box off;</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;标准的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line"><span class="comment">% print(&#x27;Standard&#x27;,&#x27;-deps&#x27;);</span></span><br><span class="line"><span class="comment">%调用三个计算函数</span></span><br><span class="line">airMass1=massCal1(x);</span><br><span class="line">airMass2=massCal2(x);</span><br><span class="line">airMass3=massCal3(x);</span><br><span class="line">airMass4=massCal4(x);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(datax,airMass4);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;其他公式计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">suptitle(<span class="string">&#x27;相对大气质量与高度角的关系&#x27;</span>);grid on;box off</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">set(<span class="built_in">figure</span>(<span class="number">2</span>),<span class="string">&#x27;PaperSize&#x27;</span>,[<span class="number">42</span>,<span class="number">60</span>]);</span><br><span class="line">suptitle([<span class="string">&#x27;\fontsize&#123;14&#125;&#x27;</span>,txt]);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,airMass1);grid on;box off;</span><br><span class="line">text(<span class="number">60</span>,<span class="number">30</span>,<span class="string">&#x27;a=0.1500,b=3.885,c=1.253&#x27;</span>);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,airMass2);grid on;box off;</span><br><span class="line">text(<span class="number">60</span>,<span class="number">30</span>,<span class="string">&#x27;a=0.50572,b=6.07995,c=1.6364&#x27;</span>);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,airMass3);grid on;box off;</span><br><span class="line">text(<span class="number">60</span>,<span class="number">30</span>,<span class="string">&#x27;a=0.6556,b=6.379,c=1.757&#x27;</span>);</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(&#123;<span class="string">&#x27;计算的相对大气质量&#x27;</span>;flambda&#125;);</span><br><span class="line">set(gcf, <span class="string">&#x27;position&#x27;</span>, [<span class="number">1920</span>/<span class="number">4</span> <span class="number">1080</span>/<span class="number">4</span> <span class="number">1920</span>/<span class="number">2</span> <span class="number">1080</span>/<span class="number">1.5</span>]);</span><br><span class="line"><span class="comment">% print(&#x27;Calculate&#x27;,&#x27;-deps&#x27;);</span></span><br><span class="line"><span class="comment">%画三个函数的误差曲线</span></span><br><span class="line">datay=datay&#x27;;</span><br><span class="line">delta1 = (airMass1-datay)./datay*<span class="number">100</span>;</span><br><span class="line">delta2 = (airMass2-datay)./datay*<span class="number">100</span>;</span><br><span class="line">delta3 = (airMass3-datay)./datay*<span class="number">100</span>;</span><br><span class="line">delta4 = (airMass4-datay)./datay*<span class="number">100</span>;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,delta1);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta2,<span class="string">&#x27;--&#x27;</span>);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta3,<span class="string">&#x27;:&#x27;</span>);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta4);grid on;box off;</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(<span class="string">&#x27;三种大气质量的误差(%)&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;第1组拟合系数&#x27;</span>,<span class="string">&#x27;第2组拟合系数&#x27;</span>,<span class="string">&#x27;第3组拟合系数&#x27;</span>,<span class="string">&#x27;其他公式计算&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;几种计算方法的误差&#x27;</span>);</span><br><span class="line"><span class="comment">% print(&#x27;Error&#x27;,&#x27;-deps&#x27;);</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">plot</span>(datax,datay);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass1);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass2);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass3);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,airMass4);grid on;box off;</span><br><span class="line">xlabel([<span class="string">&#x27;高度角&#x27;</span>,<span class="built_in">gamma</span>]);ylabel(<span class="string">&#x27;相对大气质量&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;实际的&#x27;</span>,<span class="string">&#x27;方法1&#x27;</span>,<span class="string">&#x27;方法2&#x27;</span>,<span class="string">&#x27;方法三&#x27;</span>,<span class="string">&#x27;其他方法&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;几种方法和实际的相对大气质量&#x27;</span>);</span><br><span class="line"></span><br><span class="line">[~,Date,~] = xlsread(<span class="string">&#x27;1.xlsx&#x27;</span>,<span class="string">&#x27;A2:A105&#x27;</span>);</span><br><span class="line">Date = datetime(Date,<span class="string">&#x27;InputFormat&#x27;</span>,<span class="string">&#x27;dd/MM/yyyy&#x27;</span>);</span><br><span class="line">Date.Format = <span class="string">&#x27;yyyy-MM-dd&#x27;</span>;</span><br><span class="line">Time = days(xlsread(<span class="string">&#x27;1.xlsx&#x27;</span>,<span class="string">&#x27;B2:B105&#x27;</span>));</span><br><span class="line">Time.Format = <span class="string">&#x27;hh:mm:ss&#x27;</span>;</span><br><span class="line">datetime = Date+Time;</span><br><span class="line">datetime.Format = <span class="string">&#x27;yyyy-MM-dd hh:mm:ss&#x27;</span>;</span><br><span class="line">xxx=xlsread(<span class="string">&#x27;1.xlsx&#x27;</span>,<span class="string">&#x27;C2:C105&#x27;</span>);</span><br><span class="line">xx=<span class="number">90</span>-xxx;</span><br><span class="line">airMassx1=massCal1(xx);</span><br><span class="line">airMassx2=massCal2(xx);</span><br><span class="line">airMassx3=massCal3(xx);</span><br><span class="line">airMassx4=massCal4(xx);</span><br><span class="line">output=[airMassx1,airMassx2,airMassx3,airMassx4];</span><br><span class="line">xlswrite(<span class="string">&#x27;output.xlsx&#x27;</span>,output);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">datetime = datenum(datetime);</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx1);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx2);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx3);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(datetime,airMassx4);grid on;box off;<span class="built_in">hold</span> on</span><br><span class="line">dateFormat = <span class="string">&#x27;yy-mm-dd HH:MM:SS&#x27;</span>;</span><br><span class="line">datetick(<span class="string">&#x27;x&#x27;</span>,dateFormat)</span><br><span class="line"><span class="comment">%plot(px,py);grid on;box off;</span></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;计算方法1&#x27;</span>,<span class="string">&#x27;计算方法2&#x27;</span>,<span class="string">&#x27;计算方法3&#x27;</span>,<span class="string">&#x27;其他方法计算的&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;大气质量&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;新给的数据的高度角计算的值&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = (x&gt;<span class="number">10</span>);</span><br><span class="line">x = x(p);</span><br><span class="line">delta1 = delta1(p);</span><br><span class="line">delta2 = delta2(p);</span><br><span class="line">delta3 = delta3(p);</span><br><span class="line">delta4 = delta4(p);</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(x,delta1);<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta2);<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta3);<span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(x,delta4);grid on;box off;</span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);ylabel(<span class="string">&#x27;大气质量计算偏差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;高度角 &gt;10° 时大气质量计算偏差&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;拟合系数1&#x27;</span>,<span class="string">&#x27;拟合系数2&#x27;</span>,<span class="string">&#x27;拟合系数3&#x27;</span>,<span class="string">&#x27;公式计算&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,delta1);box off;grid on</span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);ylabel(<span class="string">&#x27;大气质量计算偏差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;拟合系数1计算&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,delta4);box off;grid on</span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);ylabel(<span class="string">&#x27;大气质量计算偏差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;公式计算&#x27;</span>);</span><br><span class="line">suptitle(<span class="string">&#x27;高度角 &gt;10° 时大气质量计算偏差&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算方法1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">massCal1</span><span class="params">(gamma)</span></span></span><br><span class="line"><span class="comment">%函数调用格式：airMass=massCal1(gamma)</span></span><br><span class="line"><span class="comment">%输入参数说明：gamma是天顶角，单位是°</span></span><br><span class="line"><span class="comment">%输出参数说明：airMass是大气质量</span></span><br><span class="line">a=<span class="number">0.1500</span>;b=<span class="number">3.885</span>;c=<span class="number">1.253</span>;</span><br><span class="line"><span class="comment">% gamma=gamma*pi/180;%b=b*pi/180;</span></span><br><span class="line">y=(<span class="built_in">sin</span>(<span class="built_in">gamma</span>*<span class="built_in">pi</span>/<span class="number">180</span>)+a*(<span class="built_in">gamma</span>+b).^(-c)).^(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算方法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">massCal2</span><span class="params">(gamma)</span></span></span><br><span class="line"><span class="comment">%函数调用格式：airMass=massCal2(gamma)</span></span><br><span class="line"><span class="comment">%输入参数说明：gamma是天顶角，单位是°</span></span><br><span class="line"><span class="comment">%输出参数说明：airMass是大气质量</span></span><br><span class="line">a=<span class="number">0.50572</span>;b=<span class="number">6.07995</span>;c=<span class="number">1.6364</span>;</span><br><span class="line">y=(<span class="built_in">sin</span>(<span class="built_in">gamma</span>*<span class="built_in">pi</span>/<span class="number">180</span>)+a*(<span class="built_in">gamma</span>+b).^(-c)).^(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 计算方法3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">massCal3</span><span class="params">(gamma)</span></span></span><br><span class="line"><span class="comment">%函数调用格式：airMass=massCal(gamma)</span></span><br><span class="line"><span class="comment">%输入参数说明：gamma是天顶角，单位是°</span></span><br><span class="line"><span class="comment">%输出参数说明：airMass是大气质量</span></span><br><span class="line">a=<span class="number">0.6556</span>;b=<span class="number">6.379</span>;c=<span class="number">1.757</span>;</span><br><span class="line">y=(<span class="built_in">sin</span>(<span class="built_in">gamma</span>*<span class="built_in">pi</span>/<span class="number">180</span>)+a*(<span class="built_in">gamma</span>+b).^(-c)).^(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>内核转储文件--内核崩溃</title>
    <url>/2024/01/13/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6--%E5%86%85%E6%A0%B8%E5%B4%A9%E6%BA%83/</url>
    <content><![CDATA[<h2 id="ubuntu">Ubuntu</h2>
<h3 id="安装crash工具">安装crash工具</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">apt-get install linux-crashdump</span><br></pre></td></tr></table></figure>
<h3 id="检查kdump配置">检查kdump配置</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">kdump-config show</span><br><span class="line"></span><br><span class="line">DUMP_MODE:              kdump</span><br><span class="line">USE_KDUMP:              1</span><br><span class="line">KDUMP_COREDIR:          /var/crash</span><br><span class="line">crashkernel addr: 0x73000000</span><br><span class="line">   /var/lib/kdump/vmlinuz: symbolic link to /boot/vmlinuz-5.15.0-89-generic</span><br><span class="line">kdump initrd:</span><br><span class="line">   /var/lib/kdump/initrd.img: symbolic link to /var/lib/kdump/initrd.img-5.15.0-89-generic</span><br><span class="line">current state:    ready to kdump</span><br><span class="line"></span><br><span class="line">kexec command:</span><br><span class="line">  /sbin/kexec -p --command-line=&quot;BOOT_IMAGE=/boot/vmlinuz-5.15.0-89-generic root=UUID=92414257-97c5-46a0-9154-66c415ee7358 ro net.ifnames=0 consoleblank=600 console=tty0 console=ttyS0,115200n8 noibrs reset_devices systemd.unit=kdump-tools-dump.service nr_cpus=1 irqpoll nousb&quot; --initrd=/var/lib/kdump/initrd.img /var/lib/kdump/vmlinuz</span><br></pre></td></tr></table></figure>
<p>USE_KDUMP=1 代表kdump打开</p>
<p>KDUMP_COREDIR 代表生成的core文件在<code>/var/crash</code>下面</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash"><span class="comment"># dmesg | grep -i crash</span></span></span><br><span class="line">[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.15.0-89-generic root=UUID=92414257-97c5-46a0-9154-66c415ee7358 ro net.ifnames=0 consoleblank=600 console=tty0 console=ttyS0,115200n8 noibrs crashkernel=512M-:192M</span><br><span class="line">[    0.005698] Reserving 192MB of memory at 1840MB for crashkernel (System RAM: 2047MB)</span><br><span class="line">[    0.013125] Kernel command line: BOOT_IMAGE=/boot/vmlinuz-5.15.0-89-generic root=UUID=92414257-97c5-46a0-9154-66c415ee7358 ro net.ifnames=0 consoleblank=600 console=tty0 console=ttyS0,115200n8 noibrs crashkernel=512M-:192M</span><br></pre></td></tr></table></figure>
<p>dmesg 显示了crashkernel保留了192M内存，kexec命令。</p>
<h3 id="手动触发sysrq">手动触发sysrq</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/kernel/sysrq</span><br><span class="line">echo c &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure>
<ol type="1">
<li>sysrq值不为0代表工作正常</li>
<li>echo写主动触发kdump</li>
</ol>
<h2 id="centos">CentOS</h2>
<h3 id="安装crash工具-1">安装crash工具</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install kexec-tools</span><br><span class="line">yum install crash</span><br></pre></td></tr></table></figure>
<h3 id="安装内核调试信息包">安装内核调试信息包</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">yum install kernel-debuginfo-$(uname -r)</span><br><span class="line">yum install kernel-debuginfo-common-$(uname -r)</span><br></pre></td></tr></table></figure>
<h3 id="判断服务正常开启">判断服务正常开启</h3>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">systemctl status kdump</span><br></pre></td></tr></table></figure>
<h3 id="主动触发分析">主动触发分析</h3>
<p>这一步跟Ubuntu的一致</p>
<h2 id="分析调试">分析调试</h2>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">crash /usr/lib/debug/lib/modules/$(uname -r)/vmlinux /var/crash/XX/vmcore</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>kernel</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>内核转储文件--应用程序崩溃分析</title>
    <url>/2024/01/07/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6--%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="ubuntu">Ubuntu</h2>
<p>设置如下的程序 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">crash_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">char</span> *str =<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,<span class="string">&quot;test&quot;</span>); <span class="comment">// segment fault</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;crash test&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">crash_test</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 以下就是生成了dump文件</p>
<img src="/2024/01/07/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6/%E5%86%85%E6%A0%B8%E8%BD%AC%E5%82%A8%E6%96%87%E4%BB%B6--%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E5%88%86%E6%9E%90/Pastedimage20240113005115.png" class="">
<h3 id="查看coredump是否打开">查看coredump是否打开</h3>
<p>查看命令：<code>ulimit -c</code></p>
<p>打开命令：<code>ulimit -c unlimited</code></p>
<p>0：关闭</p>
<p>unlimited：打开 ### 配置规则 主要看内核参数<code>kernel.core_pattern</code>，路径为<code>/proc/sys/kernel/core_pattern</code>。</p>
<p>所以修改有两种方法</p>
<p>1、<code>sysctl -w kernel.core_pattern=/root/core/core-%e.%s.%p.%t</code></p>
<p>2、<code>echo -e "/root/core/core-%e.%s.%p.%t" &gt; /proc/sys/kernel/core_pattern</code></p>
<blockquote>
<p>%e：进程名称</p>
<p>%s：崩溃时收到的信号</p>
<p>%p：进程ID</p>
<p>%t：时间戳</p>
</blockquote>
<h3 id="注意关闭apport服务">注意关闭apport服务</h3>
<p>这个服务会读取core文件分析，不会保存源文件 <figure class="highlight console"><table><tr><td class="code"><pre><span class="line">systemctl stop apport.service</span><br></pre></td></tr></table></figure></p>
<h2 id="centos">CentOS</h2>
<h3 id="编辑etcsecuritylimits.conf文件">编辑<code>/etc/security/limits.conf</code>文件</h3>
<p>末尾增加<code>soft core unlimited</code>，表示应用程序生成的core文件不受大小限制 ### 配置规则 和Ubuntu一样 ### reboot</p>
<h2 id="分析崩溃">分析崩溃</h2>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">gdb test  /root/corefile/core-test.11.6284.1705062175</span><br></pre></td></tr></table></figure>
<p><img src="Pastedimage20240113011447.png" /></p>
<p>发现最后的出错函数位于strcpy这一处，源文件第8行。</p>
]]></content>
      <tags>
        <tag>kernel</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>最大间隙问题</title>
    <url>/2019/11/24/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="最大间隙问题">最大间隙问题</h1>
<h2 id="题目">题目</h2>
<p>对于输入的一组数，个数为 n ，求这 n 个数中大小相邻的两个数之间最大差。假设对于任何实数的下取整函数耗时都是 O(1) ，设计此问题的最大间隙解法。例如。</p>
<p><code>input.txt</code> <code>output.txt</code></p>
<p>5 0.8</p>
<p>1.1 1.3 2.5 0.7 2.1</p>
<p>其中这个几个数依次排列 0.7&lt;1.1&lt;1.3&lt;2.1&lt;2.5</p>
<p>可以看到，这几个相邻数字之间的差距最大在 2.1-1.3=0.8，所以求得这几个数字之间的最大间距是 0.8</p>
<h2 id="思考">思考</h2>
<h3 id="办法一">办法一</h3>
<p>对于这个题目，首先我想到的也就是上面这个思路，首先要判断整个数组的两数相邻与否，那么我要做的就是将其排序，排序完，我再将其相邻数做差，那么也就是的都一个相邻两数的数组，得到数组之后，我就寻找数组中的最大元素，找到最大元素，再对应其索引，我就能找到那两个数字了。</p>
<p>但是，我立刻又想到了复杂度问题，因为排序算法的复杂度最低的是分治法，普通的搜索算法复杂度会比排序低的</p>
<p>复杂度计算如下 <span class="math display">\[
O(n\log n)+O(n)+O(n)=O(n\log n) \\
O(n\log n) &gt; O(n)
\]</span> ​ <!--排序算法+做差+搜索--> 这个复杂度有点尴尬，因为他不是线性复杂度，不符合题目的要求，所以这个思路是不可行的。</p>
<p>那么我只能换其他的办法来做。</p>
<h3 id="办法二">办法二</h3>
<ol type="1">
<li>设输入的是n个数，分别为 <span class="math inline">\(a_1,a_2,...,a_n​\)</span> ，设在这些数中最大的数为<span class="math inline">\(a_{max}​\)</span>，最小的是<span class="math inline">\(a_{min}​\)</span>；</li>
<li>在<span class="math inline">\(a_{max}\)</span>与<span class="math inline">\(a_{min}\)</span>之间均匀插入<span class="math inline">\(n-2\)</span>个等分点，将其分为<span class="math inline">\(n-1\)</span>段，如下图； <img src="/2019/11/24/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/%E6%9C%80%E5%A4%A7%E9%97%B4%E9%9A%99%E9%97%AE%E9%A2%98/%E5%88%86%E6%AE%B5.png" class=""></li>
<li>把需要剩下的<span class="math inline">\(n-2\)</span>个数按照大小放入这<span class="math inline">\(n-1​\)</span>个段中，根据鸽巢原理，那么其中必定有一个段是空的，如果有一个段是空的，那么我们就可以知道两个相邻数字之间的差值肯定是在两个段中的；</li>
<li>计算每个段中的最大值最小值<span class="math inline">\(low[i]\)</span>和<span class="math inline">\(high[i]\)</span>，再使用后一段的<span class="math inline">\(low[i+1]\)</span>减去前一段的<span class="math inline">\(high[i]\)</span>，得到这些差值中的最大值就是相邻两数的最大间隙了。</li>
</ol>
<p>分析一下复杂度，对于找最大最小值，也只需要遍历一次即可，所以复杂度为<span class="math inline">\(O(n)​\)</span>，等分点只需要得到单位长度即可，单位长度为 <span class="math display">\[
l=\frac{max-mix}{n-1}
\]</span> 每个数要判断在哪个段里面也只需要知道自己跟起始处距离几个单位长度即可 <span class="math display">\[
seg[i]=\frac{x[i]-minx}{l}+1
\]</span> 数组<span class="math inline">\(seg[i]\)</span>是一个纽带氏作用，它的索引与<span class="math inline">\(x[i]\)</span>的数的索引是一样的，数组里面存储的数对于的第几个段。这个过程也是用这个公式就可以计算完成的，所以这个过程的复杂度也是<span class="math inline">\(O(n)\)</span>，最后需要做差，使用<span class="math inline">\(low[i+1]-high[i]\)</span>得到数组的间隙的最大值即可，最后这个过程的复杂吨也只需要<span class="math inline">\(O(n)\)</span>。</p>
<p>根据前面的分析，每个过程的复杂度均为<span class="math inline">\(O(n)\)</span>，那么有限个<span class="math inline">\(O(n)\)</span>的累加复杂度还是<span class="math inline">\(O(n)\)</span>，说明这个方法是可行的，满足题目要求。</p>
<h2 id="伪代码">伪代码</h2>
<p>通过前面的分析，确定了方法二是可行的，那么就可以采用这个方法来进行伪代码书写。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先要求出最大值最小值。在这里求出它的索引，这样通过 x 数组访问就可得到它的值了</span></span><br><span class="line">function maxi</span><br><span class="line">maxi = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">x</span>(i) &gt; x[maxi])	maxi = i;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">return</span> maxi;</span><br><span class="line"></span><br><span class="line">function mini</span><br><span class="line">mini = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">x</span>(i) &gt; x[mini])	mini = i;</span><br><span class="line">end</span><br><span class="line"><span class="keyword">return</span> mini;</span><br><span class="line"><span class="comment">//计算最大最小值，计算刻度，计算索引映射数据段数组 seg</span></span><br><span class="line">maxx = x[maxi];minx = x[mini];</span><br><span class="line">l = (maxx - minx)/(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>:<span class="number">1</span>:n</span><br><span class="line">	seg[i] = (x[i] - minx)/l;</span><br><span class="line">end</span><br><span class="line"><span class="comment">//初始化 low 和 high 数组</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>:<span class="number">1</span>:n<span class="number">-2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>考拉兹猜想</title>
    <url>/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/</url>
    <content><![CDATA[<h1 id="考拉兹猜想">考拉兹猜想</h1>
<h2 id="考拉兹猜想定义">考拉兹猜想定义</h2>
<p>考拉兹函数定义如下</p>
<p><span class="math display">\[
f(x)=\left\{
\begin{array}{**lr**}
3n+1&amp;x为奇数且x\neq1\\
n/2&amp;x为偶数\\
1&amp;x=1
\end{array}
\right.
\]</span> 通过对 <span class="math inline">\(x\)</span> 取不同的值，发现最后都会收敛到 1。求该函数构成算法的上下界。</p>
<p>当然，下界是很容易求出来的，如果输入 <span class="math inline">\(n\)</span> ，下降最快的也就是每次下降 <span class="math inline">\(\frac{1}{2}\)</span>，这个下降速度对于的计算时间是 <span class="math inline">\(\log n\)</span> 。对于上界，用 <span class="math inline">\(MATLAB​\)</span> 带入一些数值计算。得到的结果如下：</p>
<h2 id="部分-n_0-的步长与-n-值变化">部分 <span class="math inline">\(n_0\)</span> 的步长与 <span class="math inline">\(n\)</span> 值变化</h2>
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/3~6.bmp" class="">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/7~10.bmp" class="" title="7~10">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/11~14.bmp" class="" title="11~14">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/15~18.bmp" class="" title="15~18">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/19~22.bmp" class="" title="19~22">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/23~26.bmp" class="" title="23~26">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/27~30.bmp" class="" title="27~30">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/31~34.bmp" class="" title="31~34">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/35~38.bmp" class="" title="35~38">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/39~42.bmp" class="" title="39~42">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/43~46.bmp" class="" title="43~46">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/47~50.bmp" class="" title="47~50">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/51~54.bmp" class="" title="51~54">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/55~58.bmp" class="" title="55~58">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/242~245.bmp" class="" title="242~245">
<h2 id="n_0-与计算次数分布曲线"><span class="math inline">\(n_0\)</span> 与计算次数分布曲线</h2>
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E6%AC%A1%E6%95%B0%E4%B8%8E%E5%88%9D%E5%80%BC.bmp" class="" title="次数与初值">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=400.bmp" class="">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=1000.bmp" class="" title="n0&#x3D;1000">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=5000.bmp" class="" title="n0&#x3D;5000">
<img src="/2019/09/25/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/%E8%80%83%E6%8B%89%E5%85%B9%E7%8C%9C%E6%83%B3/n0=10000.bmp" class="" title="n0&#x3D;10000">
]]></content>
  </entry>
  <entry>
    <title>几种算法误差报告</title>
    <url>/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="几种算法误差报告">几种算法误差报告</h1>
<p>​ 本文主要探讨了几种计算天顶角的算法，并且根据已经测得的标准数据进行了误差对比，以此来判断几种算法的精度。</p>
<h2 id="原算法的误差">原算法的误差</h2>
<h3 id="算法的计算步骤">算法的计算步骤</h3>
<p>​ 算法的详情我不是很了解，但是我得到了计算后的数据，将其与标准数据做对比。</p>
<h3 id="算法的实现代码">算法的实现代码</h3>
<p>​ MATLAB代码，new1是通过.csv文件导入得到的.mat数据。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%连接日期与时间</span></span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line"><span class="comment">%计算误差</span></span><br><span class="line">y = new1.Real-new1.Calculate;</span><br><span class="line"><span class="comment">%制图</span></span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果">算法的最终结果</h3>
<p>​ 得到的结果如图:</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/huang.bmp" class="" title="huang">
<p>​ 根据上图可以看出来，在所给的测试数据中，天顶角的计算误差在<strong><u>-0.006~0.01</u></strong>。</p>
<h2 id="五种算法的公共部分">五种算法的公共部分</h2>
<h3 id="前时间处理部分">前时间处理部分</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%CE%94%CF%84.png" class="" title="Δτ">
<p>​ Δτ的计算是根据上图用插值法计算的一个线性表达式</p>
<p><span class="math display">\[
\Delta\tau=96.4+0.00158t\\
\]</span></p>
<p><span class="math display">\[
t=\Delta day=(year_{now}-2060)\times365.2425
\]</span> ​ 参数解释:</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Parameter.png" class="" title="Parameter">
<p>​ 根据实际情况，确定了一些参数</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">参数名称</th>
<th style="text-align: center;">参数符号</th>
<th style="text-align: center;">单位</th>
<th style="text-align: center;">参数值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">经度</td>
<td style="text-align: center;">θ</td>
<td style="text-align: center;">rad</td>
<td style="text-align: center;">1.647765346807846</td>
</tr>
<tr class="even">
<td style="text-align: center;">纬度</td>
<td style="text-align: center;">φ</td>
<td style="text-align: center;">rad</td>
<td style="text-align: center;">0.699702497124527</td>
</tr>
<tr class="odd">
<td style="text-align: center;">压强</td>
<td style="text-align: center;">P</td>
<td style="text-align: center;">atm</td>
<td style="text-align: center;">0.85862324</td>
</tr>
<tr class="even">
<td style="text-align: center;">温度</td>
<td style="text-align: center;">T</td>
<td style="text-align: center;">℃</td>
<td style="text-align: center;">25</td>
</tr>
</tbody>
</table>
<p>​ 在计算过程中，如果月份m&lt;2，那么把月份加12，年份减1，这里的INT是表示向0取整。前处理过程如下：</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/PreProcess.png" class="">
<p><span class="math display">\[
\omega=0.017202786day^{-1}
\]</span></p>
<h3 id="后角度计算部分">后角度计算部分</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep1.png" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep2.png" class="" title="Finalstep (2)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep3.png" class="" title="Finalstep (3)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep4.png" class="" title="Finalstep (4)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep5.png" class="" title="Finalstep (5)">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Finalstep6.png" class="" title="Finalstep (6)">
<p>​ 计算时只需要知道经<strong>纬度，赤经赤纬，时角</strong>就可以了。</p>
<h2 id="第一种算法的误差">第一种算法的误差</h2>
<h3 id="算法的计算步骤-1">算法的计算步骤</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al1.png" class="">
<h3 id="算法的实现代码-1">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第一种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line"><span class="comment">%调用算法函数计算</span></span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun1(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line"><span class="comment">% 计算差值</span></span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="comment">% 画图</span></span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% reportFun1函数</span></span><br><span class="line"><span class="comment">% 主要是根据文献的步骤写的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun1</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem] = readFile(data);</span><br><span class="line"><span class="comment">%需要转化为的数值或者其他常量</span></span><br><span class="line">[theta,phi,omega,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line"><span class="comment">%算法第一步，计算s1=sin(omega*te),c1=cos(omega*te);</span></span><br><span class="line">s1 = <span class="built_in">sin</span>(omega*te);c1=<span class="built_in">cos</span>(omega*te);</span><br><span class="line"><span class="comment">%算法第二步，计算s2=2*s1*c1,c2=(c1+s1)*(c1-s1)</span></span><br><span class="line">s2=<span class="number">2</span>*s1.*c1;c2=(c1+s1).*(c1-s1);</span><br><span class="line"><span class="comment">%算法第三步，计算赤经α</span></span><br><span class="line">alpha = <span class="number">-1.38880</span>+<span class="number">1.72027920</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.199</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1...</span><br><span class="line">        <span class="number">-2.65</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c1+<span class="number">4.050</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s2+<span class="number">1.525</span>*<span class="number">10</span>^(<span class="number">-2</span>)*c2;</span><br><span class="line"><span class="comment">%算法第四步，把α转换到方便的范围:α→mod(α,2π)</span></span><br><span class="line">alpha = <span class="built_in">mod</span>(alpha,<span class="number">2</span>*<span class="built_in">pi</span>);                                 <span class="comment">%根据算法用方便的范围代替，此时还是弧度</span></span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;                                <span class="comment">%转换到角度</span></span><br><span class="line"><span class="comment">%算法第五步，计算赤纬δ</span></span><br><span class="line">delta = <span class="number">6.57</span>*<span class="number">10</span>^(<span class="number">-3</span>)+<span class="number">7.347</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1<span class="number">-3.9919</span>*<span class="number">10</span>^(<span class="number">-1</span>)*c1...</span><br><span class="line">        +<span class="number">7.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*s2<span class="number">-6.60</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c2;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line"><span class="comment">%算法第六步，注意都要用弧度                              </span></span><br><span class="line">H = <span class="number">1.75283</span>+<span class="number">6.3003881</span>*t+theta-alpha;</span><br><span class="line"><span class="comment">%算法第七步,转到方便的范围H→mod(H+π，2π)-π</span></span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>,<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;                                        <span class="comment">%转角度输出</span></span><br><span class="line"><span class="comment">% %Final Step,几个算法都一样的</span></span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% ReadFile函数</span></span><br><span class="line"><span class="comment">% 读取年月日时分秒</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[y,m,d,h,min,sec,lon,lat,pre,tem]</span> = <span class="title">readFile</span><span class="params">(data)</span></span></span><br><span class="line">y = data(:,<span class="number">1</span>);</span><br><span class="line">m = data(:,<span class="number">2</span>);</span><br><span class="line">d = data(:,<span class="number">3</span>);</span><br><span class="line">h = data(:,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">min</span> = data(:,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">sec</span> = data(:,<span class="number">6</span>);</span><br><span class="line">[~,col] = <span class="built_in">size</span>(data);</span><br><span class="line"><span class="keyword">if</span>(col&gt;<span class="number">6</span>)</span><br><span class="line">lon = data(:,<span class="number">7</span>);</span><br><span class="line">lat = data(:,<span class="number">8</span>);</span><br><span class="line">pre = data(:,<span class="number">9</span>);</span><br><span class="line">tem = data(:,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    [lon,lat,pre,tem] = definePara();</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=y&#x27;;</span><br><span class="line">m=m&#x27;;</span><br><span class="line">d=d&#x27;;</span><br><span class="line">h=h&#x27;;</span><br><span class="line"><span class="built_in">min</span>=min&#x27;;</span><br><span class="line"><span class="built_in">sec</span>=sec&#x27;;</span><br><span class="line">lon=lon&#x27;;</span><br><span class="line">pre=pre&#x27;;</span><br><span class="line">tem=tem&#x27;;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% Preprocess函数</span></span><br><span class="line"><span class="comment">% 主要做一些前处理工作，如计算年积日等，也是根据文献来的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[theta,phi,omega,t,te]</span>=<span class="title">Preprocess</span><span class="params">(y,m,d,h,min,sec,lon,lat)</span></span></span><br><span class="line"><span class="comment">%调用格式[theta,phi,omega,t,te]=Proprocess(y,m,d,h,min,sec,lon,lat)</span></span><br><span class="line"><span class="comment">%输出参数[经度弧度θ，纬度弧度φ，ω常数，与2060相距天数t，t加上Δτ后的te]</span></span><br><span class="line"><span class="comment">%输入参数(年year，月month，日day，时hour，分minute，秒second，经度longitude(°)，纬度latitude(°))</span></span><br><span class="line">h = h+<span class="built_in">min</span>/<span class="number">60</span>+<span class="built_in">sec</span>/<span class="number">3600</span>;              <span class="comment">%精确时间</span></span><br><span class="line">theta = lon*<span class="built_in">pi</span>/<span class="number">180</span>;                 <span class="comment">%theta表示经度的弧度</span></span><br><span class="line">phi = lat*<span class="built_in">pi</span>/<span class="number">180</span>;                   <span class="comment">%phi表示纬度的弧度</span></span><br><span class="line">omega = <span class="number">0.017202786</span>;                <span class="comment">%omega是算法给的，单位是day^(-1)</span></span><br><span class="line">tau = <span class="number">96.4</span>+<span class="number">0.00158</span>*(y<span class="number">-2060</span>)*<span class="number">365</span>;    <span class="comment">%tau是前面用插值曲线计算的，代表论文中的Δτ</span></span><br><span class="line"><span class="keyword">if</span>(m&lt;=<span class="number">2</span>)                            <span class="comment">%根据前面的描述，如果月份小于2，那么月份+2，年份-1</span></span><br><span class="line">    m=m+<span class="number">12</span>;</span><br><span class="line">    y=y<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%根据算法1中的公式计算</span></span><br><span class="line"><span class="comment">%根据论文，也通过验证，代码没问题，下式的t是距离2060的天数，小的为-，大的为+</span></span><br><span class="line">t = <span class="built_in">fix</span>(<span class="number">365.25</span>*(y<span class="number">-2000</span>))+<span class="built_in">fix</span>(<span class="number">30.6001</span>*(m+<span class="number">1</span>))-<span class="built_in">fix</span>(<span class="number">0.01</span>*y)+d+h/<span class="number">24</span><span class="number">-21958</span>;</span><br><span class="line"><span class="comment">%te就是基于TT独立于地球转动，下面都用这个te来建立全局太阳位置</span></span><br><span class="line">te = t+<span class="number">1.574</span>*<span class="number">10</span>^(<span class="number">-5</span>)*tau;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% finalStep函数</span></span><br><span class="line"><span class="comment">% 几个算法的最终的步骤都是一样的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span>=<span class="title">finalStep</span><span class="params">(phi,delta,H,tem,pre)</span></span></span><br><span class="line"><span class="comment">%函数调用格式:[GammaAngle,zAngle]=FinalStep(phi,delta,H,tem,pre)</span></span><br><span class="line"><span class="comment">%输出参数[方位角GammaAngle(°),天顶角zAngle(°)]</span></span><br><span class="line"><span class="comment">%输入参数(纬度phi,赤纬delta,时角H,温度tem,压强pre)</span></span><br><span class="line">e0 = <span class="built_in">asin</span>(<span class="built_in">sin</span>(phi).*<span class="built_in">sin</span>(delta)+<span class="built_in">cos</span>(phi).*<span class="built_in">cos</span>(delta).*<span class="built_in">cos</span>(H));      <span class="comment">%计算升角e0=arcsin(sinφsinδ+cosφcosδcosH),计算都要弧度</span></span><br><span class="line"><span class="comment">%计算Δpe应该是修正量</span></span><br><span class="line">deltape = <span class="number">-4.26</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">cos</span>(e0);                               <span class="comment">%以地心为中心</span></span><br><span class="line">ep = e0+deltape;</span><br><span class="line"><span class="comment">%计算方位角Γ=atan2(...)见下</span></span><br><span class="line">Gamma = <span class="built_in">atan2</span>(<span class="built_in">sin</span>(H),<span class="built_in">cos</span>(H).*<span class="built_in">sin</span>(phi)-<span class="built_in">tan</span>(delta).*<span class="built_in">cos</span>(phi));</span><br><span class="line">GammaAngle = Gamma*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltare = <span class="number">0.08422</span>*pre./((<span class="number">273</span>+tem).*<span class="built_in">tan</span>(ep+(<span class="number">0.003138</span>./(ep+<span class="number">0.08919</span>))));</span><br><span class="line"><span class="comment">%计算天顶角z</span></span><br><span class="line">z = <span class="built_in">pi</span>/<span class="number">2</span>-ep-deltare;</span><br><span class="line">zAngle = z*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-1">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="" title="第一种算法">
<p>​ 根据文献的第一种算法计算的误差不容乐观，在<strong><u>-0.2<sub>0.3</u><strong>之间，参考黄冬师兄算的误差，这个扩大了30倍。说明这个算法的精度不是很高，在文献中，这个算法最后也使用了计算数据进行了比较，他给出天顶角的误差范围在</strong><u>-0.19</sub>0.19</u></strong>，实际计算的比这个范围稍大些，只能说是我们这个数据不够精确或者文献的数据凑得比较好。</p>
<h2 id="第二种算法的误差">第二种算法的误差</h2>
<h3 id="算法的计算步骤-2">算法的计算步骤</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al2.png" class="">
<h3 id="算法的实现代码-2">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第二种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun2(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% reportFun2函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun2</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line">[theta,phi,omega,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line">[~,col]=<span class="built_in">size</span>(te);</span><br><span class="line"><span class="comment">%Step1</span></span><br><span class="line">s1=<span class="built_in">sin</span>(omega*te);c1=<span class="built_in">cos</span>(omega*te);</span><br><span class="line"><span class="comment">%Step2</span></span><br><span class="line">s2=<span class="number">2</span>*s1.*c1;c2=(c1+s1).*(c1-s1);</span><br><span class="line"><span class="comment">%Step3</span></span><br><span class="line">s3=s2.*c1+c2.*s1;c3=c2.*c1-s2.*s1;</span><br><span class="line"><span class="comment">%Step4</span></span><br><span class="line">s4=<span class="number">2</span>*s2.*c2;c4=(c2+s2).*(c2-s2);</span><br><span class="line"><span class="comment">%Step5</span></span><br><span class="line">alpha = <span class="number">-1.38880</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">1.72027920</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.199</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1...</span><br><span class="line">        <span class="number">-2.65</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c1+<span class="number">4.050</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s2+<span class="number">1.525</span>*<span class="number">10</span>^(<span class="number">-2</span>)*c2...</span><br><span class="line">        +<span class="number">1.33</span>*<span class="number">10</span>^(<span class="number">-3</span>)*s3+<span class="number">3.8</span>*<span class="number">10</span>^(<span class="number">-4</span>)*c3+<span class="number">7.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*s4+<span class="number">6.2</span>*<span class="number">10</span>^(<span class="number">-4</span>)*c4;</span><br><span class="line"><span class="comment">%Step6</span></span><br><span class="line">alpha = <span class="built_in">mod</span>(alpha,<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line"><span class="comment">%Step7</span></span><br><span class="line">delta = <span class="number">6.57</span>*<span class="number">10</span>^(<span class="number">-3</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">7.347</span>*<span class="number">10</span>^(<span class="number">-2</span>)*s1<span class="number">-3.9919</span>*<span class="number">10</span>^(<span class="number">-1</span>)*c1...</span><br><span class="line">        +<span class="number">7.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*s2<span class="number">-6.60</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c2+<span class="number">1.50</span>*<span class="number">10</span>^(<span class="number">-3</span>)*s3...</span><br><span class="line">        <span class="number">-2.58</span>*<span class="number">10</span>^(<span class="number">-3</span>)*c3+<span class="number">6</span>*<span class="number">10</span>^(<span class="number">-5</span>)*s4<span class="number">-1.3</span>*<span class="number">10</span>^(<span class="number">-4</span>)*c4;</span><br><span class="line"><span class="comment">%Step8</span></span><br><span class="line">H = <span class="number">1.75283</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">6.3003881</span>*t+theta-alpha;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col);</span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>​ 其实最大的不同只是reportFun()函数是不一样的，因为这个是算法的核心，主函数也是类似的，写入数据，调用函数，得到输出，最后画一下误差图。</p>
<p>​ 其他的前处理函数，后处理函数都是一模一样的。</p>
<h3 id="算法的最终结果-2">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%BA%8C%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 根据文献的第二种算法计算的误差也是不太OK，而且有个严重的问题。从图上看出来，这个集散的误差范围在<strong><u>-0.2<sub>0.2</u><strong>之间，参考黄冬师兄算的误差，这个误差其实相对于第一种算法减小的不是很多。而且对比文献，他给出天顶角的误差范围在</strong><u>-0.034</sub>0.034</u></strong>，实际计算的比这个范围大了6倍，这个误差还是很大的。</p>
<h2 id="第三种算法的误差">第三种算法的误差</h2>
<h3 id="算法的计算步骤-3">算法的计算步骤</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al3.png" class="">
<h3 id="算法的实现代码-3">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第三种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun3(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun3</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line"><span class="comment">%需要转化为的数值或者其他常量</span></span><br><span class="line">[theta,phi,~,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line">[~,col]=<span class="built_in">size</span>(te);</span><br><span class="line">omegaa = <span class="number">0.0172019715</span>;</span><br><span class="line"><span class="comment">%Step1</span></span><br><span class="line">lambda = <span class="number">-1.388803</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">1.720279216</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.3366</span>*<span class="number">10</span>^(<span class="number">-2</span>)...</span><br><span class="line">         *<span class="built_in">sin</span>(omegaa*te<span class="number">-0.06172</span>)+<span class="number">3.53</span>*<span class="number">10</span>^(<span class="number">-4</span>)*<span class="built_in">sin</span>(<span class="number">2</span>*omegaa*te<span class="number">-0.1163</span>);</span><br><span class="line"><span class="comment">%Step2</span></span><br><span class="line">epsilon = <span class="number">4.089567</span>*<span class="number">10</span>^(<span class="number">-1</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,col)<span class="number">-6.19</span>*<span class="number">10</span>^(<span class="number">-9</span>)*te;</span><br><span class="line"><span class="comment">%Step3</span></span><br><span class="line">slambda=<span class="built_in">sin</span>(lambda);clambda=<span class="built_in">cos</span>(lambda);</span><br><span class="line"><span class="comment">%Step4</span></span><br><span class="line">sepsilon=<span class="built_in">sin</span>(epsilon);cepsilon=<span class="built_in">sqrt</span>(<span class="number">1</span>-sepsilon.^(<span class="number">2</span>));</span><br><span class="line"><span class="comment">%Step5</span></span><br><span class="line">alpha = <span class="built_in">atan2</span>(slambda.*cepsilon,clambda);</span><br><span class="line"><span class="comment">%Step6</span></span><br><span class="line"><span class="keyword">if</span>(alpha&lt;<span class="number">0</span>)</span><br><span class="line">    alpha = alpha+<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%Step7</span></span><br><span class="line">delta = <span class="built_in">asin</span>(slambda.*sepsilon);</span><br><span class="line"><span class="comment">%Step8</span></span><br><span class="line">H = <span class="number">1.75283</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">6.3003881</span>*t+theta-alpha;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col);</span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-3">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%B8%89%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 从图上看出来，这个计算的误差范围在<strong><u>-0.17<sub>0.17</u><strong>之间。对比文献，他给出天顶角的误差范围在</strong><u>-0.0093</sub>0.0093</u></strong>，实际计算的比这个范围大了18倍，说明这个差距还是很大的，是有一定问题的。</p>
<h2 id="第四种算法的误差">第四种算法的误差</h2>
<h3 id="算法的计算步骤-4">算法的计算步骤</h3>

<p>.png)</p>

<p>.png)</p>
<h3 id="算法的实现代码-4">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第三种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun4(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun4</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line">[theta,phi,~,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line">[~,col]=<span class="built_in">size</span>(te);</span><br><span class="line">omegaa = <span class="number">0.0172019715</span>;</span><br><span class="line">omegan = <span class="number">9.282</span>*<span class="number">10</span>^(<span class="number">-4</span>);</span><br><span class="line"><span class="comment">%Step1</span></span><br><span class="line">L = <span class="number">1.752790</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">1.720279216</span>*<span class="number">10</span>^(<span class="number">-2</span>)*te+<span class="number">3.3366</span>*<span class="number">10</span>^(<span class="number">-2</span>)...</span><br><span class="line">    *<span class="built_in">sin</span>(omegaa*te<span class="number">-0.06172</span>)+<span class="number">3.53</span>*<span class="number">10</span>^(<span class="number">-4</span>)*<span class="built_in">sin</span>(<span class="number">2</span>*omegaa*te<span class="number">-0.1163</span>);</span><br><span class="line"><span class="comment">%Step2</span></span><br><span class="line">nu = omegan*te<span class="number">-0.8</span>;</span><br><span class="line"><span class="comment">%Step3</span></span><br><span class="line">deltalambda = <span class="number">8.34</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">sin</span>(nu);</span><br><span class="line"><span class="comment">%Step4</span></span><br><span class="line">lambda = L.*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+deltalambda;</span><br><span class="line"><span class="comment">%Step5</span></span><br><span class="line">epsilon = <span class="number">4.089567</span>*<span class="number">10</span>^(<span class="number">-1</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,col)<span class="number">-6.19</span>*<span class="number">10</span>^(<span class="number">-9</span>)*te+<span class="number">4.46</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">cos</span>(nu);</span><br><span class="line"><span class="comment">%Step6</span></span><br><span class="line">slambda=<span class="built_in">sin</span>(lambda);clambda=<span class="built_in">cos</span>(lambda);</span><br><span class="line"><span class="comment">%Step7</span></span><br><span class="line">sepsilon=<span class="built_in">sin</span>(epsilon);cepsilon=<span class="built_in">cos</span>(epsilon);</span><br><span class="line"><span class="comment">%Step8</span></span><br><span class="line">alpha = <span class="built_in">atan2</span>(slambda.*cepsilon,clambda);</span><br><span class="line"><span class="comment">%Step9</span></span><br><span class="line"><span class="keyword">if</span>(alpha&lt;<span class="number">0</span>)</span><br><span class="line">    alpha = alpha+<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%Step10</span></span><br><span class="line">delta = <span class="built_in">asin</span>(slambda.*sepsilon);</span><br><span class="line"><span class="comment">%Step11</span></span><br><span class="line">H = <span class="number">1.7528311</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col)+<span class="number">6.300388099</span>*t+theta-alpha+<span class="number">0.92</span>*deltalambda;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,col);</span><br><span class="line">alphaAngle = alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">deltaAngle = delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle = H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-4">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 算法计算的误差在<strong><u>-0.17<sub>0.17</u><strong>之间。与算法三计算的差不多，文献中写的误差范围是</strong><u>-0.0091</sub>0.0091</u></strong>，差了17.5倍左右。</p>
<h2 id="第五种算法的误差">第五种算法的误差</h2>
<h3 id="算法的计算步骤-5">算法的计算步骤</h3>
<p>使用算法5计算的时候需要给表格中的参数。</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al5table.png" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/Al5.png" class="">

<p>.png)</p>
<h3 id="算法的实现代码-5">算法的实现代码</h3>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 主函数</span></span><br><span class="line"><span class="comment">% 第三种算法的计算误差</span></span><br><span class="line">clear;clc;</span><br><span class="line"><span class="comment">% 合并日期，提取信息</span></span><br><span class="line">load(<span class="string">&#x27;table.mat&#x27;</span>, <span class="string">&#x27;new1&#x27;</span>);</span><br><span class="line">new1.Date.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">new1.Time.Format = <span class="string">&#x27;dd.MM.uuuu HH:mm&#x27;</span>;</span><br><span class="line">x = new1.Date + timeofday(new1.Time);</span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>] = readDateTime(x);</span><br><span class="line">data = [y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>];</span><br><span class="line">[GammaAngle,zAngle] = reportFun4(data);</span><br><span class="line">Real = new1.Real;</span><br><span class="line">y = Real-zAngle&#x27;;</span><br><span class="line"><span class="built_in">plot</span>(x,y);</span><br><span class="line">xlabel(<span class="string">&#x27;时间&#x27;</span>);ylabel(<span class="string">&#x27;误差&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;天顶角实际值与计算值的误差&#x27;</span>);</span><br><span class="line">box off</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% reportFun5函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[GammaAngle,zAngle]</span> = <span class="title">reportFun5</span><span class="params">(data)</span></span></span><br><span class="line">[y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat,pre,tem]=readFile(data);</span><br><span class="line"><span class="comment">%需要转化为的数值或者其他常量</span></span><br><span class="line">[theta,phi,~,t,te]=Preprocess(y,m,d,h,<span class="built_in">min</span>,<span class="built_in">sec</span>,lon,lat);</span><br><span class="line"><span class="comment">%确定常数</span></span><br><span class="line">L0 = <span class="number">1.7527901</span>;</span><br><span class="line">L1 = <span class="number">1.7202792159</span>*<span class="number">10</span>^(<span class="number">-2</span>);</span><br><span class="line">omegaa = <span class="number">0.0172019715</span>;</span><br><span class="line"><span class="built_in">beta</span> = <span class="number">2.92</span>*<span class="number">10</span>^(<span class="number">-5</span>);</span><br><span class="line">omegan = <span class="number">9.282</span>*<span class="number">10</span>^(<span class="number">-4</span>);</span><br><span class="line">omega = [<span class="number">1.49</span>*<span class="number">10</span>^(<span class="number">-3</span>),<span class="number">4.31</span>*<span class="number">10</span>^(<span class="number">-3</span>),<span class="number">1.076</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">1.575</span>*<span class="number">10</span>^(<span class="number">-2</span>),...</span><br><span class="line">         <span class="number">2.152</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">3.152</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">2.1277</span>*<span class="number">10</span>^(<span class="number">-1</span>)];</span><br><span class="line">a = [<span class="number">3.33024</span>*<span class="number">10</span>^(<span class="number">-2</span>),<span class="number">3.512</span>*<span class="number">10</span>^(<span class="number">-4</span>),<span class="number">5.2</span>*<span class="number">10</span>^(<span class="number">-6</span>)];</span><br><span class="line">dbeta = <span class="number">-8.23</span>*<span class="number">10</span>^(<span class="number">-5</span>);</span><br><span class="line">d = [<span class="number">1.27</span>,<span class="number">1.21</span>,<span class="number">2.33</span>,<span class="number">3.49</span>,<span class="number">2.67</span>,<span class="number">1.28</span>,<span class="number">3.14</span>]*<span class="number">10</span>^(<span class="number">-5</span>);</span><br><span class="line">b = [<span class="number">-2.0582</span>*<span class="number">10</span>^(<span class="number">-3</span>),<span class="number">-4.07</span>*<span class="number">10</span>^(<span class="number">-5</span>),<span class="number">-9</span>*<span class="number">10</span>^(<span class="number">-7</span>)];</span><br><span class="line">Phi = [<span class="number">-2.337</span>,<span class="number">3.065</span>,<span class="number">-1.533</span>,<span class="number">-2.358</span>,<span class="number">0.074</span>,<span class="number">1.547</span>,<span class="number">-0.488</span>];</span><br><span class="line">     </span><br><span class="line">[~,volume]=<span class="built_in">size</span>(te);</span><br><span class="line">s1=<span class="built_in">sin</span>(omegaa*te);c1=<span class="built_in">cos</span>(omegaa*te);</span><br><span class="line">s2=<span class="number">2</span>*s1.*c1;c2=(c1+s1).*(c1-s1);</span><br><span class="line">s3=s2.*c1+c2.*s1;c3=c2.*c1-s2.*s1;</span><br><span class="line">Sigma7=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">7</span></span><br><span class="line">    Sigma7=Sigma7+d(<span class="built_in">i</span>)*<span class="built_in">sin</span>(omega(<span class="built_in">i</span>)*te+Phi(<span class="built_in">i</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,volume));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L=L0*<span class="built_in">ones</span>(<span class="number">1</span>,volume)+L1*te+(a(<span class="number">1</span>)*s1+a(<span class="number">2</span>)*s2+a(<span class="number">3</span>)*s3+b(<span class="number">1</span>)*c1+b(<span class="number">2</span>)*c2+b(<span class="number">3</span>)*c3)...</span><br><span class="line">    +dbeta*s1.*<span class="built_in">sin</span>(<span class="built_in">beta</span>*te)+Sigma7;</span><br><span class="line">nu=omegan*te<span class="number">-0.8</span>;</span><br><span class="line">deltalambda=<span class="number">8.34</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">sin</span>(nu);</span><br><span class="line">lambda=L+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume)+deltalambda;</span><br><span class="line">slambda=<span class="built_in">sin</span>(lambda);clambda=<span class="built_in">cos</span>(lambda);</span><br><span class="line">epsilon = <span class="number">4.089567</span>*<span class="number">10</span>^(<span class="number">-1</span>)*<span class="built_in">ones</span>(<span class="number">1</span>,volume)<span class="number">-6.19</span>*<span class="number">10</span>^(<span class="number">-9</span>)*te+<span class="number">4.46</span>*<span class="number">10</span>^(<span class="number">-5</span>)*<span class="built_in">cos</span>(nu);</span><br><span class="line">sepsilon=<span class="built_in">sin</span>(epsilon);cepsilon=<span class="built_in">sqrt</span>(<span class="number">1</span>-sepsilon.^(<span class="number">2</span>));</span><br><span class="line">alpha=<span class="built_in">atan2</span>(slambda.*cepsilon,clambda);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:volume</span><br><span class="line"><span class="keyword">if</span> alpha(<span class="built_in">i</span>)&lt;<span class="number">0</span></span><br><span class="line">    alpha(<span class="built_in">i</span>)=alpha(<span class="built_in">i</span>)+<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">delta=<span class="built_in">asin</span>(slambda.*sepsilon);</span><br><span class="line">H = <span class="number">1.7528311</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume,<span class="number">1</span>)+<span class="number">6.300388099</span>*t+theta-alpha+<span class="number">0.92</span>*deltalambda;</span><br><span class="line">H = <span class="built_in">mod</span>(H+<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume),<span class="number">2</span>*<span class="built_in">pi</span>)-<span class="built_in">pi</span>*<span class="built_in">ones</span>(<span class="number">1</span>,volume);</span><br><span class="line">deltaAngle=delta*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">HAngle=H*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">alphaAngle=alpha*<span class="number">180</span>/<span class="built_in">pi</span>;</span><br><span class="line">[GammaAngle,zAngle]=finalStep(phi,delta,H,tem,pre);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="算法的最终结果-5">算法的最终结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AC%AC%E4%BA%94%E7%A7%8D%E7%AE%97%E6%B3%95.bmp" class="">
<p>​ 图上看误差大概也是<strong><u>-0.17<sub>0.16</u><strong>，文献的误差范围给的是</strong><u>-0.0025</sub>0.0027</u></strong>，差距是64倍左右，这个差距是很大的。</p>
<h4 id="分析一下8月7日">分析一下8月7日</h4>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%955_8%E6%9C%887%E6%97%A5%E8%A7%92%E5%BA%A6%E5%80%BC.bmp" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%955_8%E6%9C%887%E6%97%A5%E8%AF%AF%E5%B7%AE%E6%95%A3%E7%82%B9.bmp" class="">
<p>​ 看了上面两张图，第一张其实看不出来什么，因为误差相对于测量角度的实际值差了100倍左右，能看出来的只是说一天中太阳天顶角是这么分布的。</p>
<p>​ 第二张图和第一张图结合看其实是能看出来一点东西的，看到其实到了6点左右也是天顶角最小，这也是说明这时候高度角最大，太阳在比较高的地方，这时候计算的误差是小的，在00：00和12：00处误差也较大。</p>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%955_8%E6%9C%887%E6%97%A5%E5%88%86%E5%B8%83%E5%9B%BE.bmp" class="">
<p>​ 看了上面的三幅图，看到这些计算的结果，可以发现误差的分布也有点稀奇古怪，看不出来是什么类型的分布，因为我觉得数据的总数也不是很大，来计算的点数也不够多。可能这样子反应的规律也不是跟明确。总体上来看，还是误差小的占的比例大，所以可能这也是可以稍微有点欣慰的一件事吧。</p>
<h2 id="总结">总结</h2>
<h3 id="几种计算方法的结果">几种计算方法的结果</h3>
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%951~%E7%AE%97%E6%B3%954.bmp" class="">
<img src="/2019/10/10/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95%E8%AF%AF%E5%B7%AE%E6%8A%A5%E5%91%8A/%E7%AE%97%E6%B3%950%E5%92%8C%E7%AE%97%E6%B3%955.bmp" class="">
<h3 id="说明">说明</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">算法</th>
<th style="text-align: center;">文献给的误差范围</th>
<th style="text-align: center;">计算的误差范围</th>
<th style="text-align: center;">相差倍数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">[-0.19,0.19]</td>
<td style="text-align: center;">[-0.2,0.3]</td>
<td style="text-align: center;">1.05~1.5</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">[-0,034,0.034]</td>
<td style="text-align: center;">[-0.2,0.2]</td>
<td style="text-align: center;">5.8</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">[-0.0093,0.0092]</td>
<td style="text-align: center;">[-0.17,0.17]</td>
<td style="text-align: center;">18.3</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">[-0.0091,0.0093]</td>
<td style="text-align: center;">[-0.17,0.17]</td>
<td style="text-align: center;">18.7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">[-0.0025,0.0027]</td>
<td style="text-align: center;">[-0.16,0.16]</td>
<td style="text-align: center;">59.3</td>
</tr>
</tbody>
</table>
<p>从这个表格中看出，几种计算出来的结果都在只能最高保证在0.16。</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] Roberto Grena Five new algorithms for the computation of sun position from 2010 to 2110 Solar Energy</p>
<p>https://www.sciencedirect.com/science/article/pii/S0038092X12000400</p>
]]></content>
  </entry>
  <entry>
    <title>CsvHelper 使用手册</title>
    <url>/2018/09/04/CsvHelper%20%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="csvhelper-使用手册">CsvHelper 使用手册</h1>
<h2 id="导引">导引</h2>
<h3 id="安装">安装</h3>
<p>在包管理控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PM&gt; </span><span class="language-bash">Install-Package CsvHelper</span></span><br></pre></td></tr></table></figure>
<p>.NET CLI 控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">dotnet add package CsvHelper</span></span><br></pre></td></tr></table></figure>
<h3 id="读一个-csv-文件">读一个 CSV 文件</h3>
<p>首先创建一个这样的 CSV 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ID,Name</span><br><span class="line">1,one</span><br><span class="line">2,two</span><br></pre></td></tr></table></figure>
<p>做一个类的定义如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ID&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们创建的类的属性名能够匹配目标 CSV 文件的表头，那么我们就无需任何配置的读取这个文件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;Path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>GetRecords&lt;T&gt;</code> 方法将会返回一个 <code>IEnumerable&lt;T&gt;</code>将会<code>yield</code> records。这也就意味着当你在反复查询记录的时候一次只能返回一条，即仅仅只有文件的一小部分会被读到内存中。不过要小心的是，如果你做了任何关于 LINQ 投影的事情，就像调用 <code>.ToList()</code>，整个文件都会被读入到内存中。 <code>CsvReader</code>只能向前走，所以当你想要运行任何 LINQ 查询来防范你的数据，你需要知道如果这样做的话，整个文件会被加载到内存中。</p>
<p>加入我们对前面的 CSV 文件做了一点点改变，使它与之前的属性不是完全匹配了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id,name</span><br><span class="line">1,one</span><br><span class="line">2,two</span><br></pre></td></tr></table></figure>
<p>在此次改动中，我们把名字都用小写字母替代了。由于我们之前设置的属性名能是驼峰式的，这样我们就可以改变属性头与表格头的匹配方式了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    csv.Configuration.PrepareHeaderForMatch = (<span class="built_in">string</span> header,<span class="built_in">int</span> index) =&gt; header.ToLower();</span><br><span class="line">    <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用配置 <code>PrepareHeaderForMatch</code>，我们就能够实现不同名称之间的配对。头名和属性名都包含在 <code>PrepareHeaderForMatch</code>函数中。当 reader 需要使用属性名来设置头名的时候，他们将会匹配。你还能够使用这个函数来做一些其他的事情，比如说空格或者其他的一些字符。</p>
<p>那我们再来看看如果我们去掉 CSV 文件的头名怎么破吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,one</span><br><span class="line">2,two</span><br></pre></td></tr></table></figure>
<p>首先我们需要告诉 reader 文件中已经没有头记录了，配置如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    csv.Configuration.HasHeadRecord = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">record</span> = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CsvReader 将会使用类中属性的位置作为索引点。但是这有一个问题，你不能再依靠 .NET 中类成员的顺序了。解决方法就是将这个属性映射到 CSV 文件的特定位置。</p>
<p>一种方法就是用属性映射。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Index(0)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Index(1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>IndexAttribute</code>允许你指定你想要使用属性的位置。</p>
<p>你还可以使用名字作为映射，让我们使用前面的小写头部的例子来看看怎么使用名字匹配。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;id&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;name&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有许多的属性你同样可以使用。</p>
<p>如果我们无法操作我们做匹配的这个类来增加我们需要的属性怎么办？在这个例子中，我们会使用 <code>ClassMap</code>做一次流利的匹配。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span>:<span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">		Map(M =&gt; m.Id).Name(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">		Map(m =&gt; m.Name).Name(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了来使用映射，我们需要注册配置。（也就是写一下配置方法）</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">    <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推荐创造一个类映射，因为这样的话使用 CsvHelper 会更加强大。</p>
<h3 id="写一个-csv-文件">写一个 CSV 文件</h3>
<p>现在让我们来看一看怎么写一个 CSV 文件吧，这跟读基本上是一样的，只是顺序相反。</p>
<p>跟之前读文件一样，我们用一样的类定义。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们创建一些这样的记录（Records）</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">new</span> Foo&#123;Id=<span class="number">1</span>,Name=<span class="string">&quot;one&quot;</span>&#125;,</span><br><span class="line">	<span class="keyword">new</span> Foo&#123;Id=<span class="number">2</span>,Name=<span class="string">&quot;two&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们可以无需配置的把这些记录写到文件中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;Path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">&#123;</span><br><span class="line">    csv.WriteRecords(records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个 <code>WriteRecords</code>方法将会把所有的记录都写到文件中，在你完成写数据之后，你应该调用 <code>writer.Flush()</code>来确保写入器内部缓冲区中的所有数据都已被刷新到文件中。在 <code>using</code>块中的缓存器会自动被清空，因此我们并不需要刻意的去处理这个块。使用 <code>using</code>块来包含 <code>IDisposable</code>对象是一种比较好的方式，这个对象会在 <code>using</code>块退出之后 自己做出相应的处理（在我们这个例子中会自动清除缓存）。</p>
<p>记得我们是不能在 .NET 里面依赖属性的顺序的吗？如果我们写一个有标头的类的时候，这并不重要，我们只需要在后面使用标头即可。如果我们想要将标头安置在 CSV 文件的相应位置的时候，我们就需要指定索引来保证它的顺序，所以当你在写入 CSV 文件数据的时候设置索引是一个好习惯。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span>:<span class="title">classMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    	Map(m=&gt;m.Id).Index(<span class="number">0</span>).Name(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    	Map(m=&gt;m.Name).Index(<span class="number">1</span>).Name(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="举例说明">举例说明</h2>
<h3 id="预备知识">预备知识</h3>
<p>下面是使用 CsvHelper 需要知道预备知识。</p>
<p>这里有一些关于 .NET 的基础知识是你使用 CsvHelper 前需要知道的，微软有一个<a href="https://docs.microsoft.com/zh-cn/dotnet/">很棒的文档</a>能够帮助你学习更多。</p>
<h4 id="使用和释放">使用和释放</h4>
<p>不论何时你什么时候创建一个 <code>IDisposable</code> 的对象，你都要在使用资源后释放它，大多数类使用非托管资源来是实现 <code>IDisposable</code>，这也就意味着在 <code>System.IO</code>命名空间里的类都需要被释放。</p>
<p>最好的练习释放对象的方法就是使用 <code>using</code>块中写代码，因为在 <code>using</code> 块中，资源会快速自动的被处理。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在这里使用 stream 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stream 对象将会在这里被快速的处理</span></span><br></pre></td></tr></table></figure>
<p>如果你在后面也需要用到这个对象，并且稍后会释放它，那么 使用<code>using</code>会帮你做一些错误处理，因此使用 <code>using</code>相比于直接调用 <code>Dispose</code>依旧是一个更好的选择。但是关于这个目前仍然有一些争论，因为有人觉得它没有展现出使用意图。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="comment">//之后其他部分的代码</span></span><br><span class="line"><span class="keyword">using</span> (stream)&#123;	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读写文件">读写文件</h4>
<p><code>System.IO.File</code>组件包含有打开文件进行读写的方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenWrite(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些东西同样返回一个 <code>FileStream</code>来为操作文件进行服务。加入我们的数据是文本型的，我们就需要 <code>StreamReader</code>和 <code>StreamWriter</code>来读写文本。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream))    </span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(stream))    </span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>StreamReader</code>和 <code>StreamWriter</code>都有一种简便写法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 CsvHelper 并不知道你文件数据的具体编码，所以当你有一个特殊的编码的时候。你需要再你的流（stream）里面指定它。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StremaReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>),Encoding.UTF8)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>,Encoding.UTF8))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CsvReader</code> 和 <code>CsvWriter</code>的构造函数分别是 <code>TextReader</code> 和 <code>TextWriter</code>，<code>TextReader</code> 和 <code>TextWriter</code>都是读写文本的一个抽象类。<code>StreamReader</code>和 <code>StreamWriter</code>都继承自 <code>TextReader</code> 和 <code>TextWriter</code>，因此我们也把它们和<code>CsvReader，CsvWriter</code>一起使用。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">&#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读-csv-文件">读 CSV 文件</h3>
<h4 id="获取类记录">获取类记录</h4>
<p>将 CSV 插入到对应类的对象中。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取动态记录">获取动态记录</h4>
<p>将 CSV 插入到 <code>dynamic</code>对象中，由于无法判断属性的类型，所以动态对象上的所有属性都是字符串。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;<span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取匿名类型的记录">获取匿名类型的记录</h4>
<p>如果你需要将 CSV 插入到匿名类型的对象中，仅仅只要提供匿名类型的定义即可。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> anonymousTypeDefinition = <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            Id = <span class="literal">default</span>(<span class="built_in">int</span>),</span><br><span class="line">            Name = <span class="built_in">string</span>.Empty</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords(anonymousTypeDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举类型记录">枚举类型记录</h4>
<p>将 CSV 转换为一个类对象，该对象可在枚举的每次迭代中重用。每个枚举将生成给定的记录，但只生成映射的成员。如果你提供一个映射却没有映射其中的一个成员，那么该成员就不会得到当前行的数据。值得注意的是，对于你在工程中调用的任何方法会被强制返回一个 <code>IEnumerable</code> 的值，就像方法 <code>ToList()</code> ，你会得到一个与所有记录的实例与你在 CSV 中最后一条记录相对应的的列表。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">record</span> = <span class="keyword">new</span> Foo();</span><br><span class="line">        <span class="keyword">var</span> records = csv.EnumerateRecords(<span class="keyword">record</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> records)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// r is the same instance as record.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="手动读取">手动读取</h4>
<p>因为一些原因，不去配置一个与你的类定义一一对应的映射会变得更加容易，只需要再多纪杭代码就可手动实现行的读取。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;();</span><br><span class="line">        csv.Read();</span><br><span class="line">        csv.ReadHeader();</span><br><span class="line">        <span class="keyword">while</span> (csv.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">record</span> = <span class="keyword">new</span> Foo</span><br><span class="line">            &#123;</span><br><span class="line">                Id = csv.GetField&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;Id&quot;</span>),</span><br><span class="line">                Name = csv.GetField(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            records.Add(<span class="keyword">record</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读取多样的数据集">读取多样的数据集</h4>
<p>因为某些原因，CSV 里面会包含多类型的混合数据集。就像这样读就没有什么问题了，当你检索数据的时候，你需要相应的改变类的类型。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FooId,Name</span><br><span class="line">1,foo</span><br><span class="line"></span><br><span class="line">BarId,Name</span><br><span class="line">07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.IgnoreBlankLines = <span class="literal">false</span>;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;BarMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> fooRecords = <span class="keyword">new</span> List&lt;Foo&gt;();</span><br><span class="line">        <span class="keyword">var</span> barRecords = <span class="keyword">new</span> List&lt;Bar&gt;();</span><br><span class="line">        <span class="keyword">var</span> isHeader = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (csv.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHeader)</span><br><span class="line">            &#123;</span><br><span class="line">                csv.ReadHeader();</span><br><span class="line">                isHeader = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(csv.GetField(<span class="number">0</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                isHeader = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (csv.Context.HeaderRecord[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;FooId&quot;</span>:</span><br><span class="line">                    fooRecords.Add(csv.GetRecord&lt;Foo&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;BarId&quot;</span>:</span><br><span class="line">                    barRecords.Add(csv.GetRecord&lt;Bar&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Unknown record type.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;FooId&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">BarMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Bar</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;BarId&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="读取多种记录类型">读取多种记录类型</h4>
<p>如果你的 CSV 文件中每行都有不同的记录类型，你应该读基于行的类型。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A,1,foo</span><br><span class="line">B,07a0fca2-1b1c-4e44-b1be-c2b05da5afc7,bar</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.HasHeaderRecord = <span class="literal">false</span>;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;BarMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> fooRecords = <span class="keyword">new</span> List&lt;Foo&gt;();</span><br><span class="line">        <span class="keyword">var</span> barRecords = <span class="keyword">new</span> List&lt;Bar&gt;();</span><br><span class="line">        <span class="keyword">while</span> (csv.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (csv.GetField(<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                    fooRecords.Add(csv.GetRecord&lt;Foo&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                    barRecords.Add(csv.GetRecord&lt;Bar&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Unknown record type.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bar</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Index(<span class="number">1</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Index(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">BarMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Bar</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Index(<span class="number">1</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Index(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="写-csv-文件">写 CSV 文件</h3>
<h4 id="写类对象">写类对象</h4>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> Foo &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<h4 id="写动态类对象">写动态类对象</h4>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;<span class="built_in">dynamic</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dynamic</span> <span class="keyword">record</span> = <span class="keyword">new</span> ExpandoObject();</span><br><span class="line">    <span class="keyword">record</span>.Id = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">record</span>.Name = <span class="string">&quot;one&quot;</span>;</span><br><span class="line">    records.Add(<span class="keyword">record</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StringWriter())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line"></span><br><span class="line">        writer.ToString().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<h4 id="写匿名类型对象">写匿名类型对象</h4>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;<span class="built_in">object</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;one&quot;</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<h4 id="类映射">类映射</h4>
<h5 id="映射属性">映射属性</h5>
<p>映射到属性。这个将会把类的属性映射到 CSV 数据的标头名字上，映射需要在配置中被注册，例子等价于一点也不使用类映射，用标头来匹配类名。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;        </span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过名称映射">通过名称映射</h5>
<p>通过标头名映射到属性，如果你的属性名不匹配你的类名，那么你就可以通过名字来映射到属性。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Column1,Column2</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;ColumnA&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Name(<span class="string">&quot;ColumnB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过可替换的名映射">通过可替换的名映射</h5>
<p>多标头名映射至属性，如果你有一个可以改变的标头名，你就可以指定多种头名。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Name(<span class="string">&quot;TheId&quot;</span>, <span class="string">&quot;Id&quot;</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Name(<span class="string">&quot;TheName&quot;</span>, <span class="string">&quot;Name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="映射复制名">映射复制名</h5>
<p>映射已经复制标头名的属性，有时候你复制了头名，这时候会通过标题名称索引来处理。name 索引是标头名称出现次数的索引，而不是标头位置的索引。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Name</span><br><span class="line">1,first,last</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.FirstName).Name(<span class="string">&quot;Name&quot;</span>).NameIndex(<span class="number">0</span>);</span><br><span class="line">        Map(m =&gt; m.LastName).Name(<span class="string">&quot;Name&quot;</span>).NameIndex(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过索引映射">通过索引映射</h5>
<p>通过标头的索引位置映射属性，如果你的数据不包含标头，你就可以使用索引来映射数据。不能通过 .NET 类的属性的顺序来，所以如果你没有使用名称进行映射，确保你指定了索引。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.HasHeaderRecord = <span class="literal">false</span>;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id).Index(<span class="number">0</span>);</span><br><span class="line">        Map(m =&gt; m.Name).Index(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="自动映射">自动映射</h5>
<p>自动映射，如果你没有提供映射配置，你可以直接调用在类中的自动配置，组件会自动帮你创建一个映射。这对于你有比较多数量的属性而言是一个很好的方式，因为他会自动帮你正确的设置好，你需要做的就是对代码做一些小改变。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,The Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMap();</span><br><span class="line">        Map(m =&gt; m.Name).Name(<span class="string">&quot;The Name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="忽略属性">忽略属性</h5>
<p>忽略映射属性，当你使用自动映射类方法的时候，每个属性都会被映射，如果那里有你不想要映射的属性，你就能够直接忽视他们了。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsDirty &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMap();</span><br><span class="line">        Map(m =&gt; m.IsDirty).Ignore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="常数值">常数值</h5>
<p>对于特定的属性设置常值，你能够设置常值属性而不是映射到域。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        <span class="keyword">var</span> records = csv.GetRecords&lt;Foo&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsDirty &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.IsDirty).Constant(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="类型转换">类型转换</h5>
<p>使用指定的类型转换，如果你需要从非标准的 .NET 类型转换或者转换到非标准的 .NET 数据，你能够提供一个类型转化来使用属性。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Json</span><br><span class="line">1,one,&quot;&#123; &quot;&quot;Foo&quot;&quot;: &quot;&quot;Bar&quot;&quot; &#125;&quot;</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Json Json &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonConverter</span>&lt;<span class="title">T</span>&gt; : DefaultTypeConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ConvertFromString</span>(<span class="params"><span class="built_in">string</span> text, IReaderRow row, MemberMapData memberMapData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ConvertToString</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, IWriterRow row, MemberMapData memberMapData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Json).TypeConverter&lt;JsonConverter&lt;Json&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="内联类型转化">内联类型转化</h5>
<p>转化到一个内联类型，如果你不想要写一个满的 <code>ITypeConverter</code>实现，你能够创建一个可以实现功能的函数。</p>
<h6 id="读">读</h6>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Json</span><br><span class="line">1,one,&quot;&#123; &quot;&quot;Foo&quot;&quot;: &quot;&quot;Bar&quot;&quot; &#125;&quot;</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Main()</span><br><span class="line">&#123;</span><br><span class="line">    using (var reader = new StreamReader(&quot;path\\to\\file.csv&quot;))</span><br><span class="line">    using (var csv = new CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Foo</span><br><span class="line">&#123;</span><br><span class="line">    public int Id &#123; get; set; &#125;</span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">    public Json Json &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Json</span><br><span class="line">&#123;</span><br><span class="line">    public string Foo &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class FooMap : ClassMap&lt;Foo&gt;</span><br><span class="line">&#123;</span><br><span class="line">    public FooMap()</span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Json).ConvertUsing(row =&gt; JsonConvert.DeserializeObject&lt;Json&gt;(row.GetField(&quot;Json&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="写">写</h6>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> records = <span class="keyword">new</span> List&lt;Foo&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> Foo &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;one&quot;</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvWriter(writer))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.WriteRecords(records);</span><br><span class="line"></span><br><span class="line">        writer.ToString().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Json Json &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Json).ConvertUsing(o =&gt; JsonConvert.SerializeObject(o));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name,Json</span><br><span class="line">1,one,&quot;&#123;&quot;&quot;Id&quot;&quot;:1,&quot;&quot;Name&quot;&quot;:&quot;&quot;one&quot;&quot;,&quot;&quot;Json&quot;&quot;:null&#125;&quot;</span><br></pre></td></tr></table></figure>
<h5 id="映射选项">映射选项</h5>
<p>属性一定要存在才能映射，如果你有数据不确定是不是有标头，你需要制作映射选项。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,one</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTimeOffset? Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name);</span><br><span class="line">        Map(m =&gt; m.Date).Optional();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="验证">验证</h5>
<p>验证一个域值，如果你想要确保你的数据符合一些标准，你能够验证它。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Id,Name</span><br><span class="line">1,on-e</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.Configuration.RegisterClassMap&lt;FooMap&gt;();</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTimeOffset? Date &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooMap</span> : <span class="title">ClassMap</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map(m =&gt; m.Id);</span><br><span class="line">        Map(m =&gt; m.Name).Validate(field =&gt; !field.Contains(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="属性">属性</h4>
<p>大部分的配置都能通过使用属性类映射被完成，<a href="https://joshclose.github.io/CsvHelper/api/CsvHelper.Configuration.Attributes/">完整的可获得的属性列表</a>。</p>
<p>数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Identifier,name,IsBool,Constant</span><br><span class="line">1,one,yes,a</span><br><span class="line">2,two,no,b</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">    &#123;</span><br><span class="line">        csv.GetRecords&lt;Foo&gt;().ToList().Dump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Name(<span class="string">&quot;Identifier&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Index(1)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">BooleanTrueValues(<span class="string">&quot;yes&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">BooleanFalseValues(<span class="string">&quot;no&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsBool &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Constant(<span class="string">&quot;bar&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Constant &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Optional</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Optional &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Ignore</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Ignored &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类型转换-1">类型转换</h4>
<p>待补...</p>
<h4 id="数据表">数据表</h4>
<p>使用 CsvHelper 去加载数据表是非常频繁的事情，因此我直接将其集成了一个功能。</p>
<p>CsvDataReader 实现 <code>IDataReader</code>方法。，这也就意味着它仅有前向数据读取的所有功能，所以真的不必要去直接使用这个类而不用 <code>CsvReader</code>， <code>CsvDataReader</code>要求有 <code>CsvReader</code>的实例并且在内部使用来完成其功能。</p>
<p>使用 CsvHelper 来加载一个 <code>DataTable</code>是比较简单的，默认的，表格中的所有列将会以字符串的形式被加载。当读取器已经做好了实例化的准备，你只需要在创建 CsvDataReader实例前做一些配置即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do any configuration to `CsvReader` before creating CsvDataReader.</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> dr = <span class="keyword">new</span> CsvDataReader(csv))</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">var</span> dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">        dt.Load(dr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想要指定行和行的类型，数据表也可以进行自动的类型转换。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(<span class="string">&quot;path\\to\\file.csv&quot;</span>))</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> csv = <span class="keyword">new</span> CsvReader(reader))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do any configuration to `CsvReader` before creating CsvDataReader.</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> dr = <span class="keyword">new</span> CsvDataReader(csv))</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">var</span> dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">        dt.Columns.Add(<span class="string">&quot;Id&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">        dt.Columns.Add(<span class="string">&quot;Name&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line"></span><br><span class="line">        dt.Load(dr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用程序接口api">应用程序接口（API）</h3>
<h4 id="命名空间csvhelper-namespace">命名空间（CsvHelper Namespace）</h4>
<h5 id="类classes">类（Classes）</h5>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/BadDataException">BadDataException</a></td>
<td style="text-align: left;">Represents errors that occur due to bad data.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvDataReader">CsvDataReader</a></td>
<td style="text-align: left;">Provides a means of reading a CSV file forward-only by using CsvReader.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvFieldReader">CsvFieldReader</a></td>
<td style="text-align: left;">Reads fields from a <code>System.IO.TextReader</code> .</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvHelperException">CsvHelperException</a></td>
<td style="text-align: left;">Represents errors that occur in CsvHelper.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvParser">CsvParser</a></td>
<td style="text-align: left;">Parses a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvReader">CsvReader</a></td>
<td style="text-align: left;">Reads data that was parsed from <code>CsvHelper.IParser</code> .</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvSerializer">CsvSerializer</a></td>
<td style="text-align: left;">Defines methods used to serialize data into a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/CsvWriter">CsvWriter</a></td>
<td style="text-align: left;">Used to write CSV files.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/Factory">Factory</a></td>
<td style="text-align: left;">Creates CsvHelper classes.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/FieldValidationException">FieldValidationException</a></td>
<td style="text-align: left;">Represents a user supplied field validation failure.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/HeaderValidationException">HeaderValidationException</a></td>
<td style="text-align: left;">Represents a header validation failure.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/MissingFieldException">MissingFieldException</a></td>
<td style="text-align: left;">Represents an error caused because a field is missing in the header while reading a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ObjectResolver">ObjectResolver</a></td>
<td style="text-align: left;">Creates objects from a given type.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ParserException">ParserException</a></td>
<td style="text-align: left;">Represents errors that occur while parsing a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ReaderException">ReaderException</a></td>
<td style="text-align: left;">Represents errors that occur while reading a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ReadingContext">ReadingContext</a></td>
<td style="text-align: left;">CSV reading state.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/RecordBuilder">RecordBuilder</a></td>
<td style="text-align: left;">Builds CSV records.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ReflectionExtensions">ReflectionExtensions</a></td>
<td style="text-align: left;">Extensions to help with reflection.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ValidationException">ValidationException</a></td>
<td style="text-align: left;">Represents a user supplied validation failure.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/WriterException">WriterException</a></td>
<td style="text-align: left;">Represents errors that occur while writing a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/WritingContext">WritingContext</a></td>
<td style="text-align: left;">CSV writing state.</td>
</tr>
</tbody>
</table>
<h5 id="接口interfaces">接口（Interfaces）</h5>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IFactory">IFactory</a></td>
<td style="text-align: left;">Defines methods used to create CsvHelper classes.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IFieldReader">IFieldReader</a></td>
<td style="text-align: left;">Defines methods used to read a field in a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IObjectResolver">IObjectResolver</a></td>
<td style="text-align: left;">Defines the functionality of a class that creates objects from a given type.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IParser">IParser</a></td>
<td style="text-align: left;">Defines methods used the parse a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IReader">IReader</a></td>
<td style="text-align: left;">Defines methods used to read parsed data from a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IReaderRow">IReaderRow</a></td>
<td style="text-align: left;">Defines methods used to read parsed data from a CSV file row.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/ISerializer">ISerializer</a></td>
<td style="text-align: left;">Defines methods used to serialize data into a CSV file.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IWriter">IWriter</a></td>
<td style="text-align: left;">Defines methods used to write to a CSV file.</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/IWriterRow">IWriterRow</a></td>
<td style="text-align: left;">Defines methods used to write a CSV row.</td>
</tr>
</tbody>
</table>
<h5 id="枚举enums">枚举（Enums）</h5>
<table>
<tbody>
<tr class="odd">
<td style="text-align: left;"><a href="https://joshclose.github.io/CsvHelper/api/CsvHelper/Caches">Caches</a></td>
<td style="text-align: left;">Types of caches.</td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
</search>
